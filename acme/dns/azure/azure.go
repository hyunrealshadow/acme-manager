// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/azure
// License: MIT

package azure

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strings"
	"time"

	aazure "github.com/Azure/go-autorest/autorest/azure"
	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/providers/dns/azure"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvClientID             = "clientId"
	EnvClientSecret         = "clientSecret"
	EnvEnvironment          = "environment"
	EnvMetadataEndpoint     = "metadataEndpoint"
	EnvPollingInterval      = "pollingInterval"
	EnvPrivateZone          = "privateZone"
	EnvPropagationTimeout   = "propagationTimeout"
	EnvResourceGroup        = "resourceGroup"
	EnvSubscriptionID       = "subscriptionId"
	EnvTTL                  = "ttl"
	EnvTenantID             = "tenantId"
	EnvZoneName             = "zoneName"
	defaultMetadataEndpoint = "http://169.254.169.254"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Azure (deprecated) Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"resourceGroup\":{\"type\":\"string\",\"description\":\"Resource group\"},\"instanceMetadataService\":{\"type\":\"string\",\"description\":\"If the credentials are **not** set via the environment, then it will attempt to get a bearer token via the [instance metadata service](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service).\"},\"environment\":{\"type\":\"string\",\"description\":\"Azure environment, one of: public, usgovernment, german, and china\"},\"clientId\":{\"type\":\"string\",\"description\":\"Client ID\"},\"clientSecret\":{\"type\":\"string\",\"description\":\"Client secret\"},\"subscriptionId\":{\"type\":\"string\",\"description\":\"Subscription ID\"},\"tenantId\":{\"type\":\"string\",\"description\":\"Tenant ID\"}},\"additional\":{\"privateZone\":{\"type\":\"string\",\"description\":\"Set to true to use Azure Private DNS Zones and not public\"},\"zoneName\":{\"type\":\"string\",\"description\":\"Zone name to use inside Azure DNS service to add the TXT record in\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"metadataEndpoint\":{\"type\":\"string\",\"description\":\"Metadata Service endpoint URL\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("resourceGroup", "instanceMetadataService", "environment", "clientId", "clientSecret", "subscriptionId", "tenantId")
var additionalFields = mapset.NewSet("privateZone", "zoneName", "pollingInterval", "propagationTimeout", "ttl", "metadataEndpoint")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal azure JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add azure schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile azure schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("azure: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *azure.Config {
	return &azure.Config{
		ZoneName:                env.GetOrFile(EnvZoneName),
		TTL:                     env.GetOrDefaultInt(EnvTTL, 60),
		PropagationTimeout:      env.GetOrDefaultSecond(EnvPropagationTimeout, 2*time.Minute),
		PollingInterval:         env.GetOrDefaultSecond(EnvPollingInterval, 2*time.Second),
		MetadataEndpoint:        env.GetOrFile(EnvMetadataEndpoint),
		ResourceManagerEndpoint: aazure.PublicCloud.ResourceManagerEndpoint,
		ActiveDirectoryEndpoint: aazure.PublicCloud.ActiveDirectoryEndpoint,
	}
}

func NewDNSProvider(env lego.Env) (*azure.DNSProvider, error) {
	config := NewConfig(env)

	environmentName := env.GetOrFile(EnvEnvironment)
	if environmentName != "" {
		var environment aazure.Environment
		switch environmentName {
		case "china":
			environment = aazure.ChinaCloud
		case "german":
			environment = aazure.GermanCloud
		case "public":
			environment = aazure.PublicCloud
		case "usgovernment":
			environment = aazure.USGovernmentCloud
		default:
			return nil, fmt.Errorf("azure: unknown environment %s", environmentName)
		}

		config.ResourceManagerEndpoint = environment.ResourceManagerEndpoint
		config.ActiveDirectoryEndpoint = environment.ActiveDirectoryEndpoint
	}

	config.SubscriptionID = env.GetOrFile(EnvSubscriptionID)
	config.ResourceGroup = env.GetOrFile(EnvResourceGroup)
	config.ClientSecret = env.GetOrFile(EnvClientSecret)
	config.ClientID = env.GetOrFile(EnvClientID)
	config.TenantID = env.GetOrFile(EnvTenantID)
	config.PrivateZone = env.GetOrDefaultBool(EnvPrivateZone, false)

	return azure.NewDNSProviderConfig(config)
}
