// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/azuredns
// License: MIT

package azuredns

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/providers/dns/azuredns"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvAuthMSITimeout               = "authMsiTimeout"
	EnvAuthMethod                   = "authMethod"
	EnvClientID                     = "clientId"
	EnvClientSecret                 = "clientSecret"
	EnvEnvironment                  = "environment"
	EnvGitHubOIDCRequestToken       = "ACTIONS_ID_TOKEN_REQUEST_TOKEN"
	EnvGitHubOIDCRequestURL         = "ACTIONS_ID_TOKEN_REQUEST_URL"
	EnvOIDCRequestToken             = "oidcRequestToken"
	EnvOIDCRequestURL               = "oidcRequestUrl"
	EnvOIDCToken                    = "oidcToken"
	EnvOIDCTokenFilePath            = "oidcTokenFilePath"
	EnvPollingInterval              = "pollingInterval"
	EnvPrivateZone                  = "privateZone"
	EnvPropagationTimeout           = "propagationTimeout"
	EnvResourceGroup                = "resourceGroup"
	EnvServiceDiscoveryFilter       = "servicediscoveryFilter"
	EnvSubscriptionID               = "subscriptionId"
	EnvTTL                          = "ttl"
	EnvTenantID                     = "tenantId"
	EnvZoneName                     = "zoneName"
	ResourceGraphQueryOptionsTop    = 1000
	ResourceGraphTypePrivateDNSZone = "microsoft.network/privatednszones"
	ResourceGraphTypePublicDNSZone  = "microsoft.network/dnszones"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Azure DNS Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"clientId\":{\"type\":\"string\",\"description\":\"Client ID\"},\"clientSecret\":{\"type\":\"string\",\"description\":\"Client secret\"},\"tenantId\":{\"type\":\"string\",\"description\":\"Tenant ID\"},\"clientCertificatePath\":{\"type\":\"string\",\"description\":\"Client certificate path\"}},\"additional\":{\"oidcRequestUrl\":{\"type\":\"string\"},\"oidcTokenFilePath\":{\"type\":\"string\"},\"oidcRequestToken\":{\"type\":\"string\"},\"oidcToken\":{\"type\":\"string\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"environment\":{\"type\":\"string\",\"description\":\"Azure environment, one of: public, usgovernment, and china\"},\"authMethod\":{\"type\":\"string\",\"description\":\"Specify which authentication method to use\"},\"authMsiTimeout\":{\"type\":\"string\",\"description\":\"Managed Identity timeout duration\"},\"resourceGroup\":{\"type\":\"string\",\"description\":\"DNS zone resource group\"},\"zoneName\":{\"type\":\"string\",\"description\":\"Zone name to use inside Azure DNS service to add the TXT record in\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"servicediscoveryFilter\":{\"type\":\"string\",\"description\":\"Advanced ServiceDiscovery filter using Kusto query condition\"},\"subscriptionId\":{\"type\":\"string\",\"description\":\"DNS zone subscription ID\"},\"privateZone\":{\"type\":\"string\",\"description\":\"Set to true to use Azure Private DNS Zones and not public\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("clientId", "clientSecret", "tenantId", "clientCertificatePath")
var additionalFields = mapset.NewSet("oidcRequestUrl", "oidcTokenFilePath", "oidcRequestToken", "oidcToken", "pollingInterval", "propagationTimeout", "environment", "authMethod", "authMsiTimeout", "resourceGroup", "zoneName", "ttl", "servicediscoveryFilter", "subscriptionId", "privateZone")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal azuredns JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add azuredns schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile azuredns schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("azuredns: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *azuredns.Config {
	return &azuredns.Config{
		ZoneName:           env.GetOrFile(EnvZoneName),
		TTL:                env.GetOrDefaultInt(EnvTTL, 60),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, 2*time.Minute),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, 2*time.Second),
		Environment:        cloud.AzurePublic,
	}
}

func NewDNSProvider(env lego.Env) (*azuredns.DNSProvider, error) {
	config := NewConfig(env)

	environmentName := env.GetOrFile(EnvEnvironment)
	if environmentName != "" {
		switch environmentName {
		case "china":
			config.Environment = cloud.AzureChina
		case "public":
			config.Environment = cloud.AzurePublic
		case "usgovernment":
			config.Environment = cloud.AzureGovernment
		default:
			return nil, fmt.Errorf("azuredns: unknown environment %s", environmentName)
		}
	} else {
		config.Environment = cloud.AzurePublic
	}

	config.SubscriptionID = env.GetOrFile(EnvSubscriptionID)
	config.ResourceGroup = env.GetOrFile(EnvResourceGroup)
	config.PrivateZone = env.GetOrDefaultBool(EnvPrivateZone, false)

	config.ClientID = env.GetOrFile(EnvClientID)
	config.ClientSecret = env.GetOrFile(EnvClientSecret)
	config.TenantID = env.GetOrFile(EnvTenantID)

	config.OIDCToken = env.GetOrFile(EnvOIDCToken)
	config.OIDCTokenFilePath = env.GetOrFile(EnvOIDCTokenFilePath)

	config.ServiceDiscoveryFilter = env.GetOrFile(EnvServiceDiscoveryFilter)

	oidcValues, _ := env.GetWithFallback(
		[]string{EnvOIDCRequestURL, EnvGitHubOIDCRequestURL},
		[]string{EnvOIDCRequestToken, EnvGitHubOIDCRequestToken},
	)

	config.OIDCRequestURL = oidcValues[EnvOIDCRequestURL]
	config.OIDCRequestToken = oidcValues[EnvOIDCRequestToken]

	config.AuthMethod = env.GetOrFile(EnvAuthMethod)
	config.AuthMSITimeout = env.GetOrDefaultSecond(EnvAuthMSITimeout, 2*time.Second)

	return azuredns.NewDNSProviderConfig(config)
}
