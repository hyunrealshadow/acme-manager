// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/cloudflare
// License: MIT

package cloudflare

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"net/http"
	"strings"
	"time"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/providers/dns/cloudflare"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	minTTL = 120
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Cloudflare Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"cfApiEmail\":{\"type\":\"string\",\"description\":\"Account email\"},\"cfApiKey\":{\"type\":\"string\",\"description\":\"API key\"},\"cfDnsApiToken\":{\"type\":\"string\",\"description\":\"API token with DNS:Edit permission (since v3.1.0)\"},\"cfZoneApiToken\":{\"type\":\"string\",\"description\":\"API token with Zone:Read permission (since v3.1.0)\"},\"cloudflareEmail\":{\"type\":\"string\",\"description\":\"Alias to CF_API_EMAIL\"},\"cloudflareApiKey\":{\"type\":\"string\",\"description\":\"Alias to CF_API_KEY\"},\"cloudflareDnsApiToken\":{\"type\":\"string\",\"description\":\"Alias to CF_DNS_API_TOKEN\"},\"cloudflareZoneApiToken\":{\"type\":\"string\",\"description\":\"Alias to CF_ZONE_API_TOKEN\"}},\"additional\":{\"cloudflarePollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check (in seconds)\"},\"cloudflarePropagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation (in seconds)\"},\"cloudflareTtl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge (in seconds)\"},\"cloudflareHttpTimeout\":{\"type\":\"string\",\"description\":\"API request timeout (in seconds)\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("cfApiEmail", "cfApiKey", "cfDnsApiToken", "cfZoneApiToken", "cloudflareEmail", "cloudflareApiKey", "cloudflareDnsApiToken", "cloudflareZoneApiToken")
var additionalFields = mapset.NewSet("cloudflarePollingInterval", "cloudflarePropagationTimeout", "cloudflareTtl", "cloudflareHttpTimeout")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal cloudflare JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add cloudflare schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile cloudflare schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("cloudflare: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *cloudflare.Config {
	return &cloudflare.Config{
		TTL:                env.GetOrDefaultInt("cloudflareTtl", minTTL),
		PropagationTimeout: env.GetOrDefaultSecond("cloudflarePropagationTimeout", 2*time.Minute),
		PollingInterval:    env.GetOrDefaultSecond("cloudflarePollingInterval", 2*time.Second),
		HTTPClient: &http.Client{
			Timeout: env.GetOrDefaultSecond("cloudflareHttpTimeout", 30*time.Second),
		},
	}
}

func NewDNSProvider(env lego.Env) (*cloudflare.DNSProvider, error) {
	values, err := env.GetWithFallback(
		[]string{"cloudflareEmail", "cfApiEmail"},
		[]string{"cloudflareApiKey", "cfApiKey"},
	)
	if err != nil {
		var errT error
		values, errT = env.GetWithFallback(
			[]string{"cloudflareDnsApiToken", "cfDnsApiToken"},
			[]string{"cloudflareZoneApiToken", "cfZoneApiToken", "cloudflareDnsApiToken", "cfDnsApiToken"},
		)
		if errT != nil {
			//nolint:errorlint
			return nil, fmt.Errorf("cloudflare: %v or %v", err, errT)
		}
	}

	config := NewConfig(env)
	config.AuthEmail = values["cloudflareEmail"]
	config.AuthKey = values["cloudflareApiKey"]
	config.AuthToken = values["cloudflareDnsApiToken"]
	config.ZoneToken = values["cloudflareZoneApiToken"]

	return cloudflare.NewDNSProviderConfig(config)
}
