// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/efficientip
// License: MIT

package efficientip

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"net/http"
	"strings"
	"time"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/challenge/dns01"
	"github.com/go-acme/lego/v4/providers/dns/efficientip"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvDNSName            = "dnsName"
	EnvHTTPTimeout        = "httpTimeout"
	EnvHostname           = "hostname"
	EnvInsecureSkipVerify = "insecureSkipVerify"
	EnvPassword           = "password"
	EnvPollingInterval    = "pollingInterval"
	EnvPropagationTimeout = "propagationTimeout"
	EnvUsername           = "username"
	EnvViewName           = "viewName"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Efficient IP Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"hostname\":{\"type\":\"string\",\"description\":\"Hostname (ex: foo.example.com)\"},\"dnsName\":{\"type\":\"string\",\"description\":\"DNS name (ex: dns.smart)\"},\"username\":{\"type\":\"string\",\"description\":\"Username\"},\"password\":{\"type\":\"string\",\"description\":\"Password\"}},\"additional\":{\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"httpTimeout\":{\"type\":\"string\",\"description\":\"API request timeout\"},\"insecureSkipVerify\":{\"type\":\"string\",\"description\":\"Whether or not to verify EfficientIP API certificate\"},\"viewName\":{\"type\":\"string\",\"description\":\"View name (ex: external)\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("hostname", "dnsName", "username", "password")
var additionalFields = mapset.NewSet("propagationTimeout", "ttl", "httpTimeout", "insecureSkipVerify", "viewName", "pollingInterval")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal efficientip JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add efficientip schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile efficientip schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("efficientip: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *efficientip.Config {
	return &efficientip.Config{
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, dns01.DefaultPropagationTimeout),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, dns01.DefaultPollingInterval),
		HTTPClient: &http.Client{
			Timeout: env.GetOrDefaultSecond(EnvHTTPTimeout, 10*time.Second),
		},
	}
}

func NewDNSProvider(env lego.Env) (*efficientip.DNSProvider, error) {
	values, err := env.Get(EnvUsername, EnvPassword, EnvHostname, EnvDNSName)
	if err != nil {
		return nil, fmt.Errorf("efficientip: %w", err)
	}

	config := NewConfig(env)
	config.Username = values[EnvUsername]
	config.Password = values[EnvPassword]
	config.Hostname = values[EnvHostname]
	config.DNSName = values[EnvDNSName]
	config.ViewName = env.GetOrDefaultString(EnvViewName, "")
	config.InsecureSkipVerify = env.GetOrDefaultBool(EnvInsecureSkipVerify, false)

	return efficientip.NewDNSProviderConfig(config)
}
