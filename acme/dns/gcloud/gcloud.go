// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/gcloud
// License: MIT

package gcloud

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strings"
	"time"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/challenge/dns01"
	"github.com/go-acme/lego/v4/providers/dns/gcloud"
	"github.com/santhosh-tekuri/jsonschema/v6"
	"golang.org/x/net/context"
)

const (
	EnvAllowPrivateZone   = "allowPrivateZone"
	EnvDebug              = "debug"
	EnvPollingInterval    = "pollingInterval"
	EnvProject            = "project"
	EnvPropagationTimeout = "propagationTimeout"
	EnvServiceAccount     = "serviceAccount"
	EnvTTL                = "ttl"
	EnvZoneID             = "zoneId"
	changeStatusDone      = "done"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Google Cloud Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"project\":{\"type\":\"string\",\"description\":\"Project name (by default, the project name is auto-detected by using the metadata service)\"},\"applicationDefaultCredentials\":{\"type\":\"string\",\"description\":\"[Documentation](https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application)\"},\"serviceAccount\":{\"type\":\"string\",\"description\":\"Account\"}},\"additional\":{\"debug\":{\"type\":\"string\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"allowPrivateZone\":{\"type\":\"string\",\"description\":\"Allows requested domain to be in private DNS zone, works only with a private ACME server (by default: false)\"},\"zoneId\":{\"type\":\"string\",\"description\":\"Allows to skip the automatic detection of the zone\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("project", "applicationDefaultCredentials", "serviceAccount", "serviceAccount")
var additionalFields = mapset.NewSet("debug", "ttl", "allowPrivateZone", "zoneId", "pollingInterval", "propagationTimeout")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal gcloud JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add gcloud schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile gcloud schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("gcloud: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *gcloud.Config {
	return &gcloud.Config{
		Debug:              env.GetOrDefaultBool(EnvDebug, false),
		ZoneID:             env.GetOrDefaultString(EnvZoneID, ""),
		AllowPrivateZone:   env.GetOrDefaultBool(EnvAllowPrivateZone, false),
		TTL:                env.GetOrDefaultInt(EnvTTL, dns01.DefaultTTL),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, 180*time.Second),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, 5*time.Second),
	}
}

func NewDNSProvider(env lego.Env) (*gcloud.DNSProvider, error) {
	// Use a service account file if specified via environment variable.
	if saKey := env.GetOrFile(EnvServiceAccount); saKey != "" {
		return NewDNSProviderServiceAccountKey([]byte(saKey), env)
	}

	// Use default credentials.
	project := env.GetOrDefaultString(EnvProject, autodetectProjectID(context.Background()))
	return NewDNSProviderCredentials(project, env)
}
