// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/infoblox
// License: MIT

package infoblox

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strings"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/challenge/dns01"
	"github.com/go-acme/lego/v4/providers/dns/infoblox"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvDNSView             = "dnsView"
	EnvHTTPTimeout         = "httpTimeout"
	EnvHost                = "host"
	EnvPassword            = "password"
	EnvPollingInterval     = "pollingInterval"
	EnvPort                = "port"
	EnvPropagationTimeout  = "propagationTimeout"
	EnvSSLVerify           = "sslVerify"
	EnvTTL                 = "ttl"
	EnvUsername            = "username"
	EnvWApiVersion         = "wapiVersion"
	defaultPoolConnections = 10
	defaultUserAgent       = "go-acme/lego"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Infoblox Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"username\":{\"type\":\"string\",\"description\":\"Account Username\"},\"password\":{\"type\":\"string\",\"description\":\"Account Password\"},\"host\":{\"type\":\"string\",\"description\":\"Host URI\"}},\"additional\":{\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"httpTimeout\":{\"type\":\"string\",\"description\":\"HTTP request timeout\"},\"dnsView\":{\"type\":\"string\",\"description\":\"The view for the TXT records, default: External\"},\"wapiVersion\":{\"type\":\"string\",\"description\":\"The version of WAPI being used, default: 2.11\"},\"port\":{\"type\":\"string\",\"description\":\"The port for the infoblox grid manager, default: 443\"},\"sslVerify\":{\"type\":\"string\",\"description\":\"Whether or not to verify the TLS certificate, default: true\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("username", "password", "host")
var additionalFields = mapset.NewSet("propagationTimeout", "ttl", "httpTimeout", "dnsView", "wapiVersion", "port", "sslVerify", "pollingInterval")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal infoblox JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add infoblox schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile infoblox schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("infoblox: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *infoblox.Config {
	return &infoblox.Config{
		DNSView:     env.GetOrDefaultString(EnvDNSView, "External"),
		WapiVersion: env.GetOrDefaultString(EnvWApiVersion, "2.11"),
		Port:        env.GetOrDefaultString(EnvPort, "443"),
		SSLVerify:   env.GetOrDefaultBool(EnvSSLVerify, true),

		TTL:                env.GetOrDefaultInt(EnvTTL, dns01.DefaultTTL),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, dns01.DefaultPropagationTimeout),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, dns01.DefaultPollingInterval),
		HTTPTimeout:        env.GetOrDefaultInt(EnvHTTPTimeout, 30),
	}
}

func NewDNSProvider(env lego.Env) (*infoblox.DNSProvider, error) {
	values, err := env.Get(EnvHost, EnvUsername, EnvPassword)
	if err != nil {
		return nil, fmt.Errorf("infoblox: %w", err)
	}

	config := NewConfig(env)
	config.Host = values[EnvHost]
	config.Username = values[EnvUsername]
	config.Password = values[EnvPassword]

	return infoblox.NewDNSProviderConfig(config)
}
