// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/liquidweb
// License: MIT

package liquidweb

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strconv"
	"strings"
	"time"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/providers/dns/liquidweb"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvHTTPTimeout        = "httpTimeout"
	EnvPassword           = "password"
	EnvPollingInterval    = "pollingInterval"
	EnvPropagationTimeout = "propagationTimeout"
	EnvTTL                = "ttl"
	EnvURL                = "url"
	EnvUsername           = "username"
	EnvZone               = "zone"
	defaultBaseURL        = "https://api.liquidweb.com"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Liquid Web Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"username\":{\"type\":\"string\",\"description\":\"Liquid Web API Username\"},\"password\":{\"type\":\"string\",\"description\":\"Liquid Web API Password\"}},\"additional\":{\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"httpTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for the DNS records to be created (not verified)\"},\"zone\":{\"type\":\"string\",\"description\":\"DNS Zone\"},\"url\":{\"type\":\"string\",\"description\":\"Liquid Web API endpoint\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("username", "password")
var additionalFields = mapset.NewSet("ttl", "pollingInterval", "propagationTimeout", "httpTimeout", "zone", "url")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal liquidweb JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add liquidweb schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile liquidweb schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("liquidweb: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(e lego.Env) *liquidweb.Config {
	return &liquidweb.Config{
		BaseURL:            defaultBaseURL,
		TTL:                lego.GetOneWithFallback(e, EnvTTL, 300, strconv.Atoi, altEnvName(EnvTTL)),
		PropagationTimeout: lego.GetOneWithFallback(e, EnvPropagationTimeout, 2*time.Minute, lego.ParseSecond, altEnvName(EnvPropagationTimeout)),
		PollingInterval:    lego.GetOneWithFallback(e, EnvPollingInterval, 2*time.Second, lego.ParseSecond, altEnvName(EnvPollingInterval)),
		HTTPTimeout:        lego.GetOneWithFallback(e, EnvHTTPTimeout, 1*time.Minute, lego.ParseSecond, altEnvName(EnvHTTPTimeout)),
	}
}

func NewDNSProvider(e lego.Env) (*liquidweb.DNSProvider, error) {
	values, err := e.GetWithFallback(
		[]string{EnvUsername, altEnvName(EnvUsername)},
		[]string{EnvPassword, altEnvName(EnvPassword)},
	)
	if err != nil {
		return nil, fmt.Errorf("liquidweb: %w", err)
	}

	config := NewConfig(e)
	config.BaseURL = lego.GetOneWithFallback(e, EnvURL, defaultBaseURL, lego.ParseString, altEnvName(EnvURL))
	config.Username = values[EnvUsername]
	config.Password = values[EnvPassword]
	config.Zone = lego.GetOneWithFallback(e, EnvZone, "", lego.ParseString, altEnvName(EnvZone))

	return liquidweb.NewDNSProviderConfig(config)
}
