// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/ovh
// License: MIT

package ovh

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"net/http"
	"strings"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/challenge/dns01"
	"github.com/go-acme/lego/v4/providers/dns/ovh"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvAccessToken        = "accessToken"
	EnvApplicationKey     = "applicationKey"
	EnvApplicationSecret  = "applicationSecret"
	EnvClientID           = "clientId"
	EnvClientSecret       = "clientSecret"
	EnvConsumerKey        = "consumerKey"
	EnvEndpoint           = "endpoint"
	EnvHTTPTimeout        = "httpTimeout"
	EnvPollingInterval    = "pollingInterval"
	EnvPropagationTimeout = "propagationTimeout"
	EnvTTL                = "ttl"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"OVH Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"clientSecret\":{\"type\":\"string\",\"description\":\"Client secret (OAuth2)\"},\"accessToken\":{\"type\":\"string\",\"description\":\"Access token\"},\"endpoint\":{\"type\":\"string\",\"description\":\"Endpoint URL (ovh-eu or ovh-ca)\"},\"applicationKey\":{\"type\":\"string\",\"description\":\"Application key (Application Key authentication)\"},\"applicationSecret\":{\"type\":\"string\",\"description\":\"Application secret (Application Key authentication)\"},\"consumerKey\":{\"type\":\"string\",\"description\":\"Consumer key (Application Key authentication)\"},\"clientId\":{\"type\":\"string\",\"description\":\"Client ID (OAuth2)\"}},\"additional\":{\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"httpTimeout\":{\"type\":\"string\",\"description\":\"API request timeout\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("clientSecret", "accessToken", "endpoint", "applicationKey", "applicationSecret", "consumerKey", "clientId")
var additionalFields = mapset.NewSet("propagationTimeout", "ttl", "httpTimeout", "pollingInterval")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal ovh JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add ovh schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile ovh schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("ovh: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *ovh.Config {
	return &ovh.Config{
		TTL:                env.GetOrDefaultInt(EnvTTL, dns01.DefaultTTL),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, dns01.DefaultPropagationTimeout),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, dns01.DefaultPollingInterval),
		HTTPClient: &http.Client{
			Timeout: env.GetOrDefaultSecond(EnvHTTPTimeout, DefaultTimeout),
		},
	}
}

func NewDNSProvider(env lego.Env) (*ovh.DNSProvider, error) {
	config := NewConfig(env)

	// https://github.com/ovh/go-ovh/blob/6817886d12a8c5650794b28da635af9fcdfd1162/ovh/configuration.go#L105
	config.APIEndpoint = env.GetOrDefaultString(EnvEndpoint, "ovh-eu")

	config.ApplicationKey = env.GetOrFile(EnvApplicationKey)
	config.ApplicationSecret = env.GetOrFile(EnvApplicationSecret)
	config.ConsumerKey = env.GetOrFile(EnvConsumerKey)

	config.AccessToken = env.GetOrFile(EnvAccessToken)

	clientID := env.GetOrFile(EnvClientID)
	clientSecret := env.GetOrFile(EnvClientSecret)

	if clientID != "" || clientSecret != "" {
		config.OAuth2Config = &ovh.OAuth2Config{
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}

	return ovh.NewDNSProviderConfig(config)
}
