// Code generated by acme-manager, DO NOT EDIT.

package dns

import (
	"acme-manager/acme/dns/alidns"
	"acme-manager/acme/dns/allinkl"
	"acme-manager/acme/dns/arvancloud"
	"acme-manager/acme/dns/auroradns"
	"acme-manager/acme/dns/autodns"
	"acme-manager/acme/dns/azure"
	"acme-manager/acme/dns/azuredns"
	"acme-manager/acme/dns/bindman"
	"acme-manager/acme/dns/bluecat"
	"acme-manager/acme/dns/brandit"
	"acme-manager/acme/dns/bunny"
	"acme-manager/acme/dns/checkdomain"
	"acme-manager/acme/dns/civo"
	"acme-manager/acme/dns/clouddns"
	"acme-manager/acme/dns/cloudflare"
	"acme-manager/acme/dns/cloudns"
	"acme-manager/acme/dns/cloudru"
	"acme-manager/acme/dns/cloudxns"
	"acme-manager/acme/dns/conoha"
	"acme-manager/acme/dns/constellix"
	"acme-manager/acme/dns/cpanel"
	"acme-manager/acme/dns/derak"
	"acme-manager/acme/dns/desec"
	"acme-manager/acme/dns/digitalocean"
	"acme-manager/acme/dns/directadmin"
	"acme-manager/acme/dns/dnshomede"
	"acme-manager/acme/dns/dnsimple"
	"acme-manager/acme/dns/dnsmadeeasy"
	"acme-manager/acme/dns/dnspod"
	"acme-manager/acme/dns/dode"
	"acme-manager/acme/dns/domeneshop"
	"acme-manager/acme/dns/dreamhost"
	"acme-manager/acme/dns/duckdns"
	"acme-manager/acme/dns/dyn"
	"acme-manager/acme/dns/dynu"
	"acme-manager/acme/dns/easydns"
	"acme-manager/acme/dns/efficientip"
	"acme-manager/acme/dns/epik"
	"acme-manager/acme/dns/exoscale"
	"acme-manager/acme/dns/freemyip"
	"acme-manager/acme/dns/gandi"
	"acme-manager/acme/dns/gandiv5"
	"acme-manager/acme/dns/gcloud"
	"acme-manager/acme/dns/gcore"
	"acme-manager/acme/dns/glesys"
	"acme-manager/acme/dns/godaddy"
	"acme-manager/acme/dns/googledomains"
	"acme-manager/acme/dns/hetzner"
	"acme-manager/acme/dns/hostingde"
	"acme-manager/acme/dns/hosttech"
	"acme-manager/acme/dns/httpnet"
	"acme-manager/acme/dns/httpreq"
	"acme-manager/acme/dns/huaweicloud"
	"acme-manager/acme/dns/hurricane"
	"acme-manager/acme/dns/ibmcloud"
	"acme-manager/acme/dns/iij"
	"acme-manager/acme/dns/iijdpf"
	"acme-manager/acme/dns/infoblox"
	"acme-manager/acme/dns/infomaniak"
	"acme-manager/acme/dns/internetbs"
	"acme-manager/acme/dns/inwx"
	"acme-manager/acme/dns/ionos"
	"acme-manager/acme/dns/ipv64"
	"acme-manager/acme/dns/iwantmyname"
	"acme-manager/acme/dns/joker"
	"acme-manager/acme/dns/liara"
	"acme-manager/acme/dns/lightsail"
	"acme-manager/acme/dns/limacity"
	"acme-manager/acme/dns/linode"
	"acme-manager/acme/dns/liquidweb"
	"acme-manager/acme/dns/loopia"
	"acme-manager/acme/dns/luadns"
	"acme-manager/acme/dns/mailinabox"
	"acme-manager/acme/dns/metaname"
	"acme-manager/acme/dns/mijnhost"
	"acme-manager/acme/dns/mittwald"
	"acme-manager/acme/dns/mydnsjp"
	"acme-manager/acme/dns/mythicbeasts"
	"acme-manager/acme/dns/namecheap"
	"acme-manager/acme/dns/namedotcom"
	"acme-manager/acme/dns/namesilo"
	"acme-manager/acme/dns/nearlyfreespeech"
	"acme-manager/acme/dns/netcup"
	"acme-manager/acme/dns/netlify"
	"acme-manager/acme/dns/nicmanager"
	"acme-manager/acme/dns/nifcloud"
	"acme-manager/acme/dns/njalla"
	"acme-manager/acme/dns/nodion"
	"acme-manager/acme/dns/ns1"
	"acme-manager/acme/dns/oraclecloud"
	"acme-manager/acme/dns/otc"
	"acme-manager/acme/dns/ovh"
	"acme-manager/acme/dns/pdns"
	"acme-manager/acme/dns/plesk"
	"acme-manager/acme/dns/porkbun"
	"acme-manager/acme/dns/rackspace"
	"acme-manager/acme/dns/rcodezero"
	"acme-manager/acme/dns/regru"
	"acme-manager/acme/dns/rfc2136"
	"acme-manager/acme/dns/rimuhosting"
	"acme-manager/acme/dns/route53"
	"acme-manager/acme/dns/safedns"
	"acme-manager/acme/dns/sakuracloud"
	"acme-manager/acme/dns/scaleway"
	"acme-manager/acme/dns/selectel"
	"acme-manager/acme/dns/selectelv2"
	"acme-manager/acme/dns/selfhostde"
	"acme-manager/acme/dns/servercow"
	"acme-manager/acme/dns/shellrent"
	"acme-manager/acme/dns/simply"
	"acme-manager/acme/dns/sonic"
	"acme-manager/acme/dns/stackpath"
	"acme-manager/acme/dns/tencentcloud"
	"acme-manager/acme/dns/transip"
	"acme-manager/acme/dns/ultradns"
	"acme-manager/acme/dns/variomedia"
	"acme-manager/acme/dns/vegadns"
	"acme-manager/acme/dns/vercel"
	"acme-manager/acme/dns/versio"
	"acme-manager/acme/dns/vinyldns"
	"acme-manager/acme/dns/vkcloud"
	"acme-manager/acme/dns/vscale"
	"acme-manager/acme/dns/vultr"
	"acme-manager/acme/dns/webnames"
	"acme-manager/acme/dns/websupport"
	"acme-manager/acme/dns/wedos"
	"acme-manager/acme/dns/yandex"
	"acme-manager/acme/dns/yandex360"
	"acme-manager/acme/dns/yandexcloud"
	"acme-manager/acme/dns/zoneee"
	"acme-manager/acme/dns/zonomi"
	"acme-manager/acme/lego"
	"errors"

	"github.com/go-acme/lego/v4/challenge"
)

type DnsProvider struct {
	Name        string
	DisplayName string
	Description string
}

var AllDnsProviders = []DnsProvider{
	{
		Name:        "alidns",
		DisplayName: "Alibaba Cloud DNS",
		Description: ``,
	},
	{
		Name:        "allinkl",
		DisplayName: "all-inkl",
		Description: ``,
	},
	{
		Name:        "arvancloud",
		DisplayName: "ArvanCloud",
		Description: ``,
	},
	{
		Name:        "auroradns",
		DisplayName: "Aurora DNS",
		Description: ``,
	},
	{
		Name:        "autodns",
		DisplayName: "Autodns",
		Description: ``,
	},
	{
		Name:        "azure",
		DisplayName: "Azure (deprecated)",
		Description: ``,
	},
	{
		Name:        "azuredns",
		DisplayName: "Azure DNS",
		Description: ``,
	},
	{
		Name:        "bindman",
		DisplayName: "Bindman",
		Description: ``,
	},
	{
		Name:        "bluecat",
		DisplayName: "Bluecat",
		Description: ``,
	},
	{
		Name:        "brandit",
		DisplayName: "Brandit",
		Description: ``,
	},
	{
		Name:        "bunny",
		DisplayName: "Bunny",
		Description: ``,
	},
	{
		Name:        "checkdomain",
		DisplayName: "Checkdomain",
		Description: ``,
	},
	{
		Name:        "civo",
		DisplayName: "Civo",
		Description: ``,
	},
	{
		Name:        "clouddns",
		DisplayName: "CloudDNS",
		Description: ``,
	},
	{
		Name:        "cloudflare",
		DisplayName: "Cloudflare",
		Description: ``,
	},
	{
		Name:        "cloudns",
		DisplayName: "ClouDNS",
		Description: ``,
	},
	{
		Name:        "cloudru",
		DisplayName: "Cloud.ru",
		Description: ``,
	},
	{
		Name:        "cloudxns",
		DisplayName: "CloudXNS",
		Description: ``,
	},
	{
		Name:        "conoha",
		DisplayName: "ConoHa",
		Description: ``,
	},
	{
		Name:        "constellix",
		DisplayName: "Constellix",
		Description: ``,
	},
	{
		Name:        "cpanel",
		DisplayName: "CPanel/WHM",
		Description: ``,
	},
	{
		Name:        "derak",
		DisplayName: "Derak Cloud",
		Description: ``,
	},
	{
		Name:        "desec",
		DisplayName: "deSEC.io",
		Description: ``,
	},
	{
		Name:        "digitalocean",
		DisplayName: "Digital Ocean",
		Description: ``,
	},
	{
		Name:        "directadmin",
		DisplayName: "DirectAdmin",
		Description: ``,
	},
	{
		Name:        "dnshomede",
		DisplayName: "dnsHome.de",
		Description: ``,
	},
	{
		Name:        "dnsimple",
		DisplayName: "DNSimple",
		Description: ``,
	},
	{
		Name:        "dnsmadeeasy",
		DisplayName: "DNS Made Easy",
		Description: ``,
	},
	{
		Name:        "dnspod",
		DisplayName: "DNSPod (deprecated)",
		Description: `Use the Tencent Cloud provider instead.
`,
	},
	{
		Name:        "dode",
		DisplayName: "Domain Offensive (do.de)",
		Description: ``,
	},
	{
		Name:        "domeneshop",
		DisplayName: "Domeneshop",
		Description: ``,
	},
	{
		Name:        "dreamhost",
		DisplayName: "DreamHost",
		Description: ``,
	},
	{
		Name:        "duckdns",
		DisplayName: "Duck DNS",
		Description: ``,
	},
	{
		Name:        "dyn",
		DisplayName: "Dyn",
		Description: ``,
	},
	{
		Name:        "dynu",
		DisplayName: "Dynu",
		Description: ``,
	},
	{
		Name:        "easydns",
		DisplayName: "EasyDNS",
		Description: ``,
	},
	{
		Name:        "efficientip",
		DisplayName: "Efficient IP",
		Description: ``,
	},
	{
		Name:        "epik",
		DisplayName: "Epik",
		Description: ``,
	},
	{
		Name:        "exoscale",
		DisplayName: "Exoscale",
		Description: ``,
	},
	{
		Name:        "freemyip",
		DisplayName: "freemyip.com",
		Description: ``,
	},
	{
		Name:        "gandi",
		DisplayName: "Gandi",
		Description: ``,
	},
	{
		Name:        "gandiv5",
		DisplayName: "Gandi Live DNS (v5)",
		Description: ``,
	},
	{
		Name:        "gcloud",
		DisplayName: "Google Cloud",
		Description: ``,
	},
	{
		Name:        "gcore",
		DisplayName: "G-Core",
		Description: ``,
	},
	{
		Name:        "glesys",
		DisplayName: "Glesys",
		Description: ``,
	},
	{
		Name:        "godaddy",
		DisplayName: "Go Daddy",
		Description: ``,
	},
	{
		Name:        "googledomains",
		DisplayName: "Google Domains",
		Description: ``,
	},
	{
		Name:        "hetzner",
		DisplayName: "Hetzner",
		Description: ``,
	},
	{
		Name:        "hostingde",
		DisplayName: "Hosting.de",
		Description: ``,
	},
	{
		Name:        "hosttech",
		DisplayName: "Hosttech",
		Description: ``,
	},
	{
		Name:        "httpnet",
		DisplayName: "http.net",
		Description: ``,
	},
	{
		Name:        "httpreq",
		DisplayName: "HTTP request",
		Description: ``,
	},
	{
		Name:        "huaweicloud",
		DisplayName: "Huawei Cloud",
		Description: ``,
	},
	{
		Name:        "hurricane",
		DisplayName: "Hurricane Electric DNS",
		Description: ``,
	},
	{
		Name:        "ibmcloud",
		DisplayName: "IBM Cloud (SoftLayer)",
		Description: ``,
	},
	{
		Name:        "iij",
		DisplayName: "Internet Initiative Japan",
		Description: ``,
	},
	{
		Name:        "iijdpf",
		DisplayName: "IIJ DNS Platform Service",
		Description: ``,
	},
	{
		Name:        "infoblox",
		DisplayName: "Infoblox",
		Description: ``,
	},
	{
		Name:        "infomaniak",
		DisplayName: "Infomaniak",
		Description: ``,
	},
	{
		Name:        "internetbs",
		DisplayName: "Internet.bs",
		Description: ``,
	},
	{
		Name:        "inwx",
		DisplayName: "INWX",
		Description: ``,
	},
	{
		Name:        "ionos",
		DisplayName: "Ionos",
		Description: ``,
	},
	{
		Name:        "ipv64",
		DisplayName: "IPv64",
		Description: ``,
	},
	{
		Name:        "iwantmyname",
		DisplayName: "iwantmyname",
		Description: ``,
	},
	{
		Name:        "joker",
		DisplayName: "Joker",
		Description: ``,
	},
	{
		Name:        "liara",
		DisplayName: "Liara",
		Description: ``,
	},
	{
		Name:        "lightsail",
		DisplayName: "Amazon Lightsail",
		Description: ``,
	},
	{
		Name:        "limacity",
		DisplayName: "Lima-City",
		Description: ``,
	},
	{
		Name:        "linode",
		DisplayName: "Linode (v4)",
		Description: ``,
	},
	{
		Name:        "liquidweb",
		DisplayName: "Liquid Web",
		Description: ``,
	},
	{
		Name:        "loopia",
		DisplayName: "Loopia",
		Description: ``,
	},
	{
		Name:        "luadns",
		DisplayName: "LuaDNS",
		Description: ``,
	},
	{
		Name:        "mailinabox",
		DisplayName: "Mail-in-a-Box",
		Description: ``,
	},
	{
		Name:        "metaname",
		DisplayName: "Metaname",
		Description: ``,
	},
	{
		Name:        "mijnhost",
		DisplayName: "mijn.host",
		Description: ``,
	},
	{
		Name:        "mittwald",
		DisplayName: "Mittwald",
		Description: ``,
	},
	{
		Name:        "mydnsjp",
		DisplayName: "MyDNS.jp",
		Description: ``,
	},
	{
		Name:        "mythicbeasts",
		DisplayName: "MythicBeasts",
		Description: ``,
	},
	{
		Name:        "namecheap",
		DisplayName: "Namecheap",
		Description: `
Configuration for [Namecheap](https://www.namecheap.com).

**To enable API access on the Namecheap production environment, some opaque requirements must be met.**
More information in the section [Enabling API Access](https://www.namecheap.com/support/api/intro/) of the Namecheap documentation.
(2020-08: Account balance of $50+, 20+ domains in your account, or purchases totaling $50+ within the last 2 years.)
`,
	},
	{
		Name:        "namedotcom",
		DisplayName: "Name.com",
		Description: ``,
	},
	{
		Name:        "namesilo",
		DisplayName: "Namesilo",
		Description: ``,
	},
	{
		Name:        "nearlyfreespeech",
		DisplayName: "NearlyFreeSpeech.NET",
		Description: ``,
	},
	{
		Name:        "netcup",
		DisplayName: "Netcup",
		Description: ``,
	},
	{
		Name:        "netlify",
		DisplayName: "Netlify",
		Description: ``,
	},
	{
		Name:        "nicmanager",
		DisplayName: "Nicmanager",
		Description: ``,
	},
	{
		Name:        "nifcloud",
		DisplayName: "NIFCloud",
		Description: ``,
	},
	{
		Name:        "njalla",
		DisplayName: "Njalla",
		Description: ``,
	},
	{
		Name:        "nodion",
		DisplayName: "Nodion",
		Description: ``,
	},
	{
		Name:        "ns1",
		DisplayName: "NS1",
		Description: ``,
	},
	{
		Name:        "oraclecloud",
		DisplayName: "Oracle Cloud",
		Description: ``,
	},
	{
		Name:        "otc",
		DisplayName: "Open Telekom Cloud",
		Description: ``,
	},
	{
		Name:        "ovh",
		DisplayName: "OVH",
		Description: ``,
	},
	{
		Name:        "pdns",
		DisplayName: "PowerDNS",
		Description: ``,
	},
	{
		Name:        "plesk",
		DisplayName: "plesk.com",
		Description: ``,
	},
	{
		Name:        "porkbun",
		DisplayName: "Porkbun",
		Description: ``,
	},
	{
		Name:        "rackspace",
		DisplayName: "Rackspace",
		Description: ``,
	},
	{
		Name:        "rcodezero",
		DisplayName: "RcodeZero",
		Description: ``,
	},
	{
		Name:        "regru",
		DisplayName: "reg.ru",
		Description: ``,
	},
	{
		Name:        "rfc2136",
		DisplayName: "RFC2136",
		Description: ``,
	},
	{
		Name:        "rimuhosting",
		DisplayName: "RimuHosting",
		Description: ``,
	},
	{
		Name:        "route53",
		DisplayName: "Amazon Route 53",
		Description: ``,
	},
	{
		Name:        "safedns",
		DisplayName: "UKFast SafeDNS",
		Description: ``,
	},
	{
		Name:        "sakuracloud",
		DisplayName: "Sakura Cloud",
		Description: ``,
	},
	{
		Name:        "scaleway",
		DisplayName: "Scaleway",
		Description: ``,
	},
	{
		Name:        "selectel",
		DisplayName: "Selectel",
		Description: ``,
	},
	{
		Name:        "selectelv2",
		DisplayName: "Selectel v2",
		Description: ``,
	},
	{
		Name:        "selfhostde",
		DisplayName: "SelfHost.(de|eu)",
		Description: ``,
	},
	{
		Name:        "servercow",
		DisplayName: "Servercow",
		Description: ``,
	},
	{
		Name:        "shellrent",
		DisplayName: "Shellrent",
		Description: ``,
	},
	{
		Name:        "simply",
		DisplayName: "Simply.com",
		Description: ``,
	},
	{
		Name:        "sonic",
		DisplayName: "Sonic",
		Description: ``,
	},
	{
		Name:        "stackpath",
		DisplayName: "Stackpath",
		Description: ``,
	},
	{
		Name:        "tencentcloud",
		DisplayName: "Tencent Cloud DNS",
		Description: ``,
	},
	{
		Name:        "transip",
		DisplayName: "TransIP",
		Description: ``,
	},
	{
		Name:        "ultradns",
		DisplayName: "Ultradns",
		Description: ``,
	},
	{
		Name:        "variomedia",
		DisplayName: "Variomedia",
		Description: ``,
	},
	{
		Name:        "vegadns",
		DisplayName: "VegaDNS",
		Description: ``,
	},
	{
		Name:        "vercel",
		DisplayName: "Vercel",
		Description: ``,
	},
	{
		Name:        "versio",
		DisplayName: "Versio.[nl|eu|uk]",
		Description: ``,
	},
	{
		Name:        "vinyldns",
		DisplayName: "VinylDNS",
		Description: ``,
	},
	{
		Name:        "vkcloud",
		DisplayName: "VK Cloud",
		Description: ``,
	},
	{
		Name:        "vscale",
		DisplayName: "Vscale",
		Description: ``,
	},
	{
		Name:        "vultr",
		DisplayName: "Vultr",
		Description: ``,
	},
	{
		Name:        "webnames",
		DisplayName: "Webnames",
		Description: ``,
	},
	{
		Name:        "websupport",
		DisplayName: "Websupport",
		Description: ``,
	},
	{
		Name:        "wedos",
		DisplayName: "WEDOS",
		Description: ``,
	},
	{
		Name:        "yandex",
		DisplayName: "Yandex PDD",
		Description: ``,
	},
	{
		Name:        "yandex360",
		DisplayName: "Yandex 360",
		Description: ``,
	},
	{
		Name:        "yandexcloud",
		DisplayName: "Yandex Cloud",
		Description: ``,
	},
	{
		Name:        "zoneee",
		DisplayName: "Zone.ee",
		Description: ``,
	},
	{
		Name:        "zonomi",
		DisplayName: "Zonomi",
		Description: ``,
	},
}

func NewDnsProvider(typ string, conf *lego.DnsProviderConfig) (challenge.Provider, error) {
	switch typ {
	case "alidns":
		env, err := alidns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return alidns.NewDNSProvider(*env)
	case "allinkl":
		env, err := allinkl.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return allinkl.NewDNSProvider(*env)
	case "arvancloud":
		env, err := arvancloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return arvancloud.NewDNSProvider(*env)
	case "auroradns":
		env, err := auroradns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return auroradns.NewDNSProvider(*env)
	case "autodns":
		env, err := autodns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return autodns.NewDNSProvider(*env)
	case "azure":
		env, err := azure.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return azure.NewDNSProvider(*env)
	case "azuredns":
		env, err := azuredns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return azuredns.NewDNSProvider(*env)
	case "bindman":
		env, err := bindman.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return bindman.NewDNSProvider(*env)
	case "bluecat":
		env, err := bluecat.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return bluecat.NewDNSProvider(*env)
	case "brandit":
		env, err := brandit.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return brandit.NewDNSProvider(*env)
	case "bunny":
		env, err := bunny.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return bunny.NewDNSProvider(*env)
	case "checkdomain":
		env, err := checkdomain.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return checkdomain.NewDNSProvider(*env)
	case "civo":
		env, err := civo.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return civo.NewDNSProvider(*env)
	case "clouddns":
		env, err := clouddns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return clouddns.NewDNSProvider(*env)
	case "cloudflare":
		env, err := cloudflare.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return cloudflare.NewDNSProvider(*env)
	case "cloudns":
		env, err := cloudns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return cloudns.NewDNSProvider(*env)
	case "cloudru":
		env, err := cloudru.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return cloudru.NewDNSProvider(*env)
	case "cloudxns":
		env, err := cloudxns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return cloudxns.NewDNSProvider(*env)
	case "conoha":
		env, err := conoha.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return conoha.NewDNSProvider(*env)
	case "constellix":
		env, err := constellix.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return constellix.NewDNSProvider(*env)
	case "cpanel":
		env, err := cpanel.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return cpanel.NewDNSProvider(*env)
	case "derak":
		env, err := derak.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return derak.NewDNSProvider(*env)
	case "desec":
		env, err := desec.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return desec.NewDNSProvider(*env)
	case "digitalocean":
		env, err := digitalocean.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return digitalocean.NewDNSProvider(*env)
	case "directadmin":
		env, err := directadmin.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return directadmin.NewDNSProvider(*env)
	case "dnshomede":
		env, err := dnshomede.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dnshomede.NewDNSProvider(*env)
	case "dnsimple":
		env, err := dnsimple.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dnsimple.NewDNSProvider(*env)
	case "dnsmadeeasy":
		env, err := dnsmadeeasy.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dnsmadeeasy.NewDNSProvider(*env)
	case "dnspod":
		env, err := dnspod.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dnspod.NewDNSProvider(*env)
	case "dode":
		env, err := dode.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dode.NewDNSProvider(*env)
	case "domeneshop":
		env, err := domeneshop.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return domeneshop.NewDNSProvider(*env)
	case "dreamhost":
		env, err := dreamhost.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dreamhost.NewDNSProvider(*env)
	case "duckdns":
		env, err := duckdns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return duckdns.NewDNSProvider(*env)
	case "dyn":
		env, err := dyn.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dyn.NewDNSProvider(*env)
	case "dynu":
		env, err := dynu.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return dynu.NewDNSProvider(*env)
	case "easydns":
		env, err := easydns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return easydns.NewDNSProvider(*env)
	case "efficientip":
		env, err := efficientip.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return efficientip.NewDNSProvider(*env)
	case "epik":
		env, err := epik.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return epik.NewDNSProvider(*env)
	case "exoscale":
		env, err := exoscale.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return exoscale.NewDNSProvider(*env)
	case "freemyip":
		env, err := freemyip.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return freemyip.NewDNSProvider(*env)
	case "gandi":
		env, err := gandi.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return gandi.NewDNSProvider(*env)
	case "gandiv5":
		env, err := gandiv5.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return gandiv5.NewDNSProvider(*env)
	case "gcloud":
		env, err := gcloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return gcloud.NewDNSProvider(*env)
	case "gcore":
		env, err := gcore.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return gcore.NewDNSProvider(*env)
	case "glesys":
		env, err := glesys.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return glesys.NewDNSProvider(*env)
	case "godaddy":
		env, err := godaddy.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return godaddy.NewDNSProvider(*env)
	case "googledomains":
		env, err := googledomains.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return googledomains.NewDNSProvider(*env)
	case "hetzner":
		env, err := hetzner.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return hetzner.NewDNSProvider(*env)
	case "hostingde":
		env, err := hostingde.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return hostingde.NewDNSProvider(*env)
	case "hosttech":
		env, err := hosttech.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return hosttech.NewDNSProvider(*env)
	case "httpnet":
		env, err := httpnet.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return httpnet.NewDNSProvider(*env)
	case "httpreq":
		env, err := httpreq.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return httpreq.NewDNSProvider(*env)
	case "huaweicloud":
		env, err := huaweicloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return huaweicloud.NewDNSProvider(*env)
	case "hurricane":
		env, err := hurricane.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return hurricane.NewDNSProvider(*env)
	case "ibmcloud":
		env, err := ibmcloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return ibmcloud.NewDNSProvider(*env)
	case "iij":
		env, err := iij.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return iij.NewDNSProvider(*env)
	case "iijdpf":
		env, err := iijdpf.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return iijdpf.NewDNSProvider(*env)
	case "infoblox":
		env, err := infoblox.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return infoblox.NewDNSProvider(*env)
	case "infomaniak":
		env, err := infomaniak.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return infomaniak.NewDNSProvider(*env)
	case "internetbs":
		env, err := internetbs.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return internetbs.NewDNSProvider(*env)
	case "inwx":
		env, err := inwx.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return inwx.NewDNSProvider(*env)
	case "ionos":
		env, err := ionos.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return ionos.NewDNSProvider(*env)
	case "ipv64":
		env, err := ipv64.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return ipv64.NewDNSProvider(*env)
	case "iwantmyname":
		env, err := iwantmyname.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return iwantmyname.NewDNSProvider(*env)
	case "joker":
		env, err := joker.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return joker.NewDNSProvider(*env)
	case "liara":
		env, err := liara.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return liara.NewDNSProvider(*env)
	case "lightsail":
		env, err := lightsail.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return lightsail.NewDNSProvider(*env)
	case "limacity":
		env, err := limacity.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return limacity.NewDNSProvider(*env)
	case "linode":
		env, err := linode.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return linode.NewDNSProvider(*env)
	case "liquidweb":
		env, err := liquidweb.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return liquidweb.NewDNSProvider(*env)
	case "loopia":
		env, err := loopia.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return loopia.NewDNSProvider(*env)
	case "luadns":
		env, err := luadns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return luadns.NewDNSProvider(*env)
	case "mailinabox":
		env, err := mailinabox.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return mailinabox.NewDNSProvider(*env)
	case "metaname":
		env, err := metaname.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return metaname.NewDNSProvider(*env)
	case "mijnhost":
		env, err := mijnhost.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return mijnhost.NewDNSProvider(*env)
	case "mittwald":
		env, err := mittwald.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return mittwald.NewDNSProvider(*env)
	case "mydnsjp":
		env, err := mydnsjp.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return mydnsjp.NewDNSProvider(*env)
	case "mythicbeasts":
		env, err := mythicbeasts.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return mythicbeasts.NewDNSProvider(*env)
	case "namecheap":
		env, err := namecheap.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return namecheap.NewDNSProvider(*env)
	case "namedotcom":
		env, err := namedotcom.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return namedotcom.NewDNSProvider(*env)
	case "namesilo":
		env, err := namesilo.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return namesilo.NewDNSProvider(*env)
	case "nearlyfreespeech":
		env, err := nearlyfreespeech.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return nearlyfreespeech.NewDNSProvider(*env)
	case "netcup":
		env, err := netcup.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return netcup.NewDNSProvider(*env)
	case "netlify":
		env, err := netlify.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return netlify.NewDNSProvider(*env)
	case "nicmanager":
		env, err := nicmanager.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return nicmanager.NewDNSProvider(*env)
	case "nifcloud":
		env, err := nifcloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return nifcloud.NewDNSProvider(*env)
	case "njalla":
		env, err := njalla.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return njalla.NewDNSProvider(*env)
	case "nodion":
		env, err := nodion.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return nodion.NewDNSProvider(*env)
	case "ns1":
		env, err := ns1.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return ns1.NewDNSProvider(*env)
	case "oraclecloud":
		env, err := oraclecloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return oraclecloud.NewDNSProvider(*env)
	case "otc":
		env, err := otc.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return otc.NewDNSProvider(*env)
	case "ovh":
		env, err := ovh.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return ovh.NewDNSProvider(*env)
	case "pdns":
		env, err := pdns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return pdns.NewDNSProvider(*env)
	case "plesk":
		env, err := plesk.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return plesk.NewDNSProvider(*env)
	case "porkbun":
		env, err := porkbun.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return porkbun.NewDNSProvider(*env)
	case "rackspace":
		env, err := rackspace.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return rackspace.NewDNSProvider(*env)
	case "rcodezero":
		env, err := rcodezero.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return rcodezero.NewDNSProvider(*env)
	case "regru":
		env, err := regru.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return regru.NewDNSProvider(*env)
	case "rfc2136":
		env, err := rfc2136.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return rfc2136.NewDNSProvider(*env)
	case "rimuhosting":
		env, err := rimuhosting.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return rimuhosting.NewDNSProvider(*env)
	case "route53":
		env, err := route53.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return route53.NewDNSProvider(*env)
	case "safedns":
		env, err := safedns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return safedns.NewDNSProvider(*env)
	case "sakuracloud":
		env, err := sakuracloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return sakuracloud.NewDNSProvider(*env)
	case "scaleway":
		env, err := scaleway.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return scaleway.NewDNSProvider(*env)
	case "selectel":
		env, err := selectel.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return selectel.NewDNSProvider(*env)
	case "selectelv2":
		env, err := selectelv2.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return selectelv2.NewDNSProvider(*env)
	case "selfhostde":
		env, err := selfhostde.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return selfhostde.NewDNSProvider(*env)
	case "servercow":
		env, err := servercow.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return servercow.NewDNSProvider(*env)
	case "shellrent":
		env, err := shellrent.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return shellrent.NewDNSProvider(*env)
	case "simply":
		env, err := simply.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return simply.NewDNSProvider(*env)
	case "sonic":
		env, err := sonic.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return sonic.NewDNSProvider(*env)
	case "stackpath":
		env, err := stackpath.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return stackpath.NewDNSProvider(*env)
	case "tencentcloud":
		env, err := tencentcloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return tencentcloud.NewDNSProvider(*env)
	case "transip":
		env, err := transip.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return transip.NewDNSProvider(*env)
	case "ultradns":
		env, err := ultradns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return ultradns.NewDNSProvider(*env)
	case "variomedia":
		env, err := variomedia.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return variomedia.NewDNSProvider(*env)
	case "vegadns":
		env, err := vegadns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return vegadns.NewDNSProvider(*env)
	case "vercel":
		env, err := vercel.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return vercel.NewDNSProvider(*env)
	case "versio":
		env, err := versio.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return versio.NewDNSProvider(*env)
	case "vinyldns":
		env, err := vinyldns.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return vinyldns.NewDNSProvider(*env)
	case "vkcloud":
		env, err := vkcloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return vkcloud.NewDNSProvider(*env)
	case "vscale":
		env, err := vscale.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return vscale.NewDNSProvider(*env)
	case "vultr":
		env, err := vultr.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return vultr.NewDNSProvider(*env)
	case "webnames":
		env, err := webnames.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return webnames.NewDNSProvider(*env)
	case "websupport":
		env, err := websupport.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return websupport.NewDNSProvider(*env)
	case "wedos":
		env, err := wedos.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return wedos.NewDNSProvider(*env)
	case "yandex":
		env, err := yandex.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return yandex.NewDNSProvider(*env)
	case "yandex360":
		env, err := yandex360.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return yandex360.NewDNSProvider(*env)
	case "yandexcloud":
		env, err := yandexcloud.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return yandexcloud.NewDNSProvider(*env)
	case "zoneee":
		env, err := zoneee.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return zoneee.NewDNSProvider(*env)
	case "zonomi":
		env, err := zonomi.ParseConfig(conf)
		if err != nil {
			return nil, err
		}
		return zonomi.NewDNSProvider(*env)
	default:
		return nil, errors.New("dns: unknown provider" + typ)
	}
}

func GetDnsProviderJsonSchema(typ string) (string, error) {
	switch typ {
	case "alidns":
		return alidns.JsonSchema, nil
	case "allinkl":
		return allinkl.JsonSchema, nil
	case "arvancloud":
		return arvancloud.JsonSchema, nil
	case "auroradns":
		return auroradns.JsonSchema, nil
	case "autodns":
		return autodns.JsonSchema, nil
	case "azure":
		return azure.JsonSchema, nil
	case "azuredns":
		return azuredns.JsonSchema, nil
	case "bindman":
		return bindman.JsonSchema, nil
	case "bluecat":
		return bluecat.JsonSchema, nil
	case "brandit":
		return brandit.JsonSchema, nil
	case "bunny":
		return bunny.JsonSchema, nil
	case "checkdomain":
		return checkdomain.JsonSchema, nil
	case "civo":
		return civo.JsonSchema, nil
	case "clouddns":
		return clouddns.JsonSchema, nil
	case "cloudflare":
		return cloudflare.JsonSchema, nil
	case "cloudns":
		return cloudns.JsonSchema, nil
	case "cloudru":
		return cloudru.JsonSchema, nil
	case "cloudxns":
		return cloudxns.JsonSchema, nil
	case "conoha":
		return conoha.JsonSchema, nil
	case "constellix":
		return constellix.JsonSchema, nil
	case "cpanel":
		return cpanel.JsonSchema, nil
	case "derak":
		return derak.JsonSchema, nil
	case "desec":
		return desec.JsonSchema, nil
	case "digitalocean":
		return digitalocean.JsonSchema, nil
	case "directadmin":
		return directadmin.JsonSchema, nil
	case "dnshomede":
		return dnshomede.JsonSchema, nil
	case "dnsimple":
		return dnsimple.JsonSchema, nil
	case "dnsmadeeasy":
		return dnsmadeeasy.JsonSchema, nil
	case "dnspod":
		return dnspod.JsonSchema, nil
	case "dode":
		return dode.JsonSchema, nil
	case "domeneshop":
		return domeneshop.JsonSchema, nil
	case "dreamhost":
		return dreamhost.JsonSchema, nil
	case "duckdns":
		return duckdns.JsonSchema, nil
	case "dyn":
		return dyn.JsonSchema, nil
	case "dynu":
		return dynu.JsonSchema, nil
	case "easydns":
		return easydns.JsonSchema, nil
	case "efficientip":
		return efficientip.JsonSchema, nil
	case "epik":
		return epik.JsonSchema, nil
	case "exoscale":
		return exoscale.JsonSchema, nil
	case "freemyip":
		return freemyip.JsonSchema, nil
	case "gandi":
		return gandi.JsonSchema, nil
	case "gandiv5":
		return gandiv5.JsonSchema, nil
	case "gcloud":
		return gcloud.JsonSchema, nil
	case "gcore":
		return gcore.JsonSchema, nil
	case "glesys":
		return glesys.JsonSchema, nil
	case "godaddy":
		return godaddy.JsonSchema, nil
	case "googledomains":
		return googledomains.JsonSchema, nil
	case "hetzner":
		return hetzner.JsonSchema, nil
	case "hostingde":
		return hostingde.JsonSchema, nil
	case "hosttech":
		return hosttech.JsonSchema, nil
	case "httpnet":
		return httpnet.JsonSchema, nil
	case "httpreq":
		return httpreq.JsonSchema, nil
	case "huaweicloud":
		return huaweicloud.JsonSchema, nil
	case "hurricane":
		return hurricane.JsonSchema, nil
	case "ibmcloud":
		return ibmcloud.JsonSchema, nil
	case "iij":
		return iij.JsonSchema, nil
	case "iijdpf":
		return iijdpf.JsonSchema, nil
	case "infoblox":
		return infoblox.JsonSchema, nil
	case "infomaniak":
		return infomaniak.JsonSchema, nil
	case "internetbs":
		return internetbs.JsonSchema, nil
	case "inwx":
		return inwx.JsonSchema, nil
	case "ionos":
		return ionos.JsonSchema, nil
	case "ipv64":
		return ipv64.JsonSchema, nil
	case "iwantmyname":
		return iwantmyname.JsonSchema, nil
	case "joker":
		return joker.JsonSchema, nil
	case "liara":
		return liara.JsonSchema, nil
	case "lightsail":
		return lightsail.JsonSchema, nil
	case "limacity":
		return limacity.JsonSchema, nil
	case "linode":
		return linode.JsonSchema, nil
	case "liquidweb":
		return liquidweb.JsonSchema, nil
	case "loopia":
		return loopia.JsonSchema, nil
	case "luadns":
		return luadns.JsonSchema, nil
	case "mailinabox":
		return mailinabox.JsonSchema, nil
	case "metaname":
		return metaname.JsonSchema, nil
	case "mijnhost":
		return mijnhost.JsonSchema, nil
	case "mittwald":
		return mittwald.JsonSchema, nil
	case "mydnsjp":
		return mydnsjp.JsonSchema, nil
	case "mythicbeasts":
		return mythicbeasts.JsonSchema, nil
	case "namecheap":
		return namecheap.JsonSchema, nil
	case "namedotcom":
		return namedotcom.JsonSchema, nil
	case "namesilo":
		return namesilo.JsonSchema, nil
	case "nearlyfreespeech":
		return nearlyfreespeech.JsonSchema, nil
	case "netcup":
		return netcup.JsonSchema, nil
	case "netlify":
		return netlify.JsonSchema, nil
	case "nicmanager":
		return nicmanager.JsonSchema, nil
	case "nifcloud":
		return nifcloud.JsonSchema, nil
	case "njalla":
		return njalla.JsonSchema, nil
	case "nodion":
		return nodion.JsonSchema, nil
	case "ns1":
		return ns1.JsonSchema, nil
	case "oraclecloud":
		return oraclecloud.JsonSchema, nil
	case "otc":
		return otc.JsonSchema, nil
	case "ovh":
		return ovh.JsonSchema, nil
	case "pdns":
		return pdns.JsonSchema, nil
	case "plesk":
		return plesk.JsonSchema, nil
	case "porkbun":
		return porkbun.JsonSchema, nil
	case "rackspace":
		return rackspace.JsonSchema, nil
	case "rcodezero":
		return rcodezero.JsonSchema, nil
	case "regru":
		return regru.JsonSchema, nil
	case "rfc2136":
		return rfc2136.JsonSchema, nil
	case "rimuhosting":
		return rimuhosting.JsonSchema, nil
	case "route53":
		return route53.JsonSchema, nil
	case "safedns":
		return safedns.JsonSchema, nil
	case "sakuracloud":
		return sakuracloud.JsonSchema, nil
	case "scaleway":
		return scaleway.JsonSchema, nil
	case "selectel":
		return selectel.JsonSchema, nil
	case "selectelv2":
		return selectelv2.JsonSchema, nil
	case "selfhostde":
		return selfhostde.JsonSchema, nil
	case "servercow":
		return servercow.JsonSchema, nil
	case "shellrent":
		return shellrent.JsonSchema, nil
	case "simply":
		return simply.JsonSchema, nil
	case "sonic":
		return sonic.JsonSchema, nil
	case "stackpath":
		return stackpath.JsonSchema, nil
	case "tencentcloud":
		return tencentcloud.JsonSchema, nil
	case "transip":
		return transip.JsonSchema, nil
	case "ultradns":
		return ultradns.JsonSchema, nil
	case "variomedia":
		return variomedia.JsonSchema, nil
	case "vegadns":
		return vegadns.JsonSchema, nil
	case "vercel":
		return vercel.JsonSchema, nil
	case "versio":
		return versio.JsonSchema, nil
	case "vinyldns":
		return vinyldns.JsonSchema, nil
	case "vkcloud":
		return vkcloud.JsonSchema, nil
	case "vscale":
		return vscale.JsonSchema, nil
	case "vultr":
		return vultr.JsonSchema, nil
	case "webnames":
		return webnames.JsonSchema, nil
	case "websupport":
		return websupport.JsonSchema, nil
	case "wedos":
		return wedos.JsonSchema, nil
	case "yandex":
		return yandex.JsonSchema, nil
	case "yandex360":
		return yandex360.JsonSchema, nil
	case "yandexcloud":
		return yandexcloud.JsonSchema, nil
	case "zoneee":
		return zoneee.JsonSchema, nil
	case "zonomi":
		return zonomi.JsonSchema, nil
	default:
		return "", errors.New("dns: unknown provider " + typ)
	}
}
