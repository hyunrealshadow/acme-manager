// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/route53
// License: MIT

package route53

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strings"
	"time"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/providers/dns/route53"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvAccessKeyID              = "accessKeyId"
	EnvAssumeRoleArn            = "assumeRoleArn"
	EnvExternalID               = "externalId"
	EnvHostedZoneID             = "hostedZoneId"
	EnvMaxRetries               = "maxRetries"
	EnvPollingInterval          = "pollingInterval"
	EnvPropagationTimeout       = "propagationTimeout"
	EnvRegion                   = "region"
	EnvSecretAccessKey          = "secretAccessKey"
	EnvTTL                      = "ttl"
	EnvWaitForRecordSetsChanged = "waitForRecordSetsChanged"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Amazon Route 53 Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"region\":{\"type\":\"string\",\"description\":\"Managed by the AWS client (`AWS_REGION_FILE` is not supported)\"},\"hostedZoneId\":{\"type\":\"string\",\"description\":\"Override the hosted zone ID.\"},\"externalId\":{\"type\":\"string\",\"description\":\"Managed by STS AssumeRole API operation (`AWS_EXTERNAL_ID_FILE` is not supported)\"},\"waitForRecordSetsChanged\":{\"type\":\"string\",\"description\":\"Wait for changes to be INSYNC (it can be unstable)\"},\"assumeRoleArn\":{\"type\":\"string\",\"description\":\"Managed by the AWS Role ARN (`AWS_ASSUME_ROLE_ARN_FILE` is not supported)\"},\"secretAccessKey\":{\"type\":\"string\",\"description\":\"Managed by the AWS client. Secret access key (`AWS_SECRET_ACCESS_KEY_FILE` is not supported, use `AWS_SHARED_CREDENTIALS_FILE` instead)\"},\"profile\":{\"type\":\"string\",\"description\":\"Managed by the AWS client (`AWS_PROFILE_FILE` is not supported)\"},\"accessKeyId\":{\"type\":\"string\",\"description\":\"Managed by the AWS client. Access key ID (`AWS_ACCESS_KEY_ID_FILE` is not supported, use `AWS_SHARED_CREDENTIALS_FILE` instead)\"},\"sdkLoadConfig\":{\"type\":\"string\",\"description\":\"Managed by the AWS client. Retrieve the region from the CLI config file (`AWS_SDK_LOAD_CONFIG_FILE` is not supported)\"}},\"additional\":{\"sharedCredentialsFile\":{\"type\":\"string\",\"description\":\"Managed by the AWS client. Shared credentials file.\"},\"maxRetries\":{\"type\":\"string\",\"description\":\"The number of maximum returns the service will use to make an individual API request\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("region", "hostedZoneId", "externalId", "waitForRecordSetsChanged", "assumeRoleArn", "secretAccessKey", "profile", "accessKeyId", "sdkLoadConfig")
var additionalFields = mapset.NewSet("sharedCredentialsFile", "maxRetries", "pollingInterval", "propagationTimeout", "ttl")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal route53 JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add route53 schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile route53 schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("route53: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *route53.Config {
	return &route53.Config{
		HostedZoneID:  env.GetOrFile(EnvHostedZoneID),
		MaxRetries:    env.GetOrDefaultInt(EnvMaxRetries, 5),
		AssumeRoleArn: env.GetOrDefaultString(EnvAssumeRoleArn, ""),
		ExternalID:    env.GetOrDefaultString(EnvExternalID, ""),

		WaitForRecordSetsChanged: env.GetOrDefaultBool(EnvWaitForRecordSetsChanged, true),

		TTL:                env.GetOrDefaultInt(EnvTTL, 10),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, 2*time.Minute),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, 4*time.Second),
	}
}

func NewDNSProvider(env lego.Env) (*route53.DNSProvider, error) {
	return route53.NewDNSProviderConfig(NewConfig(env))
}
