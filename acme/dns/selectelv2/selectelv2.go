// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/selectelv2
// License: MIT

package selectelv2

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"net/http"
	"strings"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/providers/dns/selectelv2"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvAccount                = "accountId"
	EnvBaseURL                = "baseUrl"
	EnvHTTPTimeout            = "httpTimeout"
	EnvPasswordOS             = "password"
	EnvPollingInterval        = "pollingInterval"
	EnvProjectID              = "projectId"
	EnvPropagationTimeout     = "propagationTimeout"
	EnvTTL                    = "ttl"
	EnvUsernameOS             = "username"
	defaultBaseURL            = "https://api.selectel.ru/domains/v2"
	defaultHTTPTimeout        = 30000000000
	defaultPollingInterval    = 5000000000
	defaultPropagationTimeout = 120000000000
	defaultTTL                = 60
	defaultUserAgent          = "go-acme/lego"
	tokenHeader               = "X-Auth-Token"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Selectel v2 Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"username\":{\"type\":\"string\",\"description\":\"Openstack username\"},\"password\":{\"type\":\"string\",\"description\":\"Openstack username's password\"},\"accountId\":{\"type\":\"string\",\"description\":\"Selectel account ID (INT)\"},\"projectId\":{\"type\":\"string\",\"description\":\"Cloud project ID (UUID)\"}},\"additional\":{\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"httpTimeout\":{\"type\":\"string\",\"description\":\"API request timeout\"},\"baseUrl\":{\"type\":\"string\",\"description\":\"API endpoint URL\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("username", "password", "accountId", "projectId")
var additionalFields = mapset.NewSet("ttl", "httpTimeout", "baseUrl", "pollingInterval", "propagationTimeout")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal selectelv2 JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add selectelv2 schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile selectelv2 schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("selectelv2: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *selectelv2.Config {
	return &selectelv2.Config{
		BaseURL:            env.GetOrDefaultString(EnvBaseURL, defaultBaseURL),
		TTL:                env.GetOrDefaultInt(EnvTTL, defaultTTL),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, defaultPropagationTimeout),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, defaultPollingInterval),
		HTTPClient: &http.Client{
			Timeout: env.GetOrDefaultSecond(EnvHTTPTimeout, defaultHTTPTimeout),
		},
	}
}

func NewDNSProvider(env lego.Env) (*selectelv2.DNSProvider, error) {
	values, err := env.Get(EnvUsernameOS, EnvPasswordOS, EnvAccount, EnvProjectID)
	if err != nil {
		return nil, fmt.Errorf("selectelv2: %w", err)
	}

	config := NewConfig(env)
	config.Username = values[EnvUsernameOS]
	config.Password = values[EnvPasswordOS]
	config.Account = values[EnvAccount]
	config.ProjectID = values[EnvProjectID]

	return selectelv2.NewDNSProviderConfig(config)
}
