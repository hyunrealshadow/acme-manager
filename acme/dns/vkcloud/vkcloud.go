// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/vkcloud
// License: MIT

package vkcloud

import (
	"acme-manager/acme/lego"
	"acme-manager/logger"
	"fmt"
	"strings"

	mapset "github.com/deckarep/golang-set/v2"
	"github.com/go-acme/lego/v4/challenge/dns01"
	"github.com/go-acme/lego/v4/providers/dns/vkcloud"
	"github.com/santhosh-tekuri/jsonschema/v6"
)

const (
	EnvDNSEndpoint          = "dnsEndpoint"
	EnvDomainName           = "domainName"
	EnvIdentityEndpoint     = "identityEndpoint"
	EnvPassword             = "password"
	EnvPollingInterval      = "pollingInterval"
	EnvProjectID            = "projectId"
	EnvPropagationTimeout   = "propagationTimeout"
	EnvTTL                  = "ttl"
	EnvUsername             = "username"
	defaultDNSEndpoint      = "https://mcs.mail.ru/public-dns/v2/dns"
	defaultDomainName       = "users"
	defaultIdentityEndpoint = "https://infra.mail.ru/identity/v3/"
)

const JsonSchema = "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"VK Cloud Configuration\",\"type\":\"object\",\"properties\":{\"credentials\":{\"projectId\":{\"type\":\"string\",\"description\":\"String ID of project in VK Cloud\"},\"username\":{\"type\":\"string\",\"description\":\"Email of VK Cloud account\"},\"password\":{\"type\":\"string\",\"description\":\"Password for VK Cloud account\"}},\"additional\":{\"identityEndpoint\":{\"type\":\"string\",\"description\":\"URL of OpenStack Auth API, Defaults to https://infra.mail.ru:35357/v3/ but can be changed for usage with private clouds\"},\"domainName\":{\"type\":\"string\",\"description\":\"Openstack users domain name. Defaults to `users` but can be changed for usage with private clouds\"},\"pollingInterval\":{\"type\":\"string\",\"description\":\"Time between DNS propagation check\"},\"propagationTimeout\":{\"type\":\"string\",\"description\":\"Maximum waiting time for DNS propagation\"},\"ttl\":{\"type\":\"string\",\"description\":\"The TTL of the TXT record used for the DNS challenge\"},\"dnsEndpoint\":{\"type\":\"string\",\"description\":\"URL of DNS API. Defaults to https://mcs.mail.ru/public-dns but can be changed for usage with private clouds\"}}}}"

var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet("projectId", "username", "password")
var additionalFields = mapset.NewSet("identityEndpoint", "domainName", "pollingInterval", "propagationTimeout", "ttl", "dnsEndpoint")

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal vkcloud JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add vkcloud schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile vkcloud schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("vkcloud: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

func NewConfig(env lego.Env) *vkcloud.Config {
	return &vkcloud.Config{
		TTL:                env.GetOrDefaultInt(EnvTTL, 60),
		PropagationTimeout: env.GetOrDefaultSecond(EnvPropagationTimeout, dns01.DefaultPropagationTimeout),
		PollingInterval:    env.GetOrDefaultSecond(EnvPollingInterval, dns01.DefaultPollingInterval),
	}
}

func NewDNSProvider(env lego.Env) (*vkcloud.DNSProvider, error) {
	values, err := env.Get(EnvProjectID, EnvUsername, EnvPassword)
	if err != nil {
		return nil, fmt.Errorf("vkcloud: %w", err)
	}

	config := NewConfig(env)
	config.ProjectID = values[EnvProjectID]
	config.Username = values[EnvUsername]
	config.Password = values[EnvPassword]
	config.IdentityEndpoint = env.GetOrDefaultString(EnvIdentityEndpoint, defaultIdentityEndpoint)
	config.DomainName = env.GetOrDefaultString(EnvDomainName, defaultDomainName)
	config.DNSEndpoint = env.GetOrDefaultString(EnvDNSEndpoint, defaultDNSEndpoint)

	return vkcloud.NewDNSProviderConfig(config)
}
