// Code generated by acme-manager, DO NOT EDIT.
// Code from https://github.com/go-acme/lego/tree/v4.19.2/providers/dns/{{.Name}}
// License: MIT

package {{.Name}}

import (
    "acme-manager/acme/lego"
	"github.com/santhosh-tekuri/jsonschema/v6"
    mapset "github.com/deckarep/golang-set/v2"
{{- range $value := .Imports}}
    {{$value}}
{{- end}}
    "{{.PkgPath}}"
)

const (
{{- range $key, $value := .EnvConstants}}
    {{$key}} = {{$value}}
{{- end}}
)

const JsonSchema = {{.JsonSchema}}
var compiledJsonSchema *jsonschema.Schema

var credentialsFields = mapset.NewSet({{join .CredentialsFields ", "}})
{{- if .AdditionalFields}}
var additionalFields = mapset.NewSet({{join .AdditionalFields ", "}})
{{- else}}
var additionalFields = mapset.NewSet[string]()
{{- end}}

func init() {
	schema, err := jsonschema.UnmarshalJSON(strings.NewReader(JsonSchema))
	if err != nil {
		logger.Fatalf("Failed to unmarshal {{.Name}} JSON schema: %v", err)
	}
	compiler := jsonschema.NewCompiler()
	if err := compiler.AddResource("schema.json", schema); err != nil {
		logger.Fatalf("Failed to add {{.Name}} schema resource to compiler: %v", err)
	}
	compiledJsonSchema, err = compiler.Compile("schema.json")
	if err != nil {
		logger.Fatalf("Failed to compile {{.Name}} schema: %v", err)
	}
}

func ParseConfig(conf *lego.DnsProviderConfig) (*lego.Env, error) {
	data := make(map[string]string)
	if conf.Credentials != nil {
		for key, value := range conf.Credentials {
			if credentialsFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Credentials, key)
			}
		}
	}
	if conf.Additional != nil {
		for key, value := range conf.Additional {
			if additionalFields.Contains(key) {
				data[key] = value
			} else {
				delete(conf.Additional, key)
			}
		}
	}

	anyData := make(map[string]any)
	for key, value := range data {
		anyData[key] = value
	}
	if err := compiledJsonSchema.Validate(anyData); err != nil {
		return nil, fmt.Errorf("{{.Name}}: configuration validation failed: %v", err)
	}

	env := lego.NewEnv(data)
	return &env, nil
}

{{.NewDefaultConfigFunc}}

{{.NewDNSProviderFunc}}
