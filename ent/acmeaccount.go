// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/schema/enum"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-acme/lego/v4/registration"
	"github.com/google/uuid"
)

// AcmeAccount is the model entity for the AcmeAccount schema.
type AcmeAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ACME server ID
	AcmeServerID uuid.UUID `json:"acme_server_id,omitempty"`
	// Name of the ACME account
	Name string `json:"name,omitempty"`
	// Description of the ACME account
	Description *string `json:"description,omitempty"`
	// Email address associated with the ACME account
	Email string `json:"email,omitempty"`
	// Type of private key associated with the ACME account
	KeyType enum.KeyType `json:"key_type,omitempty"`
	// Private key associated with the ACME account
	PrivateKey string `json:"private_key,omitempty"`
	// Fingerprint of the private key associated with the ACME account
	KeyFingerprint string `json:"key_fingerprint,omitempty"`
	// Registration information associated with the ACME account
	Registration registration.Resource `json:"registration,omitempty"`
	// External Account Binding (EAB) key ID
	EabKeyID *string `json:"eab_key_id,omitempty"`
	// External Account Binding (EAB) HMAC key
	EabHmacKey *string `json:"eab_hmac_key,omitempty"`
	// Time the ACME account was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// User that created the ACME account
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Time the ACME account was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// User that updated the ACME account
	UpdatedBy *uuid.UUID `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AcmeAccountQuery when eager-loading is set.
	Edges        AcmeAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AcmeAccountEdges holds the relations/edges for other nodes in the graph.
type AcmeAccountEdges struct {
	// Certificates holds the value of the certificates edge.
	Certificates []*Certificate `json:"certificates,omitempty"`
	// ACME server associated with the ACME account
	AcmeServer *AcmeServer `json:"acme_server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCertificates map[string][]*Certificate
}

// CertificatesOrErr returns the Certificates value or an error if the edge
// was not loaded in eager-loading.
func (e AcmeAccountEdges) CertificatesOrErr() ([]*Certificate, error) {
	if e.loadedTypes[0] {
		return e.Certificates, nil
	}
	return nil, &NotLoadedError{edge: "certificates"}
}

// AcmeServerOrErr returns the AcmeServer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AcmeAccountEdges) AcmeServerOrErr() (*AcmeServer, error) {
	if e.AcmeServer != nil {
		return e.AcmeServer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: acmeserver.Label}
	}
	return nil, &NotLoadedError{edge: "acme_server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AcmeAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case acmeaccount.FieldUpdatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case acmeaccount.FieldRegistration:
			values[i] = new([]byte)
		case acmeaccount.FieldName, acmeaccount.FieldDescription, acmeaccount.FieldEmail, acmeaccount.FieldKeyType, acmeaccount.FieldPrivateKey, acmeaccount.FieldKeyFingerprint, acmeaccount.FieldEabKeyID, acmeaccount.FieldEabHmacKey:
			values[i] = new(sql.NullString)
		case acmeaccount.FieldCreatedAt, acmeaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case acmeaccount.FieldID, acmeaccount.FieldAcmeServerID, acmeaccount.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AcmeAccount fields.
func (aa *AcmeAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case acmeaccount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aa.ID = *value
			}
		case acmeaccount.FieldAcmeServerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field acme_server_id", values[i])
			} else if value != nil {
				aa.AcmeServerID = *value
			}
		case acmeaccount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				aa.Name = value.String
			}
		case acmeaccount.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				aa.Description = new(string)
				*aa.Description = value.String
			}
		case acmeaccount.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				aa.Email = value.String
			}
		case acmeaccount.FieldKeyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_type", values[i])
			} else if value.Valid {
				aa.KeyType = enum.KeyType(value.String)
			}
		case acmeaccount.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				aa.PrivateKey = value.String
			}
		case acmeaccount.FieldKeyFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_fingerprint", values[i])
			} else if value.Valid {
				aa.KeyFingerprint = value.String
			}
		case acmeaccount.FieldRegistration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field registration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aa.Registration); err != nil {
					return fmt.Errorf("unmarshal field registration: %w", err)
				}
			}
		case acmeaccount.FieldEabKeyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eab_key_id", values[i])
			} else if value.Valid {
				aa.EabKeyID = new(string)
				*aa.EabKeyID = value.String
			}
		case acmeaccount.FieldEabHmacKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eab_hmac_key", values[i])
			} else if value.Valid {
				aa.EabHmacKey = new(string)
				*aa.EabHmacKey = value.String
			}
		case acmeaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case acmeaccount.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				aa.CreatedBy = *value
			}
		case acmeaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = new(time.Time)
				*aa.UpdatedAt = value.Time
			}
		case acmeaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				aa.UpdatedBy = new(uuid.UUID)
				*aa.UpdatedBy = *value.S.(*uuid.UUID)
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AcmeAccount.
// This includes values selected through modifiers, order, etc.
func (aa *AcmeAccount) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// QueryCertificates queries the "certificates" edge of the AcmeAccount entity.
func (aa *AcmeAccount) QueryCertificates() *CertificateQuery {
	return NewAcmeAccountClient(aa.config).QueryCertificates(aa)
}

// QueryAcmeServer queries the "acme_server" edge of the AcmeAccount entity.
func (aa *AcmeAccount) QueryAcmeServer() *AcmeServerQuery {
	return NewAcmeAccountClient(aa.config).QueryAcmeServer(aa)
}

// Update returns a builder for updating this AcmeAccount.
// Note that you need to call AcmeAccount.Unwrap() before calling this method if this AcmeAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AcmeAccount) Update() *AcmeAccountUpdateOne {
	return NewAcmeAccountClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AcmeAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AcmeAccount) Unwrap() *AcmeAccount {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AcmeAccount is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AcmeAccount) String() string {
	var builder strings.Builder
	builder.WriteString("AcmeAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("acme_server_id=")
	builder.WriteString(fmt.Sprintf("%v", aa.AcmeServerID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(aa.Name)
	builder.WriteString(", ")
	if v := aa.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(aa.Email)
	builder.WriteString(", ")
	builder.WriteString("key_type=")
	builder.WriteString(fmt.Sprintf("%v", aa.KeyType))
	builder.WriteString(", ")
	builder.WriteString("private_key=")
	builder.WriteString(aa.PrivateKey)
	builder.WriteString(", ")
	builder.WriteString("key_fingerprint=")
	builder.WriteString(aa.KeyFingerprint)
	builder.WriteString(", ")
	builder.WriteString("registration=")
	builder.WriteString(fmt.Sprintf("%v", aa.Registration))
	builder.WriteString(", ")
	if v := aa.EabKeyID; v != nil {
		builder.WriteString("eab_key_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := aa.EabHmacKey; v != nil {
		builder.WriteString("eab_hmac_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", aa.CreatedBy))
	builder.WriteString(", ")
	if v := aa.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := aa.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertificates returns the Certificates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (aa *AcmeAccount) NamedCertificates(name string) ([]*Certificate, error) {
	if aa.Edges.namedCertificates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := aa.Edges.namedCertificates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (aa *AcmeAccount) appendNamedCertificates(name string, edges ...*Certificate) {
	if aa.Edges.namedCertificates == nil {
		aa.Edges.namedCertificates = make(map[string][]*Certificate)
	}
	if len(edges) == 0 {
		aa.Edges.namedCertificates[name] = []*Certificate{}
	} else {
		aa.Edges.namedCertificates[name] = append(aa.Edges.namedCertificates[name], edges...)
	}
}

// AcmeAccounts is a parsable slice of AcmeAccount.
type AcmeAccounts []*AcmeAccount
