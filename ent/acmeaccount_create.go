// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/certificate"
	"acme-manager/ent/schema/enum"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-acme/lego/v4/registration"
	"github.com/google/uuid"
)

// AcmeAccountCreate is the builder for creating a AcmeAccount entity.
type AcmeAccountCreate struct {
	config
	mutation *AcmeAccountMutation
	hooks    []Hook
}

// SetAcmeServerID sets the "acme_server_id" field.
func (aac *AcmeAccountCreate) SetAcmeServerID(u uuid.UUID) *AcmeAccountCreate {
	aac.mutation.SetAcmeServerID(u)
	return aac
}

// SetName sets the "name" field.
func (aac *AcmeAccountCreate) SetName(s string) *AcmeAccountCreate {
	aac.mutation.SetName(s)
	return aac
}

// SetDescription sets the "description" field.
func (aac *AcmeAccountCreate) SetDescription(s string) *AcmeAccountCreate {
	aac.mutation.SetDescription(s)
	return aac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableDescription(s *string) *AcmeAccountCreate {
	if s != nil {
		aac.SetDescription(*s)
	}
	return aac
}

// SetEmail sets the "email" field.
func (aac *AcmeAccountCreate) SetEmail(s string) *AcmeAccountCreate {
	aac.mutation.SetEmail(s)
	return aac
}

// SetKeyType sets the "key_type" field.
func (aac *AcmeAccountCreate) SetKeyType(et enum.KeyType) *AcmeAccountCreate {
	aac.mutation.SetKeyType(et)
	return aac
}

// SetPrivateKey sets the "private_key" field.
func (aac *AcmeAccountCreate) SetPrivateKey(s string) *AcmeAccountCreate {
	aac.mutation.SetPrivateKey(s)
	return aac
}

// SetKeyFingerprint sets the "key_fingerprint" field.
func (aac *AcmeAccountCreate) SetKeyFingerprint(s string) *AcmeAccountCreate {
	aac.mutation.SetKeyFingerprint(s)
	return aac
}

// SetRegistration sets the "registration" field.
func (aac *AcmeAccountCreate) SetRegistration(r registration.Resource) *AcmeAccountCreate {
	aac.mutation.SetRegistration(r)
	return aac
}

// SetEabKeyID sets the "eab_key_id" field.
func (aac *AcmeAccountCreate) SetEabKeyID(s string) *AcmeAccountCreate {
	aac.mutation.SetEabKeyID(s)
	return aac
}

// SetNillableEabKeyID sets the "eab_key_id" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableEabKeyID(s *string) *AcmeAccountCreate {
	if s != nil {
		aac.SetEabKeyID(*s)
	}
	return aac
}

// SetEabHmacKey sets the "eab_hmac_key" field.
func (aac *AcmeAccountCreate) SetEabHmacKey(s string) *AcmeAccountCreate {
	aac.mutation.SetEabHmacKey(s)
	return aac
}

// SetNillableEabHmacKey sets the "eab_hmac_key" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableEabHmacKey(s *string) *AcmeAccountCreate {
	if s != nil {
		aac.SetEabHmacKey(*s)
	}
	return aac
}

// SetCreatedAt sets the "created_at" field.
func (aac *AcmeAccountCreate) SetCreatedAt(t time.Time) *AcmeAccountCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableCreatedAt(t *time.Time) *AcmeAccountCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetCreatedBy sets the "created_by" field.
func (aac *AcmeAccountCreate) SetCreatedBy(u uuid.UUID) *AcmeAccountCreate {
	aac.mutation.SetCreatedBy(u)
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AcmeAccountCreate) SetUpdatedAt(t time.Time) *AcmeAccountCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableUpdatedAt(t *time.Time) *AcmeAccountCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetUpdatedBy sets the "updated_by" field.
func (aac *AcmeAccountCreate) SetUpdatedBy(u uuid.UUID) *AcmeAccountCreate {
	aac.mutation.SetUpdatedBy(u)
	return aac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableUpdatedBy(u *uuid.UUID) *AcmeAccountCreate {
	if u != nil {
		aac.SetUpdatedBy(*u)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *AcmeAccountCreate) SetID(u uuid.UUID) *AcmeAccountCreate {
	aac.mutation.SetID(u)
	return aac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aac *AcmeAccountCreate) SetNillableID(u *uuid.UUID) *AcmeAccountCreate {
	if u != nil {
		aac.SetID(*u)
	}
	return aac
}

// AddCertificateIDs adds the "certificates" edge to the Certificate entity by IDs.
func (aac *AcmeAccountCreate) AddCertificateIDs(ids ...uuid.UUID) *AcmeAccountCreate {
	aac.mutation.AddCertificateIDs(ids...)
	return aac
}

// AddCertificates adds the "certificates" edges to the Certificate entity.
func (aac *AcmeAccountCreate) AddCertificates(c ...*Certificate) *AcmeAccountCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aac.AddCertificateIDs(ids...)
}

// SetAcmeServer sets the "acme_server" edge to the AcmeServer entity.
func (aac *AcmeAccountCreate) SetAcmeServer(a *AcmeServer) *AcmeAccountCreate {
	return aac.SetAcmeServerID(a.ID)
}

// Mutation returns the AcmeAccountMutation object of the builder.
func (aac *AcmeAccountCreate) Mutation() *AcmeAccountMutation {
	return aac.mutation
}

// Save creates the AcmeAccount in the database.
func (aac *AcmeAccountCreate) Save(ctx context.Context) (*AcmeAccount, error) {
	aac.defaults()
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AcmeAccountCreate) SaveX(ctx context.Context) *AcmeAccount {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AcmeAccountCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AcmeAccountCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AcmeAccountCreate) defaults() {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		v := acmeaccount.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.ID(); !ok {
		v := acmeaccount.DefaultID()
		aac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AcmeAccountCreate) check() error {
	if _, ok := aac.mutation.AcmeServerID(); !ok {
		return &ValidationError{Name: "acme_server_id", err: errors.New(`ent: missing required field "AcmeAccount.acme_server_id"`)}
	}
	if _, ok := aac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AcmeAccount.name"`)}
	}
	if v, ok := aac.mutation.Name(); ok {
		if err := acmeaccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.name": %w`, err)}
		}
	}
	if v, ok := aac.mutation.Description(); ok {
		if err := acmeaccount.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.description": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "AcmeAccount.email"`)}
	}
	if v, ok := aac.mutation.Email(); ok {
		if err := acmeaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.email": %w`, err)}
		}
	}
	if _, ok := aac.mutation.KeyType(); !ok {
		return &ValidationError{Name: "key_type", err: errors.New(`ent: missing required field "AcmeAccount.key_type"`)}
	}
	if v, ok := aac.mutation.KeyType(); ok {
		if err := acmeaccount.KeyTypeValidator(v); err != nil {
			return &ValidationError{Name: "key_type", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.key_type": %w`, err)}
		}
	}
	if _, ok := aac.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "private_key", err: errors.New(`ent: missing required field "AcmeAccount.private_key"`)}
	}
	if _, ok := aac.mutation.KeyFingerprint(); !ok {
		return &ValidationError{Name: "key_fingerprint", err: errors.New(`ent: missing required field "AcmeAccount.key_fingerprint"`)}
	}
	if v, ok := aac.mutation.KeyFingerprint(); ok {
		if err := acmeaccount.KeyFingerprintValidator(v); err != nil {
			return &ValidationError{Name: "key_fingerprint", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.key_fingerprint": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Registration(); !ok {
		return &ValidationError{Name: "registration", err: errors.New(`ent: missing required field "AcmeAccount.registration"`)}
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AcmeAccount.created_at"`)}
	}
	if _, ok := aac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AcmeAccount.created_by"`)}
	}
	if len(aac.mutation.AcmeServerIDs()) == 0 {
		return &ValidationError{Name: "acme_server", err: errors.New(`ent: missing required edge "AcmeAccount.acme_server"`)}
	}
	return nil
}

func (aac *AcmeAccountCreate) sqlSave(ctx context.Context) (*AcmeAccount, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AcmeAccountCreate) createSpec() (*AcmeAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &AcmeAccount{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(acmeaccount.Table, sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID))
	)
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aac.mutation.Name(); ok {
		_spec.SetField(acmeaccount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := aac.mutation.Description(); ok {
		_spec.SetField(acmeaccount.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := aac.mutation.Email(); ok {
		_spec.SetField(acmeaccount.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := aac.mutation.KeyType(); ok {
		_spec.SetField(acmeaccount.FieldKeyType, field.TypeEnum, value)
		_node.KeyType = value
	}
	if value, ok := aac.mutation.PrivateKey(); ok {
		_spec.SetField(acmeaccount.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if value, ok := aac.mutation.KeyFingerprint(); ok {
		_spec.SetField(acmeaccount.FieldKeyFingerprint, field.TypeString, value)
		_node.KeyFingerprint = value
	}
	if value, ok := aac.mutation.Registration(); ok {
		_spec.SetField(acmeaccount.FieldRegistration, field.TypeJSON, value)
		_node.Registration = value
	}
	if value, ok := aac.mutation.EabKeyID(); ok {
		_spec.SetField(acmeaccount.FieldEabKeyID, field.TypeString, value)
		_node.EabKeyID = &value
	}
	if value, ok := aac.mutation.EabHmacKey(); ok {
		_spec.SetField(acmeaccount.FieldEabHmacKey, field.TypeString, value)
		_node.EabHmacKey = &value
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(acmeaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.CreatedBy(); ok {
		_spec.SetField(acmeaccount.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(acmeaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := aac.mutation.UpdatedBy(); ok {
		_spec.SetField(acmeaccount.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if nodes := aac.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aac.mutation.AcmeServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   acmeaccount.AcmeServerTable,
			Columns: []string{acmeaccount.AcmeServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AcmeServerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AcmeAccountCreateBulk is the builder for creating many AcmeAccount entities in bulk.
type AcmeAccountCreateBulk struct {
	config
	err      error
	builders []*AcmeAccountCreate
}

// Save creates the AcmeAccount entities in the database.
func (aacb *AcmeAccountCreateBulk) Save(ctx context.Context) ([]*AcmeAccount, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AcmeAccount, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AcmeAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AcmeAccountCreateBulk) SaveX(ctx context.Context) []*AcmeAccount {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AcmeAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AcmeAccountCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
