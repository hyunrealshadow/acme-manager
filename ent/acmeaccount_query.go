// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/certificate"
	"acme-manager/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AcmeAccountQuery is the builder for querying AcmeAccount entities.
type AcmeAccountQuery struct {
	config
	ctx                   *QueryContext
	order                 []acmeaccount.OrderOption
	inters                []Interceptor
	predicates            []predicate.AcmeAccount
	withCertificates      *CertificateQuery
	withAcmeServer        *AcmeServerQuery
	modifiers             []func(*sql.Selector)
	loadTotal             []func(context.Context, []*AcmeAccount) error
	withNamedCertificates map[string]*CertificateQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AcmeAccountQuery builder.
func (aaq *AcmeAccountQuery) Where(ps ...predicate.AcmeAccount) *AcmeAccountQuery {
	aaq.predicates = append(aaq.predicates, ps...)
	return aaq
}

// Limit the number of records to be returned by this query.
func (aaq *AcmeAccountQuery) Limit(limit int) *AcmeAccountQuery {
	aaq.ctx.Limit = &limit
	return aaq
}

// Offset to start from.
func (aaq *AcmeAccountQuery) Offset(offset int) *AcmeAccountQuery {
	aaq.ctx.Offset = &offset
	return aaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aaq *AcmeAccountQuery) Unique(unique bool) *AcmeAccountQuery {
	aaq.ctx.Unique = &unique
	return aaq
}

// Order specifies how the records should be ordered.
func (aaq *AcmeAccountQuery) Order(o ...acmeaccount.OrderOption) *AcmeAccountQuery {
	aaq.order = append(aaq.order, o...)
	return aaq
}

// QueryCertificates chains the current query on the "certificates" edge.
func (aaq *AcmeAccountQuery) QueryCertificates() *CertificateQuery {
	query := (&CertificateClient{config: aaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(acmeaccount.Table, acmeaccount.FieldID, selector),
			sqlgraph.To(certificate.Table, certificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, acmeaccount.CertificatesTable, acmeaccount.CertificatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAcmeServer chains the current query on the "acme_server" edge.
func (aaq *AcmeAccountQuery) QueryAcmeServer() *AcmeServerQuery {
	query := (&AcmeServerClient{config: aaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(acmeaccount.Table, acmeaccount.FieldID, selector),
			sqlgraph.To(acmeserver.Table, acmeserver.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, acmeaccount.AcmeServerTable, acmeaccount.AcmeServerColumn),
		)
		fromU = sqlgraph.SetNeighbors(aaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AcmeAccount entity from the query.
// Returns a *NotFoundError when no AcmeAccount was found.
func (aaq *AcmeAccountQuery) First(ctx context.Context) (*AcmeAccount, error) {
	nodes, err := aaq.Limit(1).All(setContextOp(ctx, aaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{acmeaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aaq *AcmeAccountQuery) FirstX(ctx context.Context) *AcmeAccount {
	node, err := aaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AcmeAccount ID from the query.
// Returns a *NotFoundError when no AcmeAccount ID was found.
func (aaq *AcmeAccountQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = aaq.Limit(1).IDs(setContextOp(ctx, aaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{acmeaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aaq *AcmeAccountQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := aaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AcmeAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AcmeAccount entity is found.
// Returns a *NotFoundError when no AcmeAccount entities are found.
func (aaq *AcmeAccountQuery) Only(ctx context.Context) (*AcmeAccount, error) {
	nodes, err := aaq.Limit(2).All(setContextOp(ctx, aaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{acmeaccount.Label}
	default:
		return nil, &NotSingularError{acmeaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aaq *AcmeAccountQuery) OnlyX(ctx context.Context) *AcmeAccount {
	node, err := aaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AcmeAccount ID in the query.
// Returns a *NotSingularError when more than one AcmeAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (aaq *AcmeAccountQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = aaq.Limit(2).IDs(setContextOp(ctx, aaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{acmeaccount.Label}
	default:
		err = &NotSingularError{acmeaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aaq *AcmeAccountQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := aaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AcmeAccounts.
func (aaq *AcmeAccountQuery) All(ctx context.Context) ([]*AcmeAccount, error) {
	ctx = setContextOp(ctx, aaq.ctx, ent.OpQueryAll)
	if err := aaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AcmeAccount, *AcmeAccountQuery]()
	return withInterceptors[[]*AcmeAccount](ctx, aaq, qr, aaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aaq *AcmeAccountQuery) AllX(ctx context.Context) []*AcmeAccount {
	nodes, err := aaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AcmeAccount IDs.
func (aaq *AcmeAccountQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if aaq.ctx.Unique == nil && aaq.path != nil {
		aaq.Unique(true)
	}
	ctx = setContextOp(ctx, aaq.ctx, ent.OpQueryIDs)
	if err = aaq.Select(acmeaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aaq *AcmeAccountQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := aaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aaq *AcmeAccountQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aaq.ctx, ent.OpQueryCount)
	if err := aaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aaq, querierCount[*AcmeAccountQuery](), aaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aaq *AcmeAccountQuery) CountX(ctx context.Context) int {
	count, err := aaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aaq *AcmeAccountQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aaq.ctx, ent.OpQueryExist)
	switch _, err := aaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aaq *AcmeAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := aaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AcmeAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aaq *AcmeAccountQuery) Clone() *AcmeAccountQuery {
	if aaq == nil {
		return nil
	}
	return &AcmeAccountQuery{
		config:           aaq.config,
		ctx:              aaq.ctx.Clone(),
		order:            append([]acmeaccount.OrderOption{}, aaq.order...),
		inters:           append([]Interceptor{}, aaq.inters...),
		predicates:       append([]predicate.AcmeAccount{}, aaq.predicates...),
		withCertificates: aaq.withCertificates.Clone(),
		withAcmeServer:   aaq.withAcmeServer.Clone(),
		// clone intermediate query.
		sql:  aaq.sql.Clone(),
		path: aaq.path,
	}
}

// WithCertificates tells the query-builder to eager-load the nodes that are connected to
// the "certificates" edge. The optional arguments are used to configure the query builder of the edge.
func (aaq *AcmeAccountQuery) WithCertificates(opts ...func(*CertificateQuery)) *AcmeAccountQuery {
	query := (&CertificateClient{config: aaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aaq.withCertificates = query
	return aaq
}

// WithAcmeServer tells the query-builder to eager-load the nodes that are connected to
// the "acme_server" edge. The optional arguments are used to configure the query builder of the edge.
func (aaq *AcmeAccountQuery) WithAcmeServer(opts ...func(*AcmeServerQuery)) *AcmeAccountQuery {
	query := (&AcmeServerClient{config: aaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aaq.withAcmeServer = query
	return aaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AcmeServerID uuid.UUID `json:"acme_server_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AcmeAccount.Query().
//		GroupBy(acmeaccount.FieldAcmeServerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aaq *AcmeAccountQuery) GroupBy(field string, fields ...string) *AcmeAccountGroupBy {
	aaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AcmeAccountGroupBy{build: aaq}
	grbuild.flds = &aaq.ctx.Fields
	grbuild.label = acmeaccount.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AcmeServerID uuid.UUID `json:"acme_server_id,omitempty"`
//	}
//
//	client.AcmeAccount.Query().
//		Select(acmeaccount.FieldAcmeServerID).
//		Scan(ctx, &v)
func (aaq *AcmeAccountQuery) Select(fields ...string) *AcmeAccountSelect {
	aaq.ctx.Fields = append(aaq.ctx.Fields, fields...)
	sbuild := &AcmeAccountSelect{AcmeAccountQuery: aaq}
	sbuild.label = acmeaccount.Label
	sbuild.flds, sbuild.scan = &aaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AcmeAccountSelect configured with the given aggregations.
func (aaq *AcmeAccountQuery) Aggregate(fns ...AggregateFunc) *AcmeAccountSelect {
	return aaq.Select().Aggregate(fns...)
}

func (aaq *AcmeAccountQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aaq); err != nil {
				return err
			}
		}
	}
	for _, f := range aaq.ctx.Fields {
		if !acmeaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aaq.path != nil {
		prev, err := aaq.path(ctx)
		if err != nil {
			return err
		}
		aaq.sql = prev
	}
	return nil
}

func (aaq *AcmeAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AcmeAccount, error) {
	var (
		nodes       = []*AcmeAccount{}
		_spec       = aaq.querySpec()
		loadedTypes = [2]bool{
			aaq.withCertificates != nil,
			aaq.withAcmeServer != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AcmeAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AcmeAccount{config: aaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aaq.modifiers) > 0 {
		_spec.Modifiers = aaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aaq.withCertificates; query != nil {
		if err := aaq.loadCertificates(ctx, query, nodes,
			func(n *AcmeAccount) { n.Edges.Certificates = []*Certificate{} },
			func(n *AcmeAccount, e *Certificate) { n.Edges.Certificates = append(n.Edges.Certificates, e) }); err != nil {
			return nil, err
		}
	}
	if query := aaq.withAcmeServer; query != nil {
		if err := aaq.loadAcmeServer(ctx, query, nodes, nil,
			func(n *AcmeAccount, e *AcmeServer) { n.Edges.AcmeServer = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range aaq.withNamedCertificates {
		if err := aaq.loadCertificates(ctx, query, nodes,
			func(n *AcmeAccount) { n.appendNamedCertificates(name) },
			func(n *AcmeAccount, e *Certificate) { n.appendNamedCertificates(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range aaq.loadTotal {
		if err := aaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aaq *AcmeAccountQuery) loadCertificates(ctx context.Context, query *CertificateQuery, nodes []*AcmeAccount, init func(*AcmeAccount), assign func(*AcmeAccount, *Certificate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*AcmeAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(certificate.FieldAcmeAccountID)
	}
	query.Where(predicate.Certificate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(acmeaccount.CertificatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AcmeAccountID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "acme_account_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aaq *AcmeAccountQuery) loadAcmeServer(ctx context.Context, query *AcmeServerQuery, nodes []*AcmeAccount, init func(*AcmeAccount), assign func(*AcmeAccount, *AcmeServer)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AcmeAccount)
	for i := range nodes {
		fk := nodes[i].AcmeServerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(acmeserver.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "acme_server_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aaq *AcmeAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aaq.querySpec()
	if len(aaq.modifiers) > 0 {
		_spec.Modifiers = aaq.modifiers
	}
	_spec.Node.Columns = aaq.ctx.Fields
	if len(aaq.ctx.Fields) > 0 {
		_spec.Unique = aaq.ctx.Unique != nil && *aaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aaq.driver, _spec)
}

func (aaq *AcmeAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(acmeaccount.Table, acmeaccount.Columns, sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID))
	_spec.From = aaq.sql
	if unique := aaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aaq.path != nil {
		_spec.Unique = true
	}
	if fields := aaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, acmeaccount.FieldID)
		for i := range fields {
			if fields[i] != acmeaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aaq.withAcmeServer != nil {
			_spec.Node.AddColumnOnce(acmeaccount.FieldAcmeServerID)
		}
	}
	if ps := aaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aaq *AcmeAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aaq.driver.Dialect())
	t1 := builder.Table(acmeaccount.Table)
	columns := aaq.ctx.Fields
	if len(columns) == 0 {
		columns = acmeaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aaq.sql != nil {
		selector = aaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aaq.ctx.Unique != nil && *aaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aaq.predicates {
		p(selector)
	}
	for _, p := range aaq.order {
		p(selector)
	}
	if offset := aaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCertificates tells the query-builder to eager-load the nodes that are connected to the "certificates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aaq *AcmeAccountQuery) WithNamedCertificates(name string, opts ...func(*CertificateQuery)) *AcmeAccountQuery {
	query := (&CertificateClient{config: aaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aaq.withNamedCertificates == nil {
		aaq.withNamedCertificates = make(map[string]*CertificateQuery)
	}
	aaq.withNamedCertificates[name] = query
	return aaq
}

// AcmeAccountGroupBy is the group-by builder for AcmeAccount entities.
type AcmeAccountGroupBy struct {
	selector
	build *AcmeAccountQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aagb *AcmeAccountGroupBy) Aggregate(fns ...AggregateFunc) *AcmeAccountGroupBy {
	aagb.fns = append(aagb.fns, fns...)
	return aagb
}

// Scan applies the selector query and scans the result into the given value.
func (aagb *AcmeAccountGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aagb.build.ctx, ent.OpQueryGroupBy)
	if err := aagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AcmeAccountQuery, *AcmeAccountGroupBy](ctx, aagb.build, aagb, aagb.build.inters, v)
}

func (aagb *AcmeAccountGroupBy) sqlScan(ctx context.Context, root *AcmeAccountQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(aagb.fns))
	for _, fn := range aagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*aagb.flds)+len(aagb.fns))
		for _, f := range *aagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*aagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AcmeAccountSelect is the builder for selecting fields of AcmeAccount entities.
type AcmeAccountSelect struct {
	*AcmeAccountQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aas *AcmeAccountSelect) Aggregate(fns ...AggregateFunc) *AcmeAccountSelect {
	aas.fns = append(aas.fns, fns...)
	return aas
}

// Scan applies the selector query and scans the result into the given value.
func (aas *AcmeAccountSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aas.ctx, ent.OpQuerySelect)
	if err := aas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AcmeAccountQuery, *AcmeAccountSelect](ctx, aas.AcmeAccountQuery, aas, aas.inters, v)
}

func (aas *AcmeAccountSelect) sqlScan(ctx context.Context, root *AcmeAccountQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aas.fns))
	for _, fn := range aas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
