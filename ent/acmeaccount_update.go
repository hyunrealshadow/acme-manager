// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/certificate"
	"acme-manager/ent/predicate"
	"acme-manager/ent/schema/enum"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-acme/lego/v4/registration"
	"github.com/google/uuid"
)

// AcmeAccountUpdate is the builder for updating AcmeAccount entities.
type AcmeAccountUpdate struct {
	config
	hooks    []Hook
	mutation *AcmeAccountMutation
}

// Where appends a list predicates to the AcmeAccountUpdate builder.
func (aau *AcmeAccountUpdate) Where(ps ...predicate.AcmeAccount) *AcmeAccountUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetAcmeServerID sets the "acme_server_id" field.
func (aau *AcmeAccountUpdate) SetAcmeServerID(u uuid.UUID) *AcmeAccountUpdate {
	aau.mutation.SetAcmeServerID(u)
	return aau
}

// SetNillableAcmeServerID sets the "acme_server_id" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableAcmeServerID(u *uuid.UUID) *AcmeAccountUpdate {
	if u != nil {
		aau.SetAcmeServerID(*u)
	}
	return aau
}

// SetName sets the "name" field.
func (aau *AcmeAccountUpdate) SetName(s string) *AcmeAccountUpdate {
	aau.mutation.SetName(s)
	return aau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableName(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetName(*s)
	}
	return aau
}

// SetDescription sets the "description" field.
func (aau *AcmeAccountUpdate) SetDescription(s string) *AcmeAccountUpdate {
	aau.mutation.SetDescription(s)
	return aau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableDescription(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetDescription(*s)
	}
	return aau
}

// ClearDescription clears the value of the "description" field.
func (aau *AcmeAccountUpdate) ClearDescription() *AcmeAccountUpdate {
	aau.mutation.ClearDescription()
	return aau
}

// SetEmail sets the "email" field.
func (aau *AcmeAccountUpdate) SetEmail(s string) *AcmeAccountUpdate {
	aau.mutation.SetEmail(s)
	return aau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableEmail(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetEmail(*s)
	}
	return aau
}

// SetKeyType sets the "key_type" field.
func (aau *AcmeAccountUpdate) SetKeyType(et enum.KeyType) *AcmeAccountUpdate {
	aau.mutation.SetKeyType(et)
	return aau
}

// SetNillableKeyType sets the "key_type" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableKeyType(et *enum.KeyType) *AcmeAccountUpdate {
	if et != nil {
		aau.SetKeyType(*et)
	}
	return aau
}

// SetPrivateKey sets the "private_key" field.
func (aau *AcmeAccountUpdate) SetPrivateKey(s string) *AcmeAccountUpdate {
	aau.mutation.SetPrivateKey(s)
	return aau
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillablePrivateKey(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetPrivateKey(*s)
	}
	return aau
}

// SetKeyFingerprint sets the "key_fingerprint" field.
func (aau *AcmeAccountUpdate) SetKeyFingerprint(s string) *AcmeAccountUpdate {
	aau.mutation.SetKeyFingerprint(s)
	return aau
}

// SetNillableKeyFingerprint sets the "key_fingerprint" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableKeyFingerprint(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetKeyFingerprint(*s)
	}
	return aau
}

// SetRegistration sets the "registration" field.
func (aau *AcmeAccountUpdate) SetRegistration(r registration.Resource) *AcmeAccountUpdate {
	aau.mutation.SetRegistration(r)
	return aau
}

// SetNillableRegistration sets the "registration" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableRegistration(r *registration.Resource) *AcmeAccountUpdate {
	if r != nil {
		aau.SetRegistration(*r)
	}
	return aau
}

// SetEabKeyID sets the "eab_key_id" field.
func (aau *AcmeAccountUpdate) SetEabKeyID(s string) *AcmeAccountUpdate {
	aau.mutation.SetEabKeyID(s)
	return aau
}

// SetNillableEabKeyID sets the "eab_key_id" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableEabKeyID(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetEabKeyID(*s)
	}
	return aau
}

// ClearEabKeyID clears the value of the "eab_key_id" field.
func (aau *AcmeAccountUpdate) ClearEabKeyID() *AcmeAccountUpdate {
	aau.mutation.ClearEabKeyID()
	return aau
}

// SetEabHmacKey sets the "eab_hmac_key" field.
func (aau *AcmeAccountUpdate) SetEabHmacKey(s string) *AcmeAccountUpdate {
	aau.mutation.SetEabHmacKey(s)
	return aau
}

// SetNillableEabHmacKey sets the "eab_hmac_key" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableEabHmacKey(s *string) *AcmeAccountUpdate {
	if s != nil {
		aau.SetEabHmacKey(*s)
	}
	return aau
}

// ClearEabHmacKey clears the value of the "eab_hmac_key" field.
func (aau *AcmeAccountUpdate) ClearEabHmacKey() *AcmeAccountUpdate {
	aau.mutation.ClearEabHmacKey()
	return aau
}

// SetCreatedBy sets the "created_by" field.
func (aau *AcmeAccountUpdate) SetCreatedBy(u uuid.UUID) *AcmeAccountUpdate {
	aau.mutation.SetCreatedBy(u)
	return aau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableCreatedBy(u *uuid.UUID) *AcmeAccountUpdate {
	if u != nil {
		aau.SetCreatedBy(*u)
	}
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AcmeAccountUpdate) SetUpdatedAt(t time.Time) *AcmeAccountUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableUpdatedAt(t *time.Time) *AcmeAccountUpdate {
	if t != nil {
		aau.SetUpdatedAt(*t)
	}
	return aau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aau *AcmeAccountUpdate) ClearUpdatedAt() *AcmeAccountUpdate {
	aau.mutation.ClearUpdatedAt()
	return aau
}

// SetUpdatedBy sets the "updated_by" field.
func (aau *AcmeAccountUpdate) SetUpdatedBy(u uuid.UUID) *AcmeAccountUpdate {
	aau.mutation.SetUpdatedBy(u)
	return aau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aau *AcmeAccountUpdate) SetNillableUpdatedBy(u *uuid.UUID) *AcmeAccountUpdate {
	if u != nil {
		aau.SetUpdatedBy(*u)
	}
	return aau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aau *AcmeAccountUpdate) ClearUpdatedBy() *AcmeAccountUpdate {
	aau.mutation.ClearUpdatedBy()
	return aau
}

// AddCertificateIDs adds the "certificates" edge to the Certificate entity by IDs.
func (aau *AcmeAccountUpdate) AddCertificateIDs(ids ...uuid.UUID) *AcmeAccountUpdate {
	aau.mutation.AddCertificateIDs(ids...)
	return aau
}

// AddCertificates adds the "certificates" edges to the Certificate entity.
func (aau *AcmeAccountUpdate) AddCertificates(c ...*Certificate) *AcmeAccountUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aau.AddCertificateIDs(ids...)
}

// SetAcmeServer sets the "acme_server" edge to the AcmeServer entity.
func (aau *AcmeAccountUpdate) SetAcmeServer(a *AcmeServer) *AcmeAccountUpdate {
	return aau.SetAcmeServerID(a.ID)
}

// Mutation returns the AcmeAccountMutation object of the builder.
func (aau *AcmeAccountUpdate) Mutation() *AcmeAccountMutation {
	return aau.mutation
}

// ClearCertificates clears all "certificates" edges to the Certificate entity.
func (aau *AcmeAccountUpdate) ClearCertificates() *AcmeAccountUpdate {
	aau.mutation.ClearCertificates()
	return aau
}

// RemoveCertificateIDs removes the "certificates" edge to Certificate entities by IDs.
func (aau *AcmeAccountUpdate) RemoveCertificateIDs(ids ...uuid.UUID) *AcmeAccountUpdate {
	aau.mutation.RemoveCertificateIDs(ids...)
	return aau
}

// RemoveCertificates removes "certificates" edges to Certificate entities.
func (aau *AcmeAccountUpdate) RemoveCertificates(c ...*Certificate) *AcmeAccountUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aau.RemoveCertificateIDs(ids...)
}

// ClearAcmeServer clears the "acme_server" edge to the AcmeServer entity.
func (aau *AcmeAccountUpdate) ClearAcmeServer() *AcmeAccountUpdate {
	aau.mutation.ClearAcmeServer()
	return aau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AcmeAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AcmeAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AcmeAccountUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AcmeAccountUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *AcmeAccountUpdate) check() error {
	if v, ok := aau.mutation.Name(); ok {
		if err := acmeaccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.name": %w`, err)}
		}
	}
	if v, ok := aau.mutation.Description(); ok {
		if err := acmeaccount.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.description": %w`, err)}
		}
	}
	if v, ok := aau.mutation.Email(); ok {
		if err := acmeaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.email": %w`, err)}
		}
	}
	if v, ok := aau.mutation.KeyType(); ok {
		if err := acmeaccount.KeyTypeValidator(v); err != nil {
			return &ValidationError{Name: "key_type", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.key_type": %w`, err)}
		}
	}
	if v, ok := aau.mutation.KeyFingerprint(); ok {
		if err := acmeaccount.KeyFingerprintValidator(v); err != nil {
			return &ValidationError{Name: "key_fingerprint", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.key_fingerprint": %w`, err)}
		}
	}
	if aau.mutation.AcmeServerCleared() && len(aau.mutation.AcmeServerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AcmeAccount.acme_server"`)
	}
	return nil
}

func (aau *AcmeAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(acmeaccount.Table, acmeaccount.Columns, sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Name(); ok {
		_spec.SetField(acmeaccount.FieldName, field.TypeString, value)
	}
	if value, ok := aau.mutation.Description(); ok {
		_spec.SetField(acmeaccount.FieldDescription, field.TypeString, value)
	}
	if aau.mutation.DescriptionCleared() {
		_spec.ClearField(acmeaccount.FieldDescription, field.TypeString)
	}
	if value, ok := aau.mutation.Email(); ok {
		_spec.SetField(acmeaccount.FieldEmail, field.TypeString, value)
	}
	if value, ok := aau.mutation.KeyType(); ok {
		_spec.SetField(acmeaccount.FieldKeyType, field.TypeEnum, value)
	}
	if value, ok := aau.mutation.PrivateKey(); ok {
		_spec.SetField(acmeaccount.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := aau.mutation.KeyFingerprint(); ok {
		_spec.SetField(acmeaccount.FieldKeyFingerprint, field.TypeString, value)
	}
	if value, ok := aau.mutation.Registration(); ok {
		_spec.SetField(acmeaccount.FieldRegistration, field.TypeJSON, value)
	}
	if value, ok := aau.mutation.EabKeyID(); ok {
		_spec.SetField(acmeaccount.FieldEabKeyID, field.TypeString, value)
	}
	if aau.mutation.EabKeyIDCleared() {
		_spec.ClearField(acmeaccount.FieldEabKeyID, field.TypeString)
	}
	if value, ok := aau.mutation.EabHmacKey(); ok {
		_spec.SetField(acmeaccount.FieldEabHmacKey, field.TypeString, value)
	}
	if aau.mutation.EabHmacKeyCleared() {
		_spec.ClearField(acmeaccount.FieldEabHmacKey, field.TypeString)
	}
	if value, ok := aau.mutation.CreatedBy(); ok {
		_spec.SetField(acmeaccount.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(acmeaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if aau.mutation.UpdatedAtCleared() {
		_spec.ClearField(acmeaccount.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aau.mutation.UpdatedBy(); ok {
		_spec.SetField(acmeaccount.FieldUpdatedBy, field.TypeUUID, value)
	}
	if aau.mutation.UpdatedByCleared() {
		_spec.ClearField(acmeaccount.FieldUpdatedBy, field.TypeUUID)
	}
	if aau.mutation.CertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.RemovedCertificatesIDs(); len(nodes) > 0 && !aau.mutation.CertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aau.mutation.AcmeServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   acmeaccount.AcmeServerTable,
			Columns: []string{acmeaccount.AcmeServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.AcmeServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   acmeaccount.AcmeServerTable,
			Columns: []string{acmeaccount.AcmeServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acmeaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AcmeAccountUpdateOne is the builder for updating a single AcmeAccount entity.
type AcmeAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AcmeAccountMutation
}

// SetAcmeServerID sets the "acme_server_id" field.
func (aauo *AcmeAccountUpdateOne) SetAcmeServerID(u uuid.UUID) *AcmeAccountUpdateOne {
	aauo.mutation.SetAcmeServerID(u)
	return aauo
}

// SetNillableAcmeServerID sets the "acme_server_id" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableAcmeServerID(u *uuid.UUID) *AcmeAccountUpdateOne {
	if u != nil {
		aauo.SetAcmeServerID(*u)
	}
	return aauo
}

// SetName sets the "name" field.
func (aauo *AcmeAccountUpdateOne) SetName(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetName(s)
	return aauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableName(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetName(*s)
	}
	return aauo
}

// SetDescription sets the "description" field.
func (aauo *AcmeAccountUpdateOne) SetDescription(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetDescription(s)
	return aauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableDescription(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetDescription(*s)
	}
	return aauo
}

// ClearDescription clears the value of the "description" field.
func (aauo *AcmeAccountUpdateOne) ClearDescription() *AcmeAccountUpdateOne {
	aauo.mutation.ClearDescription()
	return aauo
}

// SetEmail sets the "email" field.
func (aauo *AcmeAccountUpdateOne) SetEmail(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetEmail(s)
	return aauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableEmail(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetEmail(*s)
	}
	return aauo
}

// SetKeyType sets the "key_type" field.
func (aauo *AcmeAccountUpdateOne) SetKeyType(et enum.KeyType) *AcmeAccountUpdateOne {
	aauo.mutation.SetKeyType(et)
	return aauo
}

// SetNillableKeyType sets the "key_type" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableKeyType(et *enum.KeyType) *AcmeAccountUpdateOne {
	if et != nil {
		aauo.SetKeyType(*et)
	}
	return aauo
}

// SetPrivateKey sets the "private_key" field.
func (aauo *AcmeAccountUpdateOne) SetPrivateKey(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetPrivateKey(s)
	return aauo
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillablePrivateKey(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetPrivateKey(*s)
	}
	return aauo
}

// SetKeyFingerprint sets the "key_fingerprint" field.
func (aauo *AcmeAccountUpdateOne) SetKeyFingerprint(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetKeyFingerprint(s)
	return aauo
}

// SetNillableKeyFingerprint sets the "key_fingerprint" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableKeyFingerprint(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetKeyFingerprint(*s)
	}
	return aauo
}

// SetRegistration sets the "registration" field.
func (aauo *AcmeAccountUpdateOne) SetRegistration(r registration.Resource) *AcmeAccountUpdateOne {
	aauo.mutation.SetRegistration(r)
	return aauo
}

// SetNillableRegistration sets the "registration" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableRegistration(r *registration.Resource) *AcmeAccountUpdateOne {
	if r != nil {
		aauo.SetRegistration(*r)
	}
	return aauo
}

// SetEabKeyID sets the "eab_key_id" field.
func (aauo *AcmeAccountUpdateOne) SetEabKeyID(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetEabKeyID(s)
	return aauo
}

// SetNillableEabKeyID sets the "eab_key_id" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableEabKeyID(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetEabKeyID(*s)
	}
	return aauo
}

// ClearEabKeyID clears the value of the "eab_key_id" field.
func (aauo *AcmeAccountUpdateOne) ClearEabKeyID() *AcmeAccountUpdateOne {
	aauo.mutation.ClearEabKeyID()
	return aauo
}

// SetEabHmacKey sets the "eab_hmac_key" field.
func (aauo *AcmeAccountUpdateOne) SetEabHmacKey(s string) *AcmeAccountUpdateOne {
	aauo.mutation.SetEabHmacKey(s)
	return aauo
}

// SetNillableEabHmacKey sets the "eab_hmac_key" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableEabHmacKey(s *string) *AcmeAccountUpdateOne {
	if s != nil {
		aauo.SetEabHmacKey(*s)
	}
	return aauo
}

// ClearEabHmacKey clears the value of the "eab_hmac_key" field.
func (aauo *AcmeAccountUpdateOne) ClearEabHmacKey() *AcmeAccountUpdateOne {
	aauo.mutation.ClearEabHmacKey()
	return aauo
}

// SetCreatedBy sets the "created_by" field.
func (aauo *AcmeAccountUpdateOne) SetCreatedBy(u uuid.UUID) *AcmeAccountUpdateOne {
	aauo.mutation.SetCreatedBy(u)
	return aauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *AcmeAccountUpdateOne {
	if u != nil {
		aauo.SetCreatedBy(*u)
	}
	return aauo
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AcmeAccountUpdateOne) SetUpdatedAt(t time.Time) *AcmeAccountUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *AcmeAccountUpdateOne {
	if t != nil {
		aauo.SetUpdatedAt(*t)
	}
	return aauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aauo *AcmeAccountUpdateOne) ClearUpdatedAt() *AcmeAccountUpdateOne {
	aauo.mutation.ClearUpdatedAt()
	return aauo
}

// SetUpdatedBy sets the "updated_by" field.
func (aauo *AcmeAccountUpdateOne) SetUpdatedBy(u uuid.UUID) *AcmeAccountUpdateOne {
	aauo.mutation.SetUpdatedBy(u)
	return aauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aauo *AcmeAccountUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *AcmeAccountUpdateOne {
	if u != nil {
		aauo.SetUpdatedBy(*u)
	}
	return aauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aauo *AcmeAccountUpdateOne) ClearUpdatedBy() *AcmeAccountUpdateOne {
	aauo.mutation.ClearUpdatedBy()
	return aauo
}

// AddCertificateIDs adds the "certificates" edge to the Certificate entity by IDs.
func (aauo *AcmeAccountUpdateOne) AddCertificateIDs(ids ...uuid.UUID) *AcmeAccountUpdateOne {
	aauo.mutation.AddCertificateIDs(ids...)
	return aauo
}

// AddCertificates adds the "certificates" edges to the Certificate entity.
func (aauo *AcmeAccountUpdateOne) AddCertificates(c ...*Certificate) *AcmeAccountUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aauo.AddCertificateIDs(ids...)
}

// SetAcmeServer sets the "acme_server" edge to the AcmeServer entity.
func (aauo *AcmeAccountUpdateOne) SetAcmeServer(a *AcmeServer) *AcmeAccountUpdateOne {
	return aauo.SetAcmeServerID(a.ID)
}

// Mutation returns the AcmeAccountMutation object of the builder.
func (aauo *AcmeAccountUpdateOne) Mutation() *AcmeAccountMutation {
	return aauo.mutation
}

// ClearCertificates clears all "certificates" edges to the Certificate entity.
func (aauo *AcmeAccountUpdateOne) ClearCertificates() *AcmeAccountUpdateOne {
	aauo.mutation.ClearCertificates()
	return aauo
}

// RemoveCertificateIDs removes the "certificates" edge to Certificate entities by IDs.
func (aauo *AcmeAccountUpdateOne) RemoveCertificateIDs(ids ...uuid.UUID) *AcmeAccountUpdateOne {
	aauo.mutation.RemoveCertificateIDs(ids...)
	return aauo
}

// RemoveCertificates removes "certificates" edges to Certificate entities.
func (aauo *AcmeAccountUpdateOne) RemoveCertificates(c ...*Certificate) *AcmeAccountUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aauo.RemoveCertificateIDs(ids...)
}

// ClearAcmeServer clears the "acme_server" edge to the AcmeServer entity.
func (aauo *AcmeAccountUpdateOne) ClearAcmeServer() *AcmeAccountUpdateOne {
	aauo.mutation.ClearAcmeServer()
	return aauo
}

// Where appends a list predicates to the AcmeAccountUpdate builder.
func (aauo *AcmeAccountUpdateOne) Where(ps ...predicate.AcmeAccount) *AcmeAccountUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AcmeAccountUpdateOne) Select(field string, fields ...string) *AcmeAccountUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AcmeAccount entity.
func (aauo *AcmeAccountUpdateOne) Save(ctx context.Context) (*AcmeAccount, error) {
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AcmeAccountUpdateOne) SaveX(ctx context.Context) *AcmeAccount {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AcmeAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AcmeAccountUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *AcmeAccountUpdateOne) check() error {
	if v, ok := aauo.mutation.Name(); ok {
		if err := acmeaccount.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.name": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.Description(); ok {
		if err := acmeaccount.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.description": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.Email(); ok {
		if err := acmeaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.email": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.KeyType(); ok {
		if err := acmeaccount.KeyTypeValidator(v); err != nil {
			return &ValidationError{Name: "key_type", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.key_type": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.KeyFingerprint(); ok {
		if err := acmeaccount.KeyFingerprintValidator(v); err != nil {
			return &ValidationError{Name: "key_fingerprint", err: fmt.Errorf(`ent: validator failed for field "AcmeAccount.key_fingerprint": %w`, err)}
		}
	}
	if aauo.mutation.AcmeServerCleared() && len(aauo.mutation.AcmeServerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AcmeAccount.acme_server"`)
	}
	return nil
}

func (aauo *AcmeAccountUpdateOne) sqlSave(ctx context.Context) (_node *AcmeAccount, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(acmeaccount.Table, acmeaccount.Columns, sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AcmeAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, acmeaccount.FieldID)
		for _, f := range fields {
			if !acmeaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != acmeaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Name(); ok {
		_spec.SetField(acmeaccount.FieldName, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Description(); ok {
		_spec.SetField(acmeaccount.FieldDescription, field.TypeString, value)
	}
	if aauo.mutation.DescriptionCleared() {
		_spec.ClearField(acmeaccount.FieldDescription, field.TypeString)
	}
	if value, ok := aauo.mutation.Email(); ok {
		_spec.SetField(acmeaccount.FieldEmail, field.TypeString, value)
	}
	if value, ok := aauo.mutation.KeyType(); ok {
		_spec.SetField(acmeaccount.FieldKeyType, field.TypeEnum, value)
	}
	if value, ok := aauo.mutation.PrivateKey(); ok {
		_spec.SetField(acmeaccount.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := aauo.mutation.KeyFingerprint(); ok {
		_spec.SetField(acmeaccount.FieldKeyFingerprint, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Registration(); ok {
		_spec.SetField(acmeaccount.FieldRegistration, field.TypeJSON, value)
	}
	if value, ok := aauo.mutation.EabKeyID(); ok {
		_spec.SetField(acmeaccount.FieldEabKeyID, field.TypeString, value)
	}
	if aauo.mutation.EabKeyIDCleared() {
		_spec.ClearField(acmeaccount.FieldEabKeyID, field.TypeString)
	}
	if value, ok := aauo.mutation.EabHmacKey(); ok {
		_spec.SetField(acmeaccount.FieldEabHmacKey, field.TypeString, value)
	}
	if aauo.mutation.EabHmacKeyCleared() {
		_spec.ClearField(acmeaccount.FieldEabHmacKey, field.TypeString)
	}
	if value, ok := aauo.mutation.CreatedBy(); ok {
		_spec.SetField(acmeaccount.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(acmeaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if aauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(acmeaccount.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aauo.mutation.UpdatedBy(); ok {
		_spec.SetField(acmeaccount.FieldUpdatedBy, field.TypeUUID, value)
	}
	if aauo.mutation.UpdatedByCleared() {
		_spec.ClearField(acmeaccount.FieldUpdatedBy, field.TypeUUID)
	}
	if aauo.mutation.CertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.RemovedCertificatesIDs(); len(nodes) > 0 && !aauo.mutation.CertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeaccount.CertificatesTable,
			Columns: []string{acmeaccount.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aauo.mutation.AcmeServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   acmeaccount.AcmeServerTable,
			Columns: []string{acmeaccount.AcmeServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.AcmeServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   acmeaccount.AcmeServerTable,
			Columns: []string{acmeaccount.AcmeServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AcmeAccount{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acmeaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
