// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeserver"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AcmeServer is the model entity for the AcmeServer schema.
type AcmeServer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name of the ACME server
	Name string `json:"name,omitempty"`
	// Description of the ACME server
	Description *string `json:"description,omitempty"`
	// URL of the ACME server
	URL string `json:"url,omitempty"`
	// Is this a built-in ACME server
	BuiltIn bool `json:"built_in,omitempty"`
	// Does the ACME server require an External Account Binding
	ExternalAccountRequired bool `json:"external_account_required,omitempty"`
	// Time the ACME server was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// User that created the ACME server
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Time the ACME server was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// User that updated the ACME server
	UpdatedBy *uuid.UUID `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AcmeServerQuery when eager-loading is set.
	Edges        AcmeServerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AcmeServerEdges holds the relations/edges for other nodes in the graph.
type AcmeServerEdges struct {
	// AcmeAccounts holds the value of the acme_accounts edge.
	AcmeAccounts []*AcmeAccount `json:"acme_accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool

	namedAcmeAccounts map[string][]*AcmeAccount
}

// AcmeAccountsOrErr returns the AcmeAccounts value or an error if the edge
// was not loaded in eager-loading.
func (e AcmeServerEdges) AcmeAccountsOrErr() ([]*AcmeAccount, error) {
	if e.loadedTypes[0] {
		return e.AcmeAccounts, nil
	}
	return nil, &NotLoadedError{edge: "acme_accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AcmeServer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case acmeserver.FieldUpdatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case acmeserver.FieldBuiltIn, acmeserver.FieldExternalAccountRequired:
			values[i] = new(sql.NullBool)
		case acmeserver.FieldName, acmeserver.FieldDescription, acmeserver.FieldURL:
			values[i] = new(sql.NullString)
		case acmeserver.FieldCreatedAt, acmeserver.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case acmeserver.FieldID, acmeserver.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AcmeServer fields.
func (as *AcmeServer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case acmeserver.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				as.ID = *value
			}
		case acmeserver.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				as.Name = value.String
			}
		case acmeserver.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				as.Description = new(string)
				*as.Description = value.String
			}
		case acmeserver.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				as.URL = value.String
			}
		case acmeserver.FieldBuiltIn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field built_in", values[i])
			} else if value.Valid {
				as.BuiltIn = value.Bool
			}
		case acmeserver.FieldExternalAccountRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field external_account_required", values[i])
			} else if value.Valid {
				as.ExternalAccountRequired = value.Bool
			}
		case acmeserver.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case acmeserver.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				as.CreatedBy = *value
			}
		case acmeserver.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				as.UpdatedAt = new(time.Time)
				*as.UpdatedAt = value.Time
			}
		case acmeserver.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				as.UpdatedBy = new(uuid.UUID)
				*as.UpdatedBy = *value.S.(*uuid.UUID)
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AcmeServer.
// This includes values selected through modifiers, order, etc.
func (as *AcmeServer) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// QueryAcmeAccounts queries the "acme_accounts" edge of the AcmeServer entity.
func (as *AcmeServer) QueryAcmeAccounts() *AcmeAccountQuery {
	return NewAcmeServerClient(as.config).QueryAcmeAccounts(as)
}

// Update returns a builder for updating this AcmeServer.
// Note that you need to call AcmeServer.Unwrap() before calling this method if this AcmeServer
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AcmeServer) Update() *AcmeServerUpdateOne {
	return NewAcmeServerClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the AcmeServer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AcmeServer) Unwrap() *AcmeServer {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AcmeServer is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AcmeServer) String() string {
	var builder strings.Builder
	builder.WriteString("AcmeServer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("name=")
	builder.WriteString(as.Name)
	builder.WriteString(", ")
	if v := as.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(as.URL)
	builder.WriteString(", ")
	builder.WriteString("built_in=")
	builder.WriteString(fmt.Sprintf("%v", as.BuiltIn))
	builder.WriteString(", ")
	builder.WriteString("external_account_required=")
	builder.WriteString(fmt.Sprintf("%v", as.ExternalAccountRequired))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", as.CreatedBy))
	builder.WriteString(", ")
	if v := as.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := as.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedAcmeAccounts returns the AcmeAccounts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (as *AcmeServer) NamedAcmeAccounts(name string) ([]*AcmeAccount, error) {
	if as.Edges.namedAcmeAccounts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := as.Edges.namedAcmeAccounts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (as *AcmeServer) appendNamedAcmeAccounts(name string, edges ...*AcmeAccount) {
	if as.Edges.namedAcmeAccounts == nil {
		as.Edges.namedAcmeAccounts = make(map[string][]*AcmeAccount)
	}
	if len(edges) == 0 {
		as.Edges.namedAcmeAccounts[name] = []*AcmeAccount{}
	} else {
		as.Edges.namedAcmeAccounts[name] = append(as.Edges.namedAcmeAccounts[name], edges...)
	}
}

// AcmeServers is a parsable slice of AcmeServer.
type AcmeServers []*AcmeServer
