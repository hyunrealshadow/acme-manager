// Code generated by ent, DO NOT EDIT.

package acmeserver

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the acmeserver type in the database.
	Label = "acme_server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldBuiltIn holds the string denoting the built_in field in the database.
	FieldBuiltIn = "built_in"
	// FieldExternalAccountRequired holds the string denoting the external_account_required field in the database.
	FieldExternalAccountRequired = "external_account_required"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeAcmeAccounts holds the string denoting the acme_accounts edge name in mutations.
	EdgeAcmeAccounts = "acme_accounts"
	// Table holds the table name of the acmeserver in the database.
	Table = "acme_server"
	// AcmeAccountsTable is the table that holds the acme_accounts relation/edge.
	AcmeAccountsTable = "acme_account"
	// AcmeAccountsInverseTable is the table name for the AcmeAccount entity.
	// It exists in this package in order to avoid circular dependency with the "acmeaccount" package.
	AcmeAccountsInverseTable = "acme_account"
	// AcmeAccountsColumn is the table column denoting the acme_accounts relation/edge.
	AcmeAccountsColumn = "acme_server_id"
)

// Columns holds all SQL columns for acmeserver fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldURL,
	FieldBuiltIn,
	FieldExternalAccountRequired,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultBuiltIn holds the default value on creation for the "built_in" field.
	DefaultBuiltIn bool
	// DefaultExternalAccountRequired holds the default value on creation for the "external_account_required" field.
	DefaultExternalAccountRequired bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AcmeServer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByBuiltIn orders the results by the built_in field.
func ByBuiltIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuiltIn, opts...).ToFunc()
}

// ByExternalAccountRequired orders the results by the external_account_required field.
func ByExternalAccountRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalAccountRequired, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByAcmeAccountsCount orders the results by acme_accounts count.
func ByAcmeAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAcmeAccountsStep(), opts...)
	}
}

// ByAcmeAccounts orders the results by acme_accounts terms.
func ByAcmeAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAcmeAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAcmeAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AcmeAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AcmeAccountsTable, AcmeAccountsColumn),
	)
}
