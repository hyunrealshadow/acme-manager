// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AcmeServerCreate is the builder for creating a AcmeServer entity.
type AcmeServerCreate struct {
	config
	mutation *AcmeServerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (asc *AcmeServerCreate) SetName(s string) *AcmeServerCreate {
	asc.mutation.SetName(s)
	return asc
}

// SetDescription sets the "description" field.
func (asc *AcmeServerCreate) SetDescription(s string) *AcmeServerCreate {
	asc.mutation.SetDescription(s)
	return asc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableDescription(s *string) *AcmeServerCreate {
	if s != nil {
		asc.SetDescription(*s)
	}
	return asc
}

// SetURL sets the "url" field.
func (asc *AcmeServerCreate) SetURL(s string) *AcmeServerCreate {
	asc.mutation.SetURL(s)
	return asc
}

// SetBuiltIn sets the "built_in" field.
func (asc *AcmeServerCreate) SetBuiltIn(b bool) *AcmeServerCreate {
	asc.mutation.SetBuiltIn(b)
	return asc
}

// SetNillableBuiltIn sets the "built_in" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableBuiltIn(b *bool) *AcmeServerCreate {
	if b != nil {
		asc.SetBuiltIn(*b)
	}
	return asc
}

// SetExternalAccountRequired sets the "external_account_required" field.
func (asc *AcmeServerCreate) SetExternalAccountRequired(b bool) *AcmeServerCreate {
	asc.mutation.SetExternalAccountRequired(b)
	return asc
}

// SetNillableExternalAccountRequired sets the "external_account_required" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableExternalAccountRequired(b *bool) *AcmeServerCreate {
	if b != nil {
		asc.SetExternalAccountRequired(*b)
	}
	return asc
}

// SetCreatedAt sets the "created_at" field.
func (asc *AcmeServerCreate) SetCreatedAt(t time.Time) *AcmeServerCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableCreatedAt(t *time.Time) *AcmeServerCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetCreatedBy sets the "created_by" field.
func (asc *AcmeServerCreate) SetCreatedBy(u uuid.UUID) *AcmeServerCreate {
	asc.mutation.SetCreatedBy(u)
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AcmeServerCreate) SetUpdatedAt(t time.Time) *AcmeServerCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableUpdatedAt(t *time.Time) *AcmeServerCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetUpdatedBy sets the "updated_by" field.
func (asc *AcmeServerCreate) SetUpdatedBy(u uuid.UUID) *AcmeServerCreate {
	asc.mutation.SetUpdatedBy(u)
	return asc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableUpdatedBy(u *uuid.UUID) *AcmeServerCreate {
	if u != nil {
		asc.SetUpdatedBy(*u)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AcmeServerCreate) SetID(u uuid.UUID) *AcmeServerCreate {
	asc.mutation.SetID(u)
	return asc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (asc *AcmeServerCreate) SetNillableID(u *uuid.UUID) *AcmeServerCreate {
	if u != nil {
		asc.SetID(*u)
	}
	return asc
}

// AddAcmeAccountIDs adds the "acme_accounts" edge to the AcmeAccount entity by IDs.
func (asc *AcmeServerCreate) AddAcmeAccountIDs(ids ...uuid.UUID) *AcmeServerCreate {
	asc.mutation.AddAcmeAccountIDs(ids...)
	return asc
}

// AddAcmeAccounts adds the "acme_accounts" edges to the AcmeAccount entity.
func (asc *AcmeServerCreate) AddAcmeAccounts(a ...*AcmeAccount) *AcmeServerCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asc.AddAcmeAccountIDs(ids...)
}

// Mutation returns the AcmeServerMutation object of the builder.
func (asc *AcmeServerCreate) Mutation() *AcmeServerMutation {
	return asc.mutation
}

// Save creates the AcmeServer in the database.
func (asc *AcmeServerCreate) Save(ctx context.Context) (*AcmeServer, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AcmeServerCreate) SaveX(ctx context.Context) *AcmeServer {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AcmeServerCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AcmeServerCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AcmeServerCreate) defaults() {
	if _, ok := asc.mutation.BuiltIn(); !ok {
		v := acmeserver.DefaultBuiltIn
		asc.mutation.SetBuiltIn(v)
	}
	if _, ok := asc.mutation.ExternalAccountRequired(); !ok {
		v := acmeserver.DefaultExternalAccountRequired
		asc.mutation.SetExternalAccountRequired(v)
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := acmeserver.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.ID(); !ok {
		v := acmeserver.DefaultID()
		asc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AcmeServerCreate) check() error {
	if _, ok := asc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AcmeServer.name"`)}
	}
	if v, ok := asc.mutation.Name(); ok {
		if err := acmeserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.name": %w`, err)}
		}
	}
	if v, ok := asc.mutation.Description(); ok {
		if err := acmeserver.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.description": %w`, err)}
		}
	}
	if _, ok := asc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "AcmeServer.url"`)}
	}
	if v, ok := asc.mutation.URL(); ok {
		if err := acmeserver.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.url": %w`, err)}
		}
	}
	if _, ok := asc.mutation.BuiltIn(); !ok {
		return &ValidationError{Name: "built_in", err: errors.New(`ent: missing required field "AcmeServer.built_in"`)}
	}
	if _, ok := asc.mutation.ExternalAccountRequired(); !ok {
		return &ValidationError{Name: "external_account_required", err: errors.New(`ent: missing required field "AcmeServer.external_account_required"`)}
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AcmeServer.created_at"`)}
	}
	if _, ok := asc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AcmeServer.created_by"`)}
	}
	return nil
}

func (asc *AcmeServerCreate) sqlSave(ctx context.Context) (*AcmeServer, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AcmeServerCreate) createSpec() (*AcmeServer, *sqlgraph.CreateSpec) {
	var (
		_node = &AcmeServer{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(acmeserver.Table, sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID))
	)
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := asc.mutation.Name(); ok {
		_spec.SetField(acmeserver.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := asc.mutation.Description(); ok {
		_spec.SetField(acmeserver.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := asc.mutation.URL(); ok {
		_spec.SetField(acmeserver.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := asc.mutation.BuiltIn(); ok {
		_spec.SetField(acmeserver.FieldBuiltIn, field.TypeBool, value)
		_node.BuiltIn = value
	}
	if value, ok := asc.mutation.ExternalAccountRequired(); ok {
		_spec.SetField(acmeserver.FieldExternalAccountRequired, field.TypeBool, value)
		_node.ExternalAccountRequired = value
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(acmeserver.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.CreatedBy(); ok {
		_spec.SetField(acmeserver.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(acmeserver.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := asc.mutation.UpdatedBy(); ok {
		_spec.SetField(acmeserver.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if nodes := asc.mutation.AcmeAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AcmeServerCreateBulk is the builder for creating many AcmeServer entities in bulk.
type AcmeServerCreateBulk struct {
	config
	err      error
	builders []*AcmeServerCreate
}

// Save creates the AcmeServer entities in the database.
func (ascb *AcmeServerCreateBulk) Save(ctx context.Context) ([]*AcmeServer, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AcmeServer, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AcmeServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AcmeServerCreateBulk) SaveX(ctx context.Context) []*AcmeServer {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AcmeServerCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AcmeServerCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
