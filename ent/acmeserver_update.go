// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AcmeServerUpdate is the builder for updating AcmeServer entities.
type AcmeServerUpdate struct {
	config
	hooks    []Hook
	mutation *AcmeServerMutation
}

// Where appends a list predicates to the AcmeServerUpdate builder.
func (asu *AcmeServerUpdate) Where(ps ...predicate.AcmeServer) *AcmeServerUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetName sets the "name" field.
func (asu *AcmeServerUpdate) SetName(s string) *AcmeServerUpdate {
	asu.mutation.SetName(s)
	return asu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableName(s *string) *AcmeServerUpdate {
	if s != nil {
		asu.SetName(*s)
	}
	return asu
}

// SetDescription sets the "description" field.
func (asu *AcmeServerUpdate) SetDescription(s string) *AcmeServerUpdate {
	asu.mutation.SetDescription(s)
	return asu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableDescription(s *string) *AcmeServerUpdate {
	if s != nil {
		asu.SetDescription(*s)
	}
	return asu
}

// ClearDescription clears the value of the "description" field.
func (asu *AcmeServerUpdate) ClearDescription() *AcmeServerUpdate {
	asu.mutation.ClearDescription()
	return asu
}

// SetURL sets the "url" field.
func (asu *AcmeServerUpdate) SetURL(s string) *AcmeServerUpdate {
	asu.mutation.SetURL(s)
	return asu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableURL(s *string) *AcmeServerUpdate {
	if s != nil {
		asu.SetURL(*s)
	}
	return asu
}

// SetBuiltIn sets the "built_in" field.
func (asu *AcmeServerUpdate) SetBuiltIn(b bool) *AcmeServerUpdate {
	asu.mutation.SetBuiltIn(b)
	return asu
}

// SetNillableBuiltIn sets the "built_in" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableBuiltIn(b *bool) *AcmeServerUpdate {
	if b != nil {
		asu.SetBuiltIn(*b)
	}
	return asu
}

// SetExternalAccountRequired sets the "external_account_required" field.
func (asu *AcmeServerUpdate) SetExternalAccountRequired(b bool) *AcmeServerUpdate {
	asu.mutation.SetExternalAccountRequired(b)
	return asu
}

// SetNillableExternalAccountRequired sets the "external_account_required" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableExternalAccountRequired(b *bool) *AcmeServerUpdate {
	if b != nil {
		asu.SetExternalAccountRequired(*b)
	}
	return asu
}

// SetCreatedBy sets the "created_by" field.
func (asu *AcmeServerUpdate) SetCreatedBy(u uuid.UUID) *AcmeServerUpdate {
	asu.mutation.SetCreatedBy(u)
	return asu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableCreatedBy(u *uuid.UUID) *AcmeServerUpdate {
	if u != nil {
		asu.SetCreatedBy(*u)
	}
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AcmeServerUpdate) SetUpdatedAt(t time.Time) *AcmeServerUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableUpdatedAt(t *time.Time) *AcmeServerUpdate {
	if t != nil {
		asu.SetUpdatedAt(*t)
	}
	return asu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (asu *AcmeServerUpdate) ClearUpdatedAt() *AcmeServerUpdate {
	asu.mutation.ClearUpdatedAt()
	return asu
}

// SetUpdatedBy sets the "updated_by" field.
func (asu *AcmeServerUpdate) SetUpdatedBy(u uuid.UUID) *AcmeServerUpdate {
	asu.mutation.SetUpdatedBy(u)
	return asu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (asu *AcmeServerUpdate) SetNillableUpdatedBy(u *uuid.UUID) *AcmeServerUpdate {
	if u != nil {
		asu.SetUpdatedBy(*u)
	}
	return asu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (asu *AcmeServerUpdate) ClearUpdatedBy() *AcmeServerUpdate {
	asu.mutation.ClearUpdatedBy()
	return asu
}

// AddAcmeAccountIDs adds the "acme_accounts" edge to the AcmeAccount entity by IDs.
func (asu *AcmeServerUpdate) AddAcmeAccountIDs(ids ...uuid.UUID) *AcmeServerUpdate {
	asu.mutation.AddAcmeAccountIDs(ids...)
	return asu
}

// AddAcmeAccounts adds the "acme_accounts" edges to the AcmeAccount entity.
func (asu *AcmeServerUpdate) AddAcmeAccounts(a ...*AcmeAccount) *AcmeServerUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asu.AddAcmeAccountIDs(ids...)
}

// Mutation returns the AcmeServerMutation object of the builder.
func (asu *AcmeServerUpdate) Mutation() *AcmeServerMutation {
	return asu.mutation
}

// ClearAcmeAccounts clears all "acme_accounts" edges to the AcmeAccount entity.
func (asu *AcmeServerUpdate) ClearAcmeAccounts() *AcmeServerUpdate {
	asu.mutation.ClearAcmeAccounts()
	return asu
}

// RemoveAcmeAccountIDs removes the "acme_accounts" edge to AcmeAccount entities by IDs.
func (asu *AcmeServerUpdate) RemoveAcmeAccountIDs(ids ...uuid.UUID) *AcmeServerUpdate {
	asu.mutation.RemoveAcmeAccountIDs(ids...)
	return asu
}

// RemoveAcmeAccounts removes "acme_accounts" edges to AcmeAccount entities.
func (asu *AcmeServerUpdate) RemoveAcmeAccounts(a ...*AcmeAccount) *AcmeServerUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asu.RemoveAcmeAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AcmeServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AcmeServerUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AcmeServerUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AcmeServerUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AcmeServerUpdate) check() error {
	if v, ok := asu.mutation.Name(); ok {
		if err := acmeserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.name": %w`, err)}
		}
	}
	if v, ok := asu.mutation.Description(); ok {
		if err := acmeserver.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.description": %w`, err)}
		}
	}
	if v, ok := asu.mutation.URL(); ok {
		if err := acmeserver.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.url": %w`, err)}
		}
	}
	return nil
}

func (asu *AcmeServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(acmeserver.Table, acmeserver.Columns, sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Name(); ok {
		_spec.SetField(acmeserver.FieldName, field.TypeString, value)
	}
	if value, ok := asu.mutation.Description(); ok {
		_spec.SetField(acmeserver.FieldDescription, field.TypeString, value)
	}
	if asu.mutation.DescriptionCleared() {
		_spec.ClearField(acmeserver.FieldDescription, field.TypeString)
	}
	if value, ok := asu.mutation.URL(); ok {
		_spec.SetField(acmeserver.FieldURL, field.TypeString, value)
	}
	if value, ok := asu.mutation.BuiltIn(); ok {
		_spec.SetField(acmeserver.FieldBuiltIn, field.TypeBool, value)
	}
	if value, ok := asu.mutation.ExternalAccountRequired(); ok {
		_spec.SetField(acmeserver.FieldExternalAccountRequired, field.TypeBool, value)
	}
	if value, ok := asu.mutation.CreatedBy(); ok {
		_spec.SetField(acmeserver.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(acmeserver.FieldUpdatedAt, field.TypeTime, value)
	}
	if asu.mutation.UpdatedAtCleared() {
		_spec.ClearField(acmeserver.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := asu.mutation.UpdatedBy(); ok {
		_spec.SetField(acmeserver.FieldUpdatedBy, field.TypeUUID, value)
	}
	if asu.mutation.UpdatedByCleared() {
		_spec.ClearField(acmeserver.FieldUpdatedBy, field.TypeUUID)
	}
	if asu.mutation.AcmeAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.RemovedAcmeAccountsIDs(); len(nodes) > 0 && !asu.mutation.AcmeAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AcmeAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acmeserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AcmeServerUpdateOne is the builder for updating a single AcmeServer entity.
type AcmeServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AcmeServerMutation
}

// SetName sets the "name" field.
func (asuo *AcmeServerUpdateOne) SetName(s string) *AcmeServerUpdateOne {
	asuo.mutation.SetName(s)
	return asuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableName(s *string) *AcmeServerUpdateOne {
	if s != nil {
		asuo.SetName(*s)
	}
	return asuo
}

// SetDescription sets the "description" field.
func (asuo *AcmeServerUpdateOne) SetDescription(s string) *AcmeServerUpdateOne {
	asuo.mutation.SetDescription(s)
	return asuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableDescription(s *string) *AcmeServerUpdateOne {
	if s != nil {
		asuo.SetDescription(*s)
	}
	return asuo
}

// ClearDescription clears the value of the "description" field.
func (asuo *AcmeServerUpdateOne) ClearDescription() *AcmeServerUpdateOne {
	asuo.mutation.ClearDescription()
	return asuo
}

// SetURL sets the "url" field.
func (asuo *AcmeServerUpdateOne) SetURL(s string) *AcmeServerUpdateOne {
	asuo.mutation.SetURL(s)
	return asuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableURL(s *string) *AcmeServerUpdateOne {
	if s != nil {
		asuo.SetURL(*s)
	}
	return asuo
}

// SetBuiltIn sets the "built_in" field.
func (asuo *AcmeServerUpdateOne) SetBuiltIn(b bool) *AcmeServerUpdateOne {
	asuo.mutation.SetBuiltIn(b)
	return asuo
}

// SetNillableBuiltIn sets the "built_in" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableBuiltIn(b *bool) *AcmeServerUpdateOne {
	if b != nil {
		asuo.SetBuiltIn(*b)
	}
	return asuo
}

// SetExternalAccountRequired sets the "external_account_required" field.
func (asuo *AcmeServerUpdateOne) SetExternalAccountRequired(b bool) *AcmeServerUpdateOne {
	asuo.mutation.SetExternalAccountRequired(b)
	return asuo
}

// SetNillableExternalAccountRequired sets the "external_account_required" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableExternalAccountRequired(b *bool) *AcmeServerUpdateOne {
	if b != nil {
		asuo.SetExternalAccountRequired(*b)
	}
	return asuo
}

// SetCreatedBy sets the "created_by" field.
func (asuo *AcmeServerUpdateOne) SetCreatedBy(u uuid.UUID) *AcmeServerUpdateOne {
	asuo.mutation.SetCreatedBy(u)
	return asuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *AcmeServerUpdateOne {
	if u != nil {
		asuo.SetCreatedBy(*u)
	}
	return asuo
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AcmeServerUpdateOne) SetUpdatedAt(t time.Time) *AcmeServerUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableUpdatedAt(t *time.Time) *AcmeServerUpdateOne {
	if t != nil {
		asuo.SetUpdatedAt(*t)
	}
	return asuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (asuo *AcmeServerUpdateOne) ClearUpdatedAt() *AcmeServerUpdateOne {
	asuo.mutation.ClearUpdatedAt()
	return asuo
}

// SetUpdatedBy sets the "updated_by" field.
func (asuo *AcmeServerUpdateOne) SetUpdatedBy(u uuid.UUID) *AcmeServerUpdateOne {
	asuo.mutation.SetUpdatedBy(u)
	return asuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (asuo *AcmeServerUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *AcmeServerUpdateOne {
	if u != nil {
		asuo.SetUpdatedBy(*u)
	}
	return asuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (asuo *AcmeServerUpdateOne) ClearUpdatedBy() *AcmeServerUpdateOne {
	asuo.mutation.ClearUpdatedBy()
	return asuo
}

// AddAcmeAccountIDs adds the "acme_accounts" edge to the AcmeAccount entity by IDs.
func (asuo *AcmeServerUpdateOne) AddAcmeAccountIDs(ids ...uuid.UUID) *AcmeServerUpdateOne {
	asuo.mutation.AddAcmeAccountIDs(ids...)
	return asuo
}

// AddAcmeAccounts adds the "acme_accounts" edges to the AcmeAccount entity.
func (asuo *AcmeServerUpdateOne) AddAcmeAccounts(a ...*AcmeAccount) *AcmeServerUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asuo.AddAcmeAccountIDs(ids...)
}

// Mutation returns the AcmeServerMutation object of the builder.
func (asuo *AcmeServerUpdateOne) Mutation() *AcmeServerMutation {
	return asuo.mutation
}

// ClearAcmeAccounts clears all "acme_accounts" edges to the AcmeAccount entity.
func (asuo *AcmeServerUpdateOne) ClearAcmeAccounts() *AcmeServerUpdateOne {
	asuo.mutation.ClearAcmeAccounts()
	return asuo
}

// RemoveAcmeAccountIDs removes the "acme_accounts" edge to AcmeAccount entities by IDs.
func (asuo *AcmeServerUpdateOne) RemoveAcmeAccountIDs(ids ...uuid.UUID) *AcmeServerUpdateOne {
	asuo.mutation.RemoveAcmeAccountIDs(ids...)
	return asuo
}

// RemoveAcmeAccounts removes "acme_accounts" edges to AcmeAccount entities.
func (asuo *AcmeServerUpdateOne) RemoveAcmeAccounts(a ...*AcmeAccount) *AcmeServerUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asuo.RemoveAcmeAccountIDs(ids...)
}

// Where appends a list predicates to the AcmeServerUpdate builder.
func (asuo *AcmeServerUpdateOne) Where(ps ...predicate.AcmeServer) *AcmeServerUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AcmeServerUpdateOne) Select(field string, fields ...string) *AcmeServerUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AcmeServer entity.
func (asuo *AcmeServerUpdateOne) Save(ctx context.Context) (*AcmeServer, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AcmeServerUpdateOne) SaveX(ctx context.Context) *AcmeServer {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AcmeServerUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AcmeServerUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AcmeServerUpdateOne) check() error {
	if v, ok := asuo.mutation.Name(); ok {
		if err := acmeserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.name": %w`, err)}
		}
	}
	if v, ok := asuo.mutation.Description(); ok {
		if err := acmeserver.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.description": %w`, err)}
		}
	}
	if v, ok := asuo.mutation.URL(); ok {
		if err := acmeserver.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "AcmeServer.url": %w`, err)}
		}
	}
	return nil
}

func (asuo *AcmeServerUpdateOne) sqlSave(ctx context.Context) (_node *AcmeServer, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(acmeserver.Table, acmeserver.Columns, sqlgraph.NewFieldSpec(acmeserver.FieldID, field.TypeUUID))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AcmeServer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, acmeserver.FieldID)
		for _, f := range fields {
			if !acmeserver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != acmeserver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Name(); ok {
		_spec.SetField(acmeserver.FieldName, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Description(); ok {
		_spec.SetField(acmeserver.FieldDescription, field.TypeString, value)
	}
	if asuo.mutation.DescriptionCleared() {
		_spec.ClearField(acmeserver.FieldDescription, field.TypeString)
	}
	if value, ok := asuo.mutation.URL(); ok {
		_spec.SetField(acmeserver.FieldURL, field.TypeString, value)
	}
	if value, ok := asuo.mutation.BuiltIn(); ok {
		_spec.SetField(acmeserver.FieldBuiltIn, field.TypeBool, value)
	}
	if value, ok := asuo.mutation.ExternalAccountRequired(); ok {
		_spec.SetField(acmeserver.FieldExternalAccountRequired, field.TypeBool, value)
	}
	if value, ok := asuo.mutation.CreatedBy(); ok {
		_spec.SetField(acmeserver.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(acmeserver.FieldUpdatedAt, field.TypeTime, value)
	}
	if asuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(acmeserver.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.UpdatedBy(); ok {
		_spec.SetField(acmeserver.FieldUpdatedBy, field.TypeUUID, value)
	}
	if asuo.mutation.UpdatedByCleared() {
		_spec.ClearField(acmeserver.FieldUpdatedBy, field.TypeUUID)
	}
	if asuo.mutation.AcmeAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.RemovedAcmeAccountsIDs(); len(nodes) > 0 && !asuo.mutation.AcmeAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AcmeAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   acmeserver.AcmeAccountsTable,
			Columns: []string{acmeserver.AcmeAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AcmeServer{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{acmeserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
