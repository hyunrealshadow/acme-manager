// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"
	"acme-manager/ent/schema/enum"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Certificate is the model entity for the Certificate schema.
type Certificate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ACME account ID
	AcmeAccountID uuid.UUID `json:"acme_account_id,omitempty"`
	// DNS provider ID
	DNSProviderID uuid.UUID `json:"dns_provider_id,omitempty"`
	// Common name of the certificate
	CommonName string `json:"common_name,omitempty"`
	// Subject alternative name of the certificate
	SubjectAlternativeName []string `json:"subject_alternative_name,omitempty"`
	// Organization name of the certificate
	Organization *string `json:"organization,omitempty"`
	// Organizational unit name of the certificate
	OrganizationalUnit *string `json:"organizational_unit,omitempty"`
	// Country code of the certificate
	Country *string `json:"country,omitempty"`
	// State or province of the certificate
	State *string `json:"state,omitempty"`
	// Locality of the certificate
	Locality *string `json:"locality,omitempty"`
	// Street address of the certificate
	StreetAddress *string `json:"street_address,omitempty"`
	// Key type of the certificate
	KeyType enum.KeyType `json:"key_type,omitempty"`
	// Certificate signing request of the certificate
	Csr *string `json:"csr,omitempty"`
	// Private key of the certificate
	PrivateKey *string `json:"private_key,omitempty"`
	// Certificate of the certificate
	Certificate *string `json:"certificate,omitempty"`
	// CertificateChain of the certificate
	CertificateChain []string `json:"certificate_chain,omitempty"`
	// Fingerprint of the certificate
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Status of the certificate
	Status enum.Status `json:"status,omitempty"`
	// Time the certificate was issued
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	// Time the certificate expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Time the certificate was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// User that created the certificate
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Time the certificate was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// User that updated the certificate
	UpdatedBy *uuid.UUID `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificateQuery when eager-loading is set.
	Edges        CertificateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CertificateEdges holds the relations/edges for other nodes in the graph.
type CertificateEdges struct {
	// AcmeAccount holds the value of the acme_account edge.
	AcmeAccount *AcmeAccount `json:"acme_account,omitempty"`
	// DNSProvider holds the value of the dns_provider edge.
	DNSProvider *DnsProvider `json:"dns_provider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AcmeAccountOrErr returns the AcmeAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificateEdges) AcmeAccountOrErr() (*AcmeAccount, error) {
	if e.AcmeAccount != nil {
		return e.AcmeAccount, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: acmeaccount.Label}
	}
	return nil, &NotLoadedError{edge: "acme_account"}
}

// DNSProviderOrErr returns the DNSProvider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificateEdges) DNSProviderOrErr() (*DnsProvider, error) {
	if e.DNSProvider != nil {
		return e.DNSProvider, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: dnsprovider.Label}
	}
	return nil, &NotLoadedError{edge: "dns_provider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certificate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certificate.FieldUpdatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case certificate.FieldSubjectAlternativeName, certificate.FieldCertificateChain:
			values[i] = new([]byte)
		case certificate.FieldCommonName, certificate.FieldOrganization, certificate.FieldOrganizationalUnit, certificate.FieldCountry, certificate.FieldState, certificate.FieldLocality, certificate.FieldStreetAddress, certificate.FieldKeyType, certificate.FieldCsr, certificate.FieldPrivateKey, certificate.FieldCertificate, certificate.FieldFingerprint, certificate.FieldStatus:
			values[i] = new(sql.NullString)
		case certificate.FieldIssuedAt, certificate.FieldExpiresAt, certificate.FieldCreatedAt, certificate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case certificate.FieldID, certificate.FieldAcmeAccountID, certificate.FieldDNSProviderID, certificate.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certificate fields.
func (c *Certificate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certificate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case certificate.FieldAcmeAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field acme_account_id", values[i])
			} else if value != nil {
				c.AcmeAccountID = *value
			}
		case certificate.FieldDNSProviderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field dns_provider_id", values[i])
			} else if value != nil {
				c.DNSProviderID = *value
			}
		case certificate.FieldCommonName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field common_name", values[i])
			} else if value.Valid {
				c.CommonName = value.String
			}
		case certificate.FieldSubjectAlternativeName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field subject_alternative_name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.SubjectAlternativeName); err != nil {
					return fmt.Errorf("unmarshal field subject_alternative_name: %w", err)
				}
			}
		case certificate.FieldOrganization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization", values[i])
			} else if value.Valid {
				c.Organization = new(string)
				*c.Organization = value.String
			}
		case certificate.FieldOrganizationalUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organizational_unit", values[i])
			} else if value.Valid {
				c.OrganizationalUnit = new(string)
				*c.OrganizationalUnit = value.String
			}
		case certificate.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				c.Country = new(string)
				*c.Country = value.String
			}
		case certificate.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				c.State = new(string)
				*c.State = value.String
			}
		case certificate.FieldLocality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locality", values[i])
			} else if value.Valid {
				c.Locality = new(string)
				*c.Locality = value.String
			}
		case certificate.FieldStreetAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_address", values[i])
			} else if value.Valid {
				c.StreetAddress = new(string)
				*c.StreetAddress = value.String
			}
		case certificate.FieldKeyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_type", values[i])
			} else if value.Valid {
				c.KeyType = enum.KeyType(value.String)
			}
		case certificate.FieldCsr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field csr", values[i])
			} else if value.Valid {
				c.Csr = new(string)
				*c.Csr = value.String
			}
		case certificate.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				c.PrivateKey = new(string)
				*c.PrivateKey = value.String
			}
		case certificate.FieldCertificate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate", values[i])
			} else if value.Valid {
				c.Certificate = new(string)
				*c.Certificate = value.String
			}
		case certificate.FieldCertificateChain:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_chain", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.CertificateChain); err != nil {
					return fmt.Errorf("unmarshal field certificate_chain: %w", err)
				}
			}
		case certificate.FieldFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fingerprint", values[i])
			} else if value.Valid {
				c.Fingerprint = new(string)
				*c.Fingerprint = value.String
			}
		case certificate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = enum.Status(value.String)
			}
		case certificate.FieldIssuedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issued_at", values[i])
			} else if value.Valid {
				c.IssuedAt = new(time.Time)
				*c.IssuedAt = value.Time
			}
		case certificate.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				c.ExpiresAt = new(time.Time)
				*c.ExpiresAt = value.Time
			}
		case certificate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case certificate.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				c.CreatedBy = *value
			}
		case certificate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = new(time.Time)
				*c.UpdatedAt = value.Time
			}
		case certificate.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = new(uuid.UUID)
				*c.UpdatedBy = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Certificate.
// This includes values selected through modifiers, order, etc.
func (c *Certificate) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAcmeAccount queries the "acme_account" edge of the Certificate entity.
func (c *Certificate) QueryAcmeAccount() *AcmeAccountQuery {
	return NewCertificateClient(c.config).QueryAcmeAccount(c)
}

// QueryDNSProvider queries the "dns_provider" edge of the Certificate entity.
func (c *Certificate) QueryDNSProvider() *DnsProviderQuery {
	return NewCertificateClient(c.config).QueryDNSProvider(c)
}

// Update returns a builder for updating this Certificate.
// Note that you need to call Certificate.Unwrap() before calling this method if this Certificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certificate) Update() *CertificateUpdateOne {
	return NewCertificateClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Certificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certificate) Unwrap() *Certificate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certificate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certificate) String() string {
	var builder strings.Builder
	builder.WriteString("Certificate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("acme_account_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AcmeAccountID))
	builder.WriteString(", ")
	builder.WriteString("dns_provider_id=")
	builder.WriteString(fmt.Sprintf("%v", c.DNSProviderID))
	builder.WriteString(", ")
	builder.WriteString("common_name=")
	builder.WriteString(c.CommonName)
	builder.WriteString(", ")
	builder.WriteString("subject_alternative_name=")
	builder.WriteString(fmt.Sprintf("%v", c.SubjectAlternativeName))
	builder.WriteString(", ")
	if v := c.Organization; v != nil {
		builder.WriteString("organization=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.OrganizationalUnit; v != nil {
		builder.WriteString("organizational_unit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Country; v != nil {
		builder.WriteString("country=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.State; v != nil {
		builder.WriteString("state=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Locality; v != nil {
		builder.WriteString("locality=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.StreetAddress; v != nil {
		builder.WriteString("street_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("key_type=")
	builder.WriteString(fmt.Sprintf("%v", c.KeyType))
	builder.WriteString(", ")
	if v := c.Csr; v != nil {
		builder.WriteString("csr=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.PrivateKey; v != nil {
		builder.WriteString("private_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Certificate; v != nil {
		builder.WriteString("certificate=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("certificate_chain=")
	builder.WriteString(fmt.Sprintf("%v", c.CertificateChain))
	builder.WriteString(", ")
	if v := c.Fingerprint; v != nil {
		builder.WriteString("fingerprint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	if v := c.IssuedAt; v != nil {
		builder.WriteString("issued_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedBy))
	builder.WriteString(", ")
	if v := c.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Certificates is a parsable slice of Certificate.
type Certificates []*Certificate
