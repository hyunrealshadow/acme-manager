// Code generated by ent, DO NOT EDIT.

package certificate

import (
	"acme-manager/ent/schema/enum"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the certificate type in the database.
	Label = "certificate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAcmeAccountID holds the string denoting the acme_account_id field in the database.
	FieldAcmeAccountID = "acme_account_id"
	// FieldDNSProviderID holds the string denoting the dns_provider_id field in the database.
	FieldDNSProviderID = "dns_provider_id"
	// FieldCommonName holds the string denoting the common_name field in the database.
	FieldCommonName = "common_name"
	// FieldSubjectAlternativeName holds the string denoting the subject_alternative_name field in the database.
	FieldSubjectAlternativeName = "subject_alternative_name"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// FieldOrganizationalUnit holds the string denoting the organizational_unit field in the database.
	FieldOrganizationalUnit = "organizational_unit"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldLocality holds the string denoting the locality field in the database.
	FieldLocality = "locality"
	// FieldStreetAddress holds the string denoting the street_address field in the database.
	FieldStreetAddress = "street_address"
	// FieldKeyType holds the string denoting the key_type field in the database.
	FieldKeyType = "key_type"
	// FieldCsr holds the string denoting the csr field in the database.
	FieldCsr = "csr"
	// FieldPrivateKey holds the string denoting the private_key field in the database.
	FieldPrivateKey = "private_key"
	// FieldCertificate holds the string denoting the certificate field in the database.
	FieldCertificate = "certificate"
	// FieldCertificateChain holds the string denoting the certificate_chain field in the database.
	FieldCertificateChain = "certificate_chain"
	// FieldFingerprint holds the string denoting the fingerprint field in the database.
	FieldFingerprint = "fingerprint"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIssuedAt holds the string denoting the issued_at field in the database.
	FieldIssuedAt = "issued_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeAcmeAccount holds the string denoting the acme_account edge name in mutations.
	EdgeAcmeAccount = "acme_account"
	// EdgeDNSProvider holds the string denoting the dns_provider edge name in mutations.
	EdgeDNSProvider = "dns_provider"
	// Table holds the table name of the certificate in the database.
	Table = "certificate"
	// AcmeAccountTable is the table that holds the acme_account relation/edge.
	AcmeAccountTable = "certificate"
	// AcmeAccountInverseTable is the table name for the AcmeAccount entity.
	// It exists in this package in order to avoid circular dependency with the "acmeaccount" package.
	AcmeAccountInverseTable = "acme_account"
	// AcmeAccountColumn is the table column denoting the acme_account relation/edge.
	AcmeAccountColumn = "acme_account_id"
	// DNSProviderTable is the table that holds the dns_provider relation/edge.
	DNSProviderTable = "certificate"
	// DNSProviderInverseTable is the table name for the DnsProvider entity.
	// It exists in this package in order to avoid circular dependency with the "dnsprovider" package.
	DNSProviderInverseTable = "dns_provider"
	// DNSProviderColumn is the table column denoting the dns_provider relation/edge.
	DNSProviderColumn = "dns_provider_id"
)

// Columns holds all SQL columns for certificate fields.
var Columns = []string{
	FieldID,
	FieldAcmeAccountID,
	FieldDNSProviderID,
	FieldCommonName,
	FieldSubjectAlternativeName,
	FieldOrganization,
	FieldOrganizationalUnit,
	FieldCountry,
	FieldState,
	FieldLocality,
	FieldStreetAddress,
	FieldKeyType,
	FieldCsr,
	FieldPrivateKey,
	FieldCertificate,
	FieldCertificateChain,
	FieldFingerprint,
	FieldStatus,
	FieldIssuedAt,
	FieldExpiresAt,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CommonNameValidator is a validator for the "common_name" field. It is called by the builders before save.
	CommonNameValidator func(string) error
	// OrganizationValidator is a validator for the "organization" field. It is called by the builders before save.
	OrganizationValidator func(string) error
	// OrganizationalUnitValidator is a validator for the "organizational_unit" field. It is called by the builders before save.
	OrganizationalUnitValidator func(string) error
	// CountryValidator is a validator for the "country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// LocalityValidator is a validator for the "locality" field. It is called by the builders before save.
	LocalityValidator func(string) error
	// StreetAddressValidator is a validator for the "street_address" field. It is called by the builders before save.
	StreetAddressValidator func(string) error
	// FingerprintValidator is a validator for the "fingerprint" field. It is called by the builders before save.
	FingerprintValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// KeyTypeValidator is a validator for the "key_type" field enum values. It is called by the builders before save.
func KeyTypeValidator(kt enum.KeyType) error {
	switch kt {
	case "RSA2048", "RSA3072", "RSA4096", "RSA8192", "EC256", "EC384":
		return nil
	default:
		return fmt.Errorf("certificate: invalid enum value for key_type field: %q", kt)
	}
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enum.Status) error {
	switch s {
	case "Pending", "Succeeded", "Failed":
		return nil
	default:
		return fmt.Errorf("certificate: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Certificate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAcmeAccountID orders the results by the acme_account_id field.
func ByAcmeAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcmeAccountID, opts...).ToFunc()
}

// ByDNSProviderID orders the results by the dns_provider_id field.
func ByDNSProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSProviderID, opts...).ToFunc()
}

// ByCommonName orders the results by the common_name field.
func ByCommonName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommonName, opts...).ToFunc()
}

// ByOrganization orders the results by the organization field.
func ByOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganization, opts...).ToFunc()
}

// ByOrganizationalUnit orders the results by the organizational_unit field.
func ByOrganizationalUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationalUnit, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByLocality orders the results by the locality field.
func ByLocality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocality, opts...).ToFunc()
}

// ByStreetAddress orders the results by the street_address field.
func ByStreetAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreetAddress, opts...).ToFunc()
}

// ByKeyType orders the results by the key_type field.
func ByKeyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyType, opts...).ToFunc()
}

// ByCsr orders the results by the csr field.
func ByCsr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCsr, opts...).ToFunc()
}

// ByPrivateKey orders the results by the private_key field.
func ByPrivateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivateKey, opts...).ToFunc()
}

// ByCertificate orders the results by the certificate field.
func ByCertificate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificate, opts...).ToFunc()
}

// ByFingerprint orders the results by the fingerprint field.
func ByFingerprint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFingerprint, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIssuedAt orders the results by the issued_at field.
func ByIssuedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByAcmeAccountField orders the results by acme_account field.
func ByAcmeAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAcmeAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByDNSProviderField orders the results by dns_provider field.
func ByDNSProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDNSProviderStep(), sql.OrderByField(field, opts...))
	}
}
func newAcmeAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AcmeAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AcmeAccountTable, AcmeAccountColumn),
	)
}
func newDNSProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DNSProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DNSProviderTable, DNSProviderColumn),
	)
}

var (
	// enum.KeyType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.KeyType)(nil)
	// enum.KeyType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.KeyType)(nil)
)

var (
	// enum.Status must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enum.Status)(nil)
	// enum.Status must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enum.Status)(nil)
)
