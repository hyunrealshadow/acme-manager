// Code generated by ent, DO NOT EDIT.

package certificate

import (
	"acme-manager/ent/predicate"
	"acme-manager/ent/schema/enum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldID, id))
}

// AcmeAccountID applies equality check predicate on the "acme_account_id" field. It's identical to AcmeAccountIDEQ.
func AcmeAccountID(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldAcmeAccountID, v))
}

// DNSProviderID applies equality check predicate on the "dns_provider_id" field. It's identical to DNSProviderIDEQ.
func DNSProviderID(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldDNSProviderID, v))
}

// CommonName applies equality check predicate on the "common_name" field. It's identical to CommonNameEQ.
func CommonName(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCommonName, v))
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationalUnit applies equality check predicate on the "organizational_unit" field. It's identical to OrganizationalUnitEQ.
func OrganizationalUnit(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldOrganizationalUnit, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCountry, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldState, v))
}

// Locality applies equality check predicate on the "locality" field. It's identical to LocalityEQ.
func Locality(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldLocality, v))
}

// StreetAddress applies equality check predicate on the "street_address" field. It's identical to StreetAddressEQ.
func StreetAddress(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldStreetAddress, v))
}

// Csr applies equality check predicate on the "csr" field. It's identical to CsrEQ.
func Csr(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCsr, v))
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldPrivateKey, v))
}

// Certificate applies equality check predicate on the "certificate" field. It's identical to CertificateEQ.
func Certificate(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCertificate, v))
}

// Fingerprint applies equality check predicate on the "fingerprint" field. It's identical to FingerprintEQ.
func Fingerprint(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldFingerprint, v))
}

// IssuedAt applies equality check predicate on the "issued_at" field. It's identical to IssuedAtEQ.
func IssuedAt(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldIssuedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldUpdatedBy, v))
}

// AcmeAccountIDEQ applies the EQ predicate on the "acme_account_id" field.
func AcmeAccountIDEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldAcmeAccountID, v))
}

// AcmeAccountIDNEQ applies the NEQ predicate on the "acme_account_id" field.
func AcmeAccountIDNEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldAcmeAccountID, v))
}

// AcmeAccountIDIn applies the In predicate on the "acme_account_id" field.
func AcmeAccountIDIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldAcmeAccountID, vs...))
}

// AcmeAccountIDNotIn applies the NotIn predicate on the "acme_account_id" field.
func AcmeAccountIDNotIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldAcmeAccountID, vs...))
}

// DNSProviderIDEQ applies the EQ predicate on the "dns_provider_id" field.
func DNSProviderIDEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldDNSProviderID, v))
}

// DNSProviderIDNEQ applies the NEQ predicate on the "dns_provider_id" field.
func DNSProviderIDNEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldDNSProviderID, v))
}

// DNSProviderIDIn applies the In predicate on the "dns_provider_id" field.
func DNSProviderIDIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldDNSProviderID, vs...))
}

// DNSProviderIDNotIn applies the NotIn predicate on the "dns_provider_id" field.
func DNSProviderIDNotIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldDNSProviderID, vs...))
}

// CommonNameEQ applies the EQ predicate on the "common_name" field.
func CommonNameEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCommonName, v))
}

// CommonNameNEQ applies the NEQ predicate on the "common_name" field.
func CommonNameNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCommonName, v))
}

// CommonNameIn applies the In predicate on the "common_name" field.
func CommonNameIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCommonName, vs...))
}

// CommonNameNotIn applies the NotIn predicate on the "common_name" field.
func CommonNameNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCommonName, vs...))
}

// CommonNameGT applies the GT predicate on the "common_name" field.
func CommonNameGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCommonName, v))
}

// CommonNameGTE applies the GTE predicate on the "common_name" field.
func CommonNameGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCommonName, v))
}

// CommonNameLT applies the LT predicate on the "common_name" field.
func CommonNameLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCommonName, v))
}

// CommonNameLTE applies the LTE predicate on the "common_name" field.
func CommonNameLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCommonName, v))
}

// CommonNameContains applies the Contains predicate on the "common_name" field.
func CommonNameContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldCommonName, v))
}

// CommonNameHasPrefix applies the HasPrefix predicate on the "common_name" field.
func CommonNameHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldCommonName, v))
}

// CommonNameHasSuffix applies the HasSuffix predicate on the "common_name" field.
func CommonNameHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldCommonName, v))
}

// CommonNameEqualFold applies the EqualFold predicate on the "common_name" field.
func CommonNameEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldCommonName, v))
}

// CommonNameContainsFold applies the ContainsFold predicate on the "common_name" field.
func CommonNameContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldCommonName, v))
}

// SubjectAlternativeNameIsNil applies the IsNil predicate on the "subject_alternative_name" field.
func SubjectAlternativeNameIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldSubjectAlternativeName))
}

// SubjectAlternativeNameNotNil applies the NotNil predicate on the "subject_alternative_name" field.
func SubjectAlternativeNameNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldSubjectAlternativeName))
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldOrganization, v))
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldOrganization, vs...))
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldOrganization, vs...))
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldOrganization, v))
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldOrganization, v))
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldOrganization, v))
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldOrganization, v))
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldOrganization, v))
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldOrganization, v))
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldOrganization, v))
}

// OrganizationIsNil applies the IsNil predicate on the "organization" field.
func OrganizationIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldOrganization))
}

// OrganizationNotNil applies the NotNil predicate on the "organization" field.
func OrganizationNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldOrganization))
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldOrganization, v))
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldOrganization, v))
}

// OrganizationalUnitEQ applies the EQ predicate on the "organizational_unit" field.
func OrganizationalUnitEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldOrganizationalUnit, v))
}

// OrganizationalUnitNEQ applies the NEQ predicate on the "organizational_unit" field.
func OrganizationalUnitNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldOrganizationalUnit, v))
}

// OrganizationalUnitIn applies the In predicate on the "organizational_unit" field.
func OrganizationalUnitIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldOrganizationalUnit, vs...))
}

// OrganizationalUnitNotIn applies the NotIn predicate on the "organizational_unit" field.
func OrganizationalUnitNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldOrganizationalUnit, vs...))
}

// OrganizationalUnitGT applies the GT predicate on the "organizational_unit" field.
func OrganizationalUnitGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldOrganizationalUnit, v))
}

// OrganizationalUnitGTE applies the GTE predicate on the "organizational_unit" field.
func OrganizationalUnitGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldOrganizationalUnit, v))
}

// OrganizationalUnitLT applies the LT predicate on the "organizational_unit" field.
func OrganizationalUnitLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldOrganizationalUnit, v))
}

// OrganizationalUnitLTE applies the LTE predicate on the "organizational_unit" field.
func OrganizationalUnitLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldOrganizationalUnit, v))
}

// OrganizationalUnitContains applies the Contains predicate on the "organizational_unit" field.
func OrganizationalUnitContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldOrganizationalUnit, v))
}

// OrganizationalUnitHasPrefix applies the HasPrefix predicate on the "organizational_unit" field.
func OrganizationalUnitHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldOrganizationalUnit, v))
}

// OrganizationalUnitHasSuffix applies the HasSuffix predicate on the "organizational_unit" field.
func OrganizationalUnitHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldOrganizationalUnit, v))
}

// OrganizationalUnitIsNil applies the IsNil predicate on the "organizational_unit" field.
func OrganizationalUnitIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldOrganizationalUnit))
}

// OrganizationalUnitNotNil applies the NotNil predicate on the "organizational_unit" field.
func OrganizationalUnitNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldOrganizationalUnit))
}

// OrganizationalUnitEqualFold applies the EqualFold predicate on the "organizational_unit" field.
func OrganizationalUnitEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldOrganizationalUnit, v))
}

// OrganizationalUnitContainsFold applies the ContainsFold predicate on the "organizational_unit" field.
func OrganizationalUnitContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldOrganizationalUnit, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldCountry, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldState, v))
}

// LocalityEQ applies the EQ predicate on the "locality" field.
func LocalityEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldLocality, v))
}

// LocalityNEQ applies the NEQ predicate on the "locality" field.
func LocalityNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldLocality, v))
}

// LocalityIn applies the In predicate on the "locality" field.
func LocalityIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldLocality, vs...))
}

// LocalityNotIn applies the NotIn predicate on the "locality" field.
func LocalityNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldLocality, vs...))
}

// LocalityGT applies the GT predicate on the "locality" field.
func LocalityGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldLocality, v))
}

// LocalityGTE applies the GTE predicate on the "locality" field.
func LocalityGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldLocality, v))
}

// LocalityLT applies the LT predicate on the "locality" field.
func LocalityLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldLocality, v))
}

// LocalityLTE applies the LTE predicate on the "locality" field.
func LocalityLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldLocality, v))
}

// LocalityContains applies the Contains predicate on the "locality" field.
func LocalityContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldLocality, v))
}

// LocalityHasPrefix applies the HasPrefix predicate on the "locality" field.
func LocalityHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldLocality, v))
}

// LocalityHasSuffix applies the HasSuffix predicate on the "locality" field.
func LocalityHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldLocality, v))
}

// LocalityIsNil applies the IsNil predicate on the "locality" field.
func LocalityIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldLocality))
}

// LocalityNotNil applies the NotNil predicate on the "locality" field.
func LocalityNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldLocality))
}

// LocalityEqualFold applies the EqualFold predicate on the "locality" field.
func LocalityEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldLocality, v))
}

// LocalityContainsFold applies the ContainsFold predicate on the "locality" field.
func LocalityContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldLocality, v))
}

// StreetAddressEQ applies the EQ predicate on the "street_address" field.
func StreetAddressEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldStreetAddress, v))
}

// StreetAddressNEQ applies the NEQ predicate on the "street_address" field.
func StreetAddressNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldStreetAddress, v))
}

// StreetAddressIn applies the In predicate on the "street_address" field.
func StreetAddressIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldStreetAddress, vs...))
}

// StreetAddressNotIn applies the NotIn predicate on the "street_address" field.
func StreetAddressNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldStreetAddress, vs...))
}

// StreetAddressGT applies the GT predicate on the "street_address" field.
func StreetAddressGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldStreetAddress, v))
}

// StreetAddressGTE applies the GTE predicate on the "street_address" field.
func StreetAddressGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldStreetAddress, v))
}

// StreetAddressLT applies the LT predicate on the "street_address" field.
func StreetAddressLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldStreetAddress, v))
}

// StreetAddressLTE applies the LTE predicate on the "street_address" field.
func StreetAddressLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldStreetAddress, v))
}

// StreetAddressContains applies the Contains predicate on the "street_address" field.
func StreetAddressContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldStreetAddress, v))
}

// StreetAddressHasPrefix applies the HasPrefix predicate on the "street_address" field.
func StreetAddressHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldStreetAddress, v))
}

// StreetAddressHasSuffix applies the HasSuffix predicate on the "street_address" field.
func StreetAddressHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldStreetAddress, v))
}

// StreetAddressIsNil applies the IsNil predicate on the "street_address" field.
func StreetAddressIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldStreetAddress))
}

// StreetAddressNotNil applies the NotNil predicate on the "street_address" field.
func StreetAddressNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldStreetAddress))
}

// StreetAddressEqualFold applies the EqualFold predicate on the "street_address" field.
func StreetAddressEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldStreetAddress, v))
}

// StreetAddressContainsFold applies the ContainsFold predicate on the "street_address" field.
func StreetAddressContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldStreetAddress, v))
}

// KeyTypeEQ applies the EQ predicate on the "key_type" field.
func KeyTypeEQ(v enum.KeyType) predicate.Certificate {
	vc := v
	return predicate.Certificate(sql.FieldEQ(FieldKeyType, vc))
}

// KeyTypeNEQ applies the NEQ predicate on the "key_type" field.
func KeyTypeNEQ(v enum.KeyType) predicate.Certificate {
	vc := v
	return predicate.Certificate(sql.FieldNEQ(FieldKeyType, vc))
}

// KeyTypeIn applies the In predicate on the "key_type" field.
func KeyTypeIn(vs ...enum.KeyType) predicate.Certificate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(sql.FieldIn(FieldKeyType, v...))
}

// KeyTypeNotIn applies the NotIn predicate on the "key_type" field.
func KeyTypeNotIn(vs ...enum.KeyType) predicate.Certificate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(sql.FieldNotIn(FieldKeyType, v...))
}

// CsrEQ applies the EQ predicate on the "csr" field.
func CsrEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCsr, v))
}

// CsrNEQ applies the NEQ predicate on the "csr" field.
func CsrNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCsr, v))
}

// CsrIn applies the In predicate on the "csr" field.
func CsrIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCsr, vs...))
}

// CsrNotIn applies the NotIn predicate on the "csr" field.
func CsrNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCsr, vs...))
}

// CsrGT applies the GT predicate on the "csr" field.
func CsrGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCsr, v))
}

// CsrGTE applies the GTE predicate on the "csr" field.
func CsrGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCsr, v))
}

// CsrLT applies the LT predicate on the "csr" field.
func CsrLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCsr, v))
}

// CsrLTE applies the LTE predicate on the "csr" field.
func CsrLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCsr, v))
}

// CsrContains applies the Contains predicate on the "csr" field.
func CsrContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldCsr, v))
}

// CsrHasPrefix applies the HasPrefix predicate on the "csr" field.
func CsrHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldCsr, v))
}

// CsrHasSuffix applies the HasSuffix predicate on the "csr" field.
func CsrHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldCsr, v))
}

// CsrIsNil applies the IsNil predicate on the "csr" field.
func CsrIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldCsr))
}

// CsrNotNil applies the NotNil predicate on the "csr" field.
func CsrNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldCsr))
}

// CsrEqualFold applies the EqualFold predicate on the "csr" field.
func CsrEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldCsr, v))
}

// CsrContainsFold applies the ContainsFold predicate on the "csr" field.
func CsrContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldCsr, v))
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldPrivateKey, v))
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldPrivateKey, v))
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldPrivateKey, v))
}

// PrivateKeyIsNil applies the IsNil predicate on the "private_key" field.
func PrivateKeyIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldPrivateKey))
}

// PrivateKeyNotNil applies the NotNil predicate on the "private_key" field.
func PrivateKeyNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldPrivateKey))
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldPrivateKey, v))
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldPrivateKey, v))
}

// CertificateEQ applies the EQ predicate on the "certificate" field.
func CertificateEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCertificate, v))
}

// CertificateNEQ applies the NEQ predicate on the "certificate" field.
func CertificateNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCertificate, v))
}

// CertificateIn applies the In predicate on the "certificate" field.
func CertificateIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCertificate, vs...))
}

// CertificateNotIn applies the NotIn predicate on the "certificate" field.
func CertificateNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCertificate, vs...))
}

// CertificateGT applies the GT predicate on the "certificate" field.
func CertificateGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCertificate, v))
}

// CertificateGTE applies the GTE predicate on the "certificate" field.
func CertificateGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCertificate, v))
}

// CertificateLT applies the LT predicate on the "certificate" field.
func CertificateLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCertificate, v))
}

// CertificateLTE applies the LTE predicate on the "certificate" field.
func CertificateLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCertificate, v))
}

// CertificateContains applies the Contains predicate on the "certificate" field.
func CertificateContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldCertificate, v))
}

// CertificateHasPrefix applies the HasPrefix predicate on the "certificate" field.
func CertificateHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldCertificate, v))
}

// CertificateHasSuffix applies the HasSuffix predicate on the "certificate" field.
func CertificateHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldCertificate, v))
}

// CertificateIsNil applies the IsNil predicate on the "certificate" field.
func CertificateIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldCertificate))
}

// CertificateNotNil applies the NotNil predicate on the "certificate" field.
func CertificateNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldCertificate))
}

// CertificateEqualFold applies the EqualFold predicate on the "certificate" field.
func CertificateEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldCertificate, v))
}

// CertificateContainsFold applies the ContainsFold predicate on the "certificate" field.
func CertificateContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldCertificate, v))
}

// CertificateChainIsNil applies the IsNil predicate on the "certificate_chain" field.
func CertificateChainIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldCertificateChain))
}

// CertificateChainNotNil applies the NotNil predicate on the "certificate_chain" field.
func CertificateChainNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldCertificateChain))
}

// FingerprintEQ applies the EQ predicate on the "fingerprint" field.
func FingerprintEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldFingerprint, v))
}

// FingerprintNEQ applies the NEQ predicate on the "fingerprint" field.
func FingerprintNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldFingerprint, v))
}

// FingerprintIn applies the In predicate on the "fingerprint" field.
func FingerprintIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldFingerprint, vs...))
}

// FingerprintNotIn applies the NotIn predicate on the "fingerprint" field.
func FingerprintNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldFingerprint, vs...))
}

// FingerprintGT applies the GT predicate on the "fingerprint" field.
func FingerprintGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldFingerprint, v))
}

// FingerprintGTE applies the GTE predicate on the "fingerprint" field.
func FingerprintGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldFingerprint, v))
}

// FingerprintLT applies the LT predicate on the "fingerprint" field.
func FingerprintLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldFingerprint, v))
}

// FingerprintLTE applies the LTE predicate on the "fingerprint" field.
func FingerprintLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldFingerprint, v))
}

// FingerprintContains applies the Contains predicate on the "fingerprint" field.
func FingerprintContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldFingerprint, v))
}

// FingerprintHasPrefix applies the HasPrefix predicate on the "fingerprint" field.
func FingerprintHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldFingerprint, v))
}

// FingerprintHasSuffix applies the HasSuffix predicate on the "fingerprint" field.
func FingerprintHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldFingerprint, v))
}

// FingerprintIsNil applies the IsNil predicate on the "fingerprint" field.
func FingerprintIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldFingerprint))
}

// FingerprintNotNil applies the NotNil predicate on the "fingerprint" field.
func FingerprintNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldFingerprint))
}

// FingerprintEqualFold applies the EqualFold predicate on the "fingerprint" field.
func FingerprintEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldFingerprint, v))
}

// FingerprintContainsFold applies the ContainsFold predicate on the "fingerprint" field.
func FingerprintContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldFingerprint, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enum.Status) predicate.Certificate {
	vc := v
	return predicate.Certificate(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enum.Status) predicate.Certificate {
	vc := v
	return predicate.Certificate(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enum.Status) predicate.Certificate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enum.Status) predicate.Certificate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Certificate(sql.FieldNotIn(FieldStatus, v...))
}

// IssuedAtEQ applies the EQ predicate on the "issued_at" field.
func IssuedAtEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldIssuedAt, v))
}

// IssuedAtNEQ applies the NEQ predicate on the "issued_at" field.
func IssuedAtNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldIssuedAt, v))
}

// IssuedAtIn applies the In predicate on the "issued_at" field.
func IssuedAtIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldIssuedAt, vs...))
}

// IssuedAtNotIn applies the NotIn predicate on the "issued_at" field.
func IssuedAtNotIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldIssuedAt, vs...))
}

// IssuedAtGT applies the GT predicate on the "issued_at" field.
func IssuedAtGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldIssuedAt, v))
}

// IssuedAtGTE applies the GTE predicate on the "issued_at" field.
func IssuedAtGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldIssuedAt, v))
}

// IssuedAtLT applies the LT predicate on the "issued_at" field.
func IssuedAtLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldIssuedAt, v))
}

// IssuedAtLTE applies the LTE predicate on the "issued_at" field.
func IssuedAtLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldIssuedAt, v))
}

// IssuedAtIsNil applies the IsNil predicate on the "issued_at" field.
func IssuedAtIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldIssuedAt))
}

// IssuedAtNotNil applies the NotNil predicate on the "issued_at" field.
func IssuedAtNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldIssuedAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldExpiresAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uuid.UUID) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldUpdatedBy))
}

// HasAcmeAccount applies the HasEdge predicate on the "acme_account" edge.
func HasAcmeAccount() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AcmeAccountTable, AcmeAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAcmeAccountWith applies the HasEdge predicate on the "acme_account" edge with a given conditions (other predicates).
func HasAcmeAccountWith(preds ...predicate.AcmeAccount) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := newAcmeAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDNSProvider applies the HasEdge predicate on the "dns_provider" edge.
func HasDNSProvider() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DNSProviderTable, DNSProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDNSProviderWith applies the HasEdge predicate on the "dns_provider" edge with a given conditions (other predicates).
func HasDNSProviderWith(preds ...predicate.DnsProvider) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := newDNSProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(sql.NotPredicates(p))
}
