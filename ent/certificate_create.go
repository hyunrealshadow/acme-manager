// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"
	"acme-manager/ent/schema/enum"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CertificateCreate is the builder for creating a Certificate entity.
type CertificateCreate struct {
	config
	mutation *CertificateMutation
	hooks    []Hook
}

// SetAcmeAccountID sets the "acme_account_id" field.
func (cc *CertificateCreate) SetAcmeAccountID(u uuid.UUID) *CertificateCreate {
	cc.mutation.SetAcmeAccountID(u)
	return cc
}

// SetDNSProviderID sets the "dns_provider_id" field.
func (cc *CertificateCreate) SetDNSProviderID(u uuid.UUID) *CertificateCreate {
	cc.mutation.SetDNSProviderID(u)
	return cc
}

// SetCommonName sets the "common_name" field.
func (cc *CertificateCreate) SetCommonName(s string) *CertificateCreate {
	cc.mutation.SetCommonName(s)
	return cc
}

// SetSubjectAlternativeName sets the "subject_alternative_name" field.
func (cc *CertificateCreate) SetSubjectAlternativeName(s []string) *CertificateCreate {
	cc.mutation.SetSubjectAlternativeName(s)
	return cc
}

// SetOrganization sets the "organization" field.
func (cc *CertificateCreate) SetOrganization(s string) *CertificateCreate {
	cc.mutation.SetOrganization(s)
	return cc
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableOrganization(s *string) *CertificateCreate {
	if s != nil {
		cc.SetOrganization(*s)
	}
	return cc
}

// SetOrganizationalUnit sets the "organizational_unit" field.
func (cc *CertificateCreate) SetOrganizationalUnit(s string) *CertificateCreate {
	cc.mutation.SetOrganizationalUnit(s)
	return cc
}

// SetNillableOrganizationalUnit sets the "organizational_unit" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableOrganizationalUnit(s *string) *CertificateCreate {
	if s != nil {
		cc.SetOrganizationalUnit(*s)
	}
	return cc
}

// SetCountry sets the "country" field.
func (cc *CertificateCreate) SetCountry(s string) *CertificateCreate {
	cc.mutation.SetCountry(s)
	return cc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableCountry(s *string) *CertificateCreate {
	if s != nil {
		cc.SetCountry(*s)
	}
	return cc
}

// SetState sets the "state" field.
func (cc *CertificateCreate) SetState(s string) *CertificateCreate {
	cc.mutation.SetState(s)
	return cc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableState(s *string) *CertificateCreate {
	if s != nil {
		cc.SetState(*s)
	}
	return cc
}

// SetLocality sets the "locality" field.
func (cc *CertificateCreate) SetLocality(s string) *CertificateCreate {
	cc.mutation.SetLocality(s)
	return cc
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableLocality(s *string) *CertificateCreate {
	if s != nil {
		cc.SetLocality(*s)
	}
	return cc
}

// SetStreetAddress sets the "street_address" field.
func (cc *CertificateCreate) SetStreetAddress(s string) *CertificateCreate {
	cc.mutation.SetStreetAddress(s)
	return cc
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableStreetAddress(s *string) *CertificateCreate {
	if s != nil {
		cc.SetStreetAddress(*s)
	}
	return cc
}

// SetKeyType sets the "key_type" field.
func (cc *CertificateCreate) SetKeyType(et enum.KeyType) *CertificateCreate {
	cc.mutation.SetKeyType(et)
	return cc
}

// SetCsr sets the "csr" field.
func (cc *CertificateCreate) SetCsr(s string) *CertificateCreate {
	cc.mutation.SetCsr(s)
	return cc
}

// SetNillableCsr sets the "csr" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableCsr(s *string) *CertificateCreate {
	if s != nil {
		cc.SetCsr(*s)
	}
	return cc
}

// SetPrivateKey sets the "private_key" field.
func (cc *CertificateCreate) SetPrivateKey(s string) *CertificateCreate {
	cc.mutation.SetPrivateKey(s)
	return cc
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (cc *CertificateCreate) SetNillablePrivateKey(s *string) *CertificateCreate {
	if s != nil {
		cc.SetPrivateKey(*s)
	}
	return cc
}

// SetCertificate sets the "certificate" field.
func (cc *CertificateCreate) SetCertificate(s string) *CertificateCreate {
	cc.mutation.SetCertificate(s)
	return cc
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableCertificate(s *string) *CertificateCreate {
	if s != nil {
		cc.SetCertificate(*s)
	}
	return cc
}

// SetCertificateChain sets the "certificate_chain" field.
func (cc *CertificateCreate) SetCertificateChain(s []string) *CertificateCreate {
	cc.mutation.SetCertificateChain(s)
	return cc
}

// SetFingerprint sets the "fingerprint" field.
func (cc *CertificateCreate) SetFingerprint(s string) *CertificateCreate {
	cc.mutation.SetFingerprint(s)
	return cc
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableFingerprint(s *string) *CertificateCreate {
	if s != nil {
		cc.SetFingerprint(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CertificateCreate) SetStatus(e enum.Status) *CertificateCreate {
	cc.mutation.SetStatus(e)
	return cc
}

// SetIssuedAt sets the "issued_at" field.
func (cc *CertificateCreate) SetIssuedAt(t time.Time) *CertificateCreate {
	cc.mutation.SetIssuedAt(t)
	return cc
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableIssuedAt(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetIssuedAt(*t)
	}
	return cc
}

// SetExpiresAt sets the "expires_at" field.
func (cc *CertificateCreate) SetExpiresAt(t time.Time) *CertificateCreate {
	cc.mutation.SetExpiresAt(t)
	return cc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableExpiresAt(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetExpiresAt(*t)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CertificateCreate) SetCreatedAt(t time.Time) *CertificateCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableCreatedAt(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CertificateCreate) SetCreatedBy(u uuid.UUID) *CertificateCreate {
	cc.mutation.SetCreatedBy(u)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CertificateCreate) SetUpdatedAt(t time.Time) *CertificateCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableUpdatedAt(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CertificateCreate) SetUpdatedBy(u uuid.UUID) *CertificateCreate {
	cc.mutation.SetUpdatedBy(u)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableUpdatedBy(u *uuid.UUID) *CertificateCreate {
	if u != nil {
		cc.SetUpdatedBy(*u)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CertificateCreate) SetID(u uuid.UUID) *CertificateCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableID(u *uuid.UUID) *CertificateCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetAcmeAccount sets the "acme_account" edge to the AcmeAccount entity.
func (cc *CertificateCreate) SetAcmeAccount(a *AcmeAccount) *CertificateCreate {
	return cc.SetAcmeAccountID(a.ID)
}

// SetDNSProvider sets the "dns_provider" edge to the DnsProvider entity.
func (cc *CertificateCreate) SetDNSProvider(d *DnsProvider) *CertificateCreate {
	return cc.SetDNSProviderID(d.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cc *CertificateCreate) Mutation() *CertificateMutation {
	return cc.mutation
}

// Save creates the Certificate in the database.
func (cc *CertificateCreate) Save(ctx context.Context) (*Certificate, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificateCreate) SaveX(ctx context.Context) *Certificate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CertificateCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := certificate.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := certificate.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificateCreate) check() error {
	if _, ok := cc.mutation.AcmeAccountID(); !ok {
		return &ValidationError{Name: "acme_account_id", err: errors.New(`ent: missing required field "Certificate.acme_account_id"`)}
	}
	if _, ok := cc.mutation.DNSProviderID(); !ok {
		return &ValidationError{Name: "dns_provider_id", err: errors.New(`ent: missing required field "Certificate.dns_provider_id"`)}
	}
	if _, ok := cc.mutation.CommonName(); !ok {
		return &ValidationError{Name: "common_name", err: errors.New(`ent: missing required field "Certificate.common_name"`)}
	}
	if v, ok := cc.mutation.CommonName(); ok {
		if err := certificate.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "common_name", err: fmt.Errorf(`ent: validator failed for field "Certificate.common_name": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Organization(); ok {
		if err := certificate.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "Certificate.organization": %w`, err)}
		}
	}
	if v, ok := cc.mutation.OrganizationalUnit(); ok {
		if err := certificate.OrganizationalUnitValidator(v); err != nil {
			return &ValidationError{Name: "organizational_unit", err: fmt.Errorf(`ent: validator failed for field "Certificate.organizational_unit": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Country(); ok {
		if err := certificate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Certificate.country": %w`, err)}
		}
	}
	if v, ok := cc.mutation.State(); ok {
		if err := certificate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Certificate.state": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Locality(); ok {
		if err := certificate.LocalityValidator(v); err != nil {
			return &ValidationError{Name: "locality", err: fmt.Errorf(`ent: validator failed for field "Certificate.locality": %w`, err)}
		}
	}
	if v, ok := cc.mutation.StreetAddress(); ok {
		if err := certificate.StreetAddressValidator(v); err != nil {
			return &ValidationError{Name: "street_address", err: fmt.Errorf(`ent: validator failed for field "Certificate.street_address": %w`, err)}
		}
	}
	if _, ok := cc.mutation.KeyType(); !ok {
		return &ValidationError{Name: "key_type", err: errors.New(`ent: missing required field "Certificate.key_type"`)}
	}
	if v, ok := cc.mutation.KeyType(); ok {
		if err := certificate.KeyTypeValidator(v); err != nil {
			return &ValidationError{Name: "key_type", err: fmt.Errorf(`ent: validator failed for field "Certificate.key_type": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Fingerprint(); ok {
		if err := certificate.FingerprintValidator(v); err != nil {
			return &ValidationError{Name: "fingerprint", err: fmt.Errorf(`ent: validator failed for field "Certificate.fingerprint": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Certificate.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := certificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Certificate.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Certificate.created_at"`)}
	}
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Certificate.created_by"`)}
	}
	if len(cc.mutation.AcmeAccountIDs()) == 0 {
		return &ValidationError{Name: "acme_account", err: errors.New(`ent: missing required edge "Certificate.acme_account"`)}
	}
	if len(cc.mutation.DNSProviderIDs()) == 0 {
		return &ValidationError{Name: "dns_provider", err: errors.New(`ent: missing required edge "Certificate.dns_provider"`)}
	}
	return nil
}

func (cc *CertificateCreate) sqlSave(ctx context.Context) (*Certificate, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificateCreate) createSpec() (*Certificate, *sqlgraph.CreateSpec) {
	var (
		_node = &Certificate{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certificate.Table, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CommonName(); ok {
		_spec.SetField(certificate.FieldCommonName, field.TypeString, value)
		_node.CommonName = value
	}
	if value, ok := cc.mutation.SubjectAlternativeName(); ok {
		_spec.SetField(certificate.FieldSubjectAlternativeName, field.TypeJSON, value)
		_node.SubjectAlternativeName = value
	}
	if value, ok := cc.mutation.Organization(); ok {
		_spec.SetField(certificate.FieldOrganization, field.TypeString, value)
		_node.Organization = &value
	}
	if value, ok := cc.mutation.OrganizationalUnit(); ok {
		_spec.SetField(certificate.FieldOrganizationalUnit, field.TypeString, value)
		_node.OrganizationalUnit = &value
	}
	if value, ok := cc.mutation.Country(); ok {
		_spec.SetField(certificate.FieldCountry, field.TypeString, value)
		_node.Country = &value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.SetField(certificate.FieldState, field.TypeString, value)
		_node.State = &value
	}
	if value, ok := cc.mutation.Locality(); ok {
		_spec.SetField(certificate.FieldLocality, field.TypeString, value)
		_node.Locality = &value
	}
	if value, ok := cc.mutation.StreetAddress(); ok {
		_spec.SetField(certificate.FieldStreetAddress, field.TypeString, value)
		_node.StreetAddress = &value
	}
	if value, ok := cc.mutation.KeyType(); ok {
		_spec.SetField(certificate.FieldKeyType, field.TypeEnum, value)
		_node.KeyType = value
	}
	if value, ok := cc.mutation.Csr(); ok {
		_spec.SetField(certificate.FieldCsr, field.TypeString, value)
		_node.Csr = &value
	}
	if value, ok := cc.mutation.PrivateKey(); ok {
		_spec.SetField(certificate.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = &value
	}
	if value, ok := cc.mutation.Certificate(); ok {
		_spec.SetField(certificate.FieldCertificate, field.TypeString, value)
		_node.Certificate = &value
	}
	if value, ok := cc.mutation.CertificateChain(); ok {
		_spec.SetField(certificate.FieldCertificateChain, field.TypeJSON, value)
		_node.CertificateChain = value
	}
	if value, ok := cc.mutation.Fingerprint(); ok {
		_spec.SetField(certificate.FieldFingerprint, field.TypeString, value)
		_node.Fingerprint = &value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(certificate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.IssuedAt(); ok {
		_spec.SetField(certificate.FieldIssuedAt, field.TypeTime, value)
		_node.IssuedAt = &value
	}
	if value, ok := cc.mutation.ExpiresAt(); ok {
		_spec.SetField(certificate.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(certificate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(certificate.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(certificate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(certificate.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if nodes := cc.mutation.AcmeAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.AcmeAccountTable,
			Columns: []string{certificate.AcmeAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AcmeAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DNSProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.DNSProviderTable,
			Columns: []string{certificate.DNSProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DNSProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificateCreateBulk is the builder for creating many Certificate entities in bulk.
type CertificateCreateBulk struct {
	config
	err      error
	builders []*CertificateCreate
}

// Save creates the Certificate entities in the database.
func (ccb *CertificateCreateBulk) Save(ctx context.Context) ([]*Certificate, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certificate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificateCreateBulk) SaveX(ctx context.Context) []*Certificate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
