// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"
	"acme-manager/ent/predicate"
	"acme-manager/ent/schema/enum"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CertificateUpdate is the builder for updating Certificate entities.
type CertificateUpdate struct {
	config
	hooks    []Hook
	mutation *CertificateMutation
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cu *CertificateUpdate) Where(ps ...predicate.Certificate) *CertificateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetAcmeAccountID sets the "acme_account_id" field.
func (cu *CertificateUpdate) SetAcmeAccountID(u uuid.UUID) *CertificateUpdate {
	cu.mutation.SetAcmeAccountID(u)
	return cu
}

// SetNillableAcmeAccountID sets the "acme_account_id" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableAcmeAccountID(u *uuid.UUID) *CertificateUpdate {
	if u != nil {
		cu.SetAcmeAccountID(*u)
	}
	return cu
}

// SetDNSProviderID sets the "dns_provider_id" field.
func (cu *CertificateUpdate) SetDNSProviderID(u uuid.UUID) *CertificateUpdate {
	cu.mutation.SetDNSProviderID(u)
	return cu
}

// SetNillableDNSProviderID sets the "dns_provider_id" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableDNSProviderID(u *uuid.UUID) *CertificateUpdate {
	if u != nil {
		cu.SetDNSProviderID(*u)
	}
	return cu
}

// SetCommonName sets the "common_name" field.
func (cu *CertificateUpdate) SetCommonName(s string) *CertificateUpdate {
	cu.mutation.SetCommonName(s)
	return cu
}

// SetNillableCommonName sets the "common_name" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCommonName(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetCommonName(*s)
	}
	return cu
}

// SetSubjectAlternativeName sets the "subject_alternative_name" field.
func (cu *CertificateUpdate) SetSubjectAlternativeName(s []string) *CertificateUpdate {
	cu.mutation.SetSubjectAlternativeName(s)
	return cu
}

// AppendSubjectAlternativeName appends s to the "subject_alternative_name" field.
func (cu *CertificateUpdate) AppendSubjectAlternativeName(s []string) *CertificateUpdate {
	cu.mutation.AppendSubjectAlternativeName(s)
	return cu
}

// ClearSubjectAlternativeName clears the value of the "subject_alternative_name" field.
func (cu *CertificateUpdate) ClearSubjectAlternativeName() *CertificateUpdate {
	cu.mutation.ClearSubjectAlternativeName()
	return cu
}

// SetOrganization sets the "organization" field.
func (cu *CertificateUpdate) SetOrganization(s string) *CertificateUpdate {
	cu.mutation.SetOrganization(s)
	return cu
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableOrganization(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetOrganization(*s)
	}
	return cu
}

// ClearOrganization clears the value of the "organization" field.
func (cu *CertificateUpdate) ClearOrganization() *CertificateUpdate {
	cu.mutation.ClearOrganization()
	return cu
}

// SetOrganizationalUnit sets the "organizational_unit" field.
func (cu *CertificateUpdate) SetOrganizationalUnit(s string) *CertificateUpdate {
	cu.mutation.SetOrganizationalUnit(s)
	return cu
}

// SetNillableOrganizationalUnit sets the "organizational_unit" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableOrganizationalUnit(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetOrganizationalUnit(*s)
	}
	return cu
}

// ClearOrganizationalUnit clears the value of the "organizational_unit" field.
func (cu *CertificateUpdate) ClearOrganizationalUnit() *CertificateUpdate {
	cu.mutation.ClearOrganizationalUnit()
	return cu
}

// SetCountry sets the "country" field.
func (cu *CertificateUpdate) SetCountry(s string) *CertificateUpdate {
	cu.mutation.SetCountry(s)
	return cu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCountry(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetCountry(*s)
	}
	return cu
}

// ClearCountry clears the value of the "country" field.
func (cu *CertificateUpdate) ClearCountry() *CertificateUpdate {
	cu.mutation.ClearCountry()
	return cu
}

// SetState sets the "state" field.
func (cu *CertificateUpdate) SetState(s string) *CertificateUpdate {
	cu.mutation.SetState(s)
	return cu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableState(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetState(*s)
	}
	return cu
}

// ClearState clears the value of the "state" field.
func (cu *CertificateUpdate) ClearState() *CertificateUpdate {
	cu.mutation.ClearState()
	return cu
}

// SetLocality sets the "locality" field.
func (cu *CertificateUpdate) SetLocality(s string) *CertificateUpdate {
	cu.mutation.SetLocality(s)
	return cu
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableLocality(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetLocality(*s)
	}
	return cu
}

// ClearLocality clears the value of the "locality" field.
func (cu *CertificateUpdate) ClearLocality() *CertificateUpdate {
	cu.mutation.ClearLocality()
	return cu
}

// SetStreetAddress sets the "street_address" field.
func (cu *CertificateUpdate) SetStreetAddress(s string) *CertificateUpdate {
	cu.mutation.SetStreetAddress(s)
	return cu
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableStreetAddress(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetStreetAddress(*s)
	}
	return cu
}

// ClearStreetAddress clears the value of the "street_address" field.
func (cu *CertificateUpdate) ClearStreetAddress() *CertificateUpdate {
	cu.mutation.ClearStreetAddress()
	return cu
}

// SetKeyType sets the "key_type" field.
func (cu *CertificateUpdate) SetKeyType(et enum.KeyType) *CertificateUpdate {
	cu.mutation.SetKeyType(et)
	return cu
}

// SetNillableKeyType sets the "key_type" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableKeyType(et *enum.KeyType) *CertificateUpdate {
	if et != nil {
		cu.SetKeyType(*et)
	}
	return cu
}

// SetCsr sets the "csr" field.
func (cu *CertificateUpdate) SetCsr(s string) *CertificateUpdate {
	cu.mutation.SetCsr(s)
	return cu
}

// SetNillableCsr sets the "csr" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCsr(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetCsr(*s)
	}
	return cu
}

// ClearCsr clears the value of the "csr" field.
func (cu *CertificateUpdate) ClearCsr() *CertificateUpdate {
	cu.mutation.ClearCsr()
	return cu
}

// SetPrivateKey sets the "private_key" field.
func (cu *CertificateUpdate) SetPrivateKey(s string) *CertificateUpdate {
	cu.mutation.SetPrivateKey(s)
	return cu
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillablePrivateKey(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetPrivateKey(*s)
	}
	return cu
}

// ClearPrivateKey clears the value of the "private_key" field.
func (cu *CertificateUpdate) ClearPrivateKey() *CertificateUpdate {
	cu.mutation.ClearPrivateKey()
	return cu
}

// SetCertificate sets the "certificate" field.
func (cu *CertificateUpdate) SetCertificate(s string) *CertificateUpdate {
	cu.mutation.SetCertificate(s)
	return cu
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCertificate(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetCertificate(*s)
	}
	return cu
}

// ClearCertificate clears the value of the "certificate" field.
func (cu *CertificateUpdate) ClearCertificate() *CertificateUpdate {
	cu.mutation.ClearCertificate()
	return cu
}

// SetCertificateChain sets the "certificate_chain" field.
func (cu *CertificateUpdate) SetCertificateChain(s []string) *CertificateUpdate {
	cu.mutation.SetCertificateChain(s)
	return cu
}

// AppendCertificateChain appends s to the "certificate_chain" field.
func (cu *CertificateUpdate) AppendCertificateChain(s []string) *CertificateUpdate {
	cu.mutation.AppendCertificateChain(s)
	return cu
}

// ClearCertificateChain clears the value of the "certificate_chain" field.
func (cu *CertificateUpdate) ClearCertificateChain() *CertificateUpdate {
	cu.mutation.ClearCertificateChain()
	return cu
}

// SetFingerprint sets the "fingerprint" field.
func (cu *CertificateUpdate) SetFingerprint(s string) *CertificateUpdate {
	cu.mutation.SetFingerprint(s)
	return cu
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableFingerprint(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetFingerprint(*s)
	}
	return cu
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (cu *CertificateUpdate) ClearFingerprint() *CertificateUpdate {
	cu.mutation.ClearFingerprint()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CertificateUpdate) SetStatus(e enum.Status) *CertificateUpdate {
	cu.mutation.SetStatus(e)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableStatus(e *enum.Status) *CertificateUpdate {
	if e != nil {
		cu.SetStatus(*e)
	}
	return cu
}

// SetIssuedAt sets the "issued_at" field.
func (cu *CertificateUpdate) SetIssuedAt(t time.Time) *CertificateUpdate {
	cu.mutation.SetIssuedAt(t)
	return cu
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableIssuedAt(t *time.Time) *CertificateUpdate {
	if t != nil {
		cu.SetIssuedAt(*t)
	}
	return cu
}

// ClearIssuedAt clears the value of the "issued_at" field.
func (cu *CertificateUpdate) ClearIssuedAt() *CertificateUpdate {
	cu.mutation.ClearIssuedAt()
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CertificateUpdate) SetExpiresAt(t time.Time) *CertificateUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableExpiresAt(t *time.Time) *CertificateUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cu *CertificateUpdate) ClearExpiresAt() *CertificateUpdate {
	cu.mutation.ClearExpiresAt()
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CertificateUpdate) SetCreatedBy(u uuid.UUID) *CertificateUpdate {
	cu.mutation.SetCreatedBy(u)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCreatedBy(u *uuid.UUID) *CertificateUpdate {
	if u != nil {
		cu.SetCreatedBy(*u)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CertificateUpdate) SetUpdatedAt(t time.Time) *CertificateUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableUpdatedAt(t *time.Time) *CertificateUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CertificateUpdate) ClearUpdatedAt() *CertificateUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CertificateUpdate) SetUpdatedBy(u uuid.UUID) *CertificateUpdate {
	cu.mutation.SetUpdatedBy(u)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableUpdatedBy(u *uuid.UUID) *CertificateUpdate {
	if u != nil {
		cu.SetUpdatedBy(*u)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CertificateUpdate) ClearUpdatedBy() *CertificateUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetAcmeAccount sets the "acme_account" edge to the AcmeAccount entity.
func (cu *CertificateUpdate) SetAcmeAccount(a *AcmeAccount) *CertificateUpdate {
	return cu.SetAcmeAccountID(a.ID)
}

// SetDNSProvider sets the "dns_provider" edge to the DnsProvider entity.
func (cu *CertificateUpdate) SetDNSProvider(d *DnsProvider) *CertificateUpdate {
	return cu.SetDNSProviderID(d.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cu *CertificateUpdate) Mutation() *CertificateMutation {
	return cu.mutation
}

// ClearAcmeAccount clears the "acme_account" edge to the AcmeAccount entity.
func (cu *CertificateUpdate) ClearAcmeAccount() *CertificateUpdate {
	cu.mutation.ClearAcmeAccount()
	return cu
}

// ClearDNSProvider clears the "dns_provider" edge to the DnsProvider entity.
func (cu *CertificateUpdate) ClearDNSProvider() *CertificateUpdate {
	cu.mutation.ClearDNSProvider()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertificateUpdate) check() error {
	if v, ok := cu.mutation.CommonName(); ok {
		if err := certificate.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "common_name", err: fmt.Errorf(`ent: validator failed for field "Certificate.common_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Organization(); ok {
		if err := certificate.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "Certificate.organization": %w`, err)}
		}
	}
	if v, ok := cu.mutation.OrganizationalUnit(); ok {
		if err := certificate.OrganizationalUnitValidator(v); err != nil {
			return &ValidationError{Name: "organizational_unit", err: fmt.Errorf(`ent: validator failed for field "Certificate.organizational_unit": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Country(); ok {
		if err := certificate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Certificate.country": %w`, err)}
		}
	}
	if v, ok := cu.mutation.State(); ok {
		if err := certificate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Certificate.state": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Locality(); ok {
		if err := certificate.LocalityValidator(v); err != nil {
			return &ValidationError{Name: "locality", err: fmt.Errorf(`ent: validator failed for field "Certificate.locality": %w`, err)}
		}
	}
	if v, ok := cu.mutation.StreetAddress(); ok {
		if err := certificate.StreetAddressValidator(v); err != nil {
			return &ValidationError{Name: "street_address", err: fmt.Errorf(`ent: validator failed for field "Certificate.street_address": %w`, err)}
		}
	}
	if v, ok := cu.mutation.KeyType(); ok {
		if err := certificate.KeyTypeValidator(v); err != nil {
			return &ValidationError{Name: "key_type", err: fmt.Errorf(`ent: validator failed for field "Certificate.key_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Fingerprint(); ok {
		if err := certificate.FingerprintValidator(v); err != nil {
			return &ValidationError{Name: "fingerprint", err: fmt.Errorf(`ent: validator failed for field "Certificate.fingerprint": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := certificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Certificate.status": %w`, err)}
		}
	}
	if cu.mutation.AcmeAccountCleared() && len(cu.mutation.AcmeAccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Certificate.acme_account"`)
	}
	if cu.mutation.DNSProviderCleared() && len(cu.mutation.DNSProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Certificate.dns_provider"`)
	}
	return nil
}

func (cu *CertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certificate.Table, certificate.Columns, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CommonName(); ok {
		_spec.SetField(certificate.FieldCommonName, field.TypeString, value)
	}
	if value, ok := cu.mutation.SubjectAlternativeName(); ok {
		_spec.SetField(certificate.FieldSubjectAlternativeName, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedSubjectAlternativeName(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, certificate.FieldSubjectAlternativeName, value)
		})
	}
	if cu.mutation.SubjectAlternativeNameCleared() {
		_spec.ClearField(certificate.FieldSubjectAlternativeName, field.TypeJSON)
	}
	if value, ok := cu.mutation.Organization(); ok {
		_spec.SetField(certificate.FieldOrganization, field.TypeString, value)
	}
	if cu.mutation.OrganizationCleared() {
		_spec.ClearField(certificate.FieldOrganization, field.TypeString)
	}
	if value, ok := cu.mutation.OrganizationalUnit(); ok {
		_spec.SetField(certificate.FieldOrganizationalUnit, field.TypeString, value)
	}
	if cu.mutation.OrganizationalUnitCleared() {
		_spec.ClearField(certificate.FieldOrganizationalUnit, field.TypeString)
	}
	if value, ok := cu.mutation.Country(); ok {
		_spec.SetField(certificate.FieldCountry, field.TypeString, value)
	}
	if cu.mutation.CountryCleared() {
		_spec.ClearField(certificate.FieldCountry, field.TypeString)
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.SetField(certificate.FieldState, field.TypeString, value)
	}
	if cu.mutation.StateCleared() {
		_spec.ClearField(certificate.FieldState, field.TypeString)
	}
	if value, ok := cu.mutation.Locality(); ok {
		_spec.SetField(certificate.FieldLocality, field.TypeString, value)
	}
	if cu.mutation.LocalityCleared() {
		_spec.ClearField(certificate.FieldLocality, field.TypeString)
	}
	if value, ok := cu.mutation.StreetAddress(); ok {
		_spec.SetField(certificate.FieldStreetAddress, field.TypeString, value)
	}
	if cu.mutation.StreetAddressCleared() {
		_spec.ClearField(certificate.FieldStreetAddress, field.TypeString)
	}
	if value, ok := cu.mutation.KeyType(); ok {
		_spec.SetField(certificate.FieldKeyType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Csr(); ok {
		_spec.SetField(certificate.FieldCsr, field.TypeString, value)
	}
	if cu.mutation.CsrCleared() {
		_spec.ClearField(certificate.FieldCsr, field.TypeString)
	}
	if value, ok := cu.mutation.PrivateKey(); ok {
		_spec.SetField(certificate.FieldPrivateKey, field.TypeString, value)
	}
	if cu.mutation.PrivateKeyCleared() {
		_spec.ClearField(certificate.FieldPrivateKey, field.TypeString)
	}
	if value, ok := cu.mutation.Certificate(); ok {
		_spec.SetField(certificate.FieldCertificate, field.TypeString, value)
	}
	if cu.mutation.CertificateCleared() {
		_spec.ClearField(certificate.FieldCertificate, field.TypeString)
	}
	if value, ok := cu.mutation.CertificateChain(); ok {
		_spec.SetField(certificate.FieldCertificateChain, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedCertificateChain(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, certificate.FieldCertificateChain, value)
		})
	}
	if cu.mutation.CertificateChainCleared() {
		_spec.ClearField(certificate.FieldCertificateChain, field.TypeJSON)
	}
	if value, ok := cu.mutation.Fingerprint(); ok {
		_spec.SetField(certificate.FieldFingerprint, field.TypeString, value)
	}
	if cu.mutation.FingerprintCleared() {
		_spec.ClearField(certificate.FieldFingerprint, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(certificate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.IssuedAt(); ok {
		_spec.SetField(certificate.FieldIssuedAt, field.TypeTime, value)
	}
	if cu.mutation.IssuedAtCleared() {
		_spec.ClearField(certificate.FieldIssuedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(certificate.FieldExpiresAt, field.TypeTime, value)
	}
	if cu.mutation.ExpiresAtCleared() {
		_spec.ClearField(certificate.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(certificate.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(certificate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(certificate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(certificate.FieldUpdatedBy, field.TypeUUID, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(certificate.FieldUpdatedBy, field.TypeUUID)
	}
	if cu.mutation.AcmeAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.AcmeAccountTable,
			Columns: []string{certificate.AcmeAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AcmeAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.AcmeAccountTable,
			Columns: []string{certificate.AcmeAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DNSProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.DNSProviderTable,
			Columns: []string{certificate.DNSProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsprovider.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DNSProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.DNSProviderTable,
			Columns: []string{certificate.DNSProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertificateUpdateOne is the builder for updating a single Certificate entity.
type CertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificateMutation
}

// SetAcmeAccountID sets the "acme_account_id" field.
func (cuo *CertificateUpdateOne) SetAcmeAccountID(u uuid.UUID) *CertificateUpdateOne {
	cuo.mutation.SetAcmeAccountID(u)
	return cuo
}

// SetNillableAcmeAccountID sets the "acme_account_id" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableAcmeAccountID(u *uuid.UUID) *CertificateUpdateOne {
	if u != nil {
		cuo.SetAcmeAccountID(*u)
	}
	return cuo
}

// SetDNSProviderID sets the "dns_provider_id" field.
func (cuo *CertificateUpdateOne) SetDNSProviderID(u uuid.UUID) *CertificateUpdateOne {
	cuo.mutation.SetDNSProviderID(u)
	return cuo
}

// SetNillableDNSProviderID sets the "dns_provider_id" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableDNSProviderID(u *uuid.UUID) *CertificateUpdateOne {
	if u != nil {
		cuo.SetDNSProviderID(*u)
	}
	return cuo
}

// SetCommonName sets the "common_name" field.
func (cuo *CertificateUpdateOne) SetCommonName(s string) *CertificateUpdateOne {
	cuo.mutation.SetCommonName(s)
	return cuo
}

// SetNillableCommonName sets the "common_name" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCommonName(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetCommonName(*s)
	}
	return cuo
}

// SetSubjectAlternativeName sets the "subject_alternative_name" field.
func (cuo *CertificateUpdateOne) SetSubjectAlternativeName(s []string) *CertificateUpdateOne {
	cuo.mutation.SetSubjectAlternativeName(s)
	return cuo
}

// AppendSubjectAlternativeName appends s to the "subject_alternative_name" field.
func (cuo *CertificateUpdateOne) AppendSubjectAlternativeName(s []string) *CertificateUpdateOne {
	cuo.mutation.AppendSubjectAlternativeName(s)
	return cuo
}

// ClearSubjectAlternativeName clears the value of the "subject_alternative_name" field.
func (cuo *CertificateUpdateOne) ClearSubjectAlternativeName() *CertificateUpdateOne {
	cuo.mutation.ClearSubjectAlternativeName()
	return cuo
}

// SetOrganization sets the "organization" field.
func (cuo *CertificateUpdateOne) SetOrganization(s string) *CertificateUpdateOne {
	cuo.mutation.SetOrganization(s)
	return cuo
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableOrganization(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetOrganization(*s)
	}
	return cuo
}

// ClearOrganization clears the value of the "organization" field.
func (cuo *CertificateUpdateOne) ClearOrganization() *CertificateUpdateOne {
	cuo.mutation.ClearOrganization()
	return cuo
}

// SetOrganizationalUnit sets the "organizational_unit" field.
func (cuo *CertificateUpdateOne) SetOrganizationalUnit(s string) *CertificateUpdateOne {
	cuo.mutation.SetOrganizationalUnit(s)
	return cuo
}

// SetNillableOrganizationalUnit sets the "organizational_unit" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableOrganizationalUnit(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetOrganizationalUnit(*s)
	}
	return cuo
}

// ClearOrganizationalUnit clears the value of the "organizational_unit" field.
func (cuo *CertificateUpdateOne) ClearOrganizationalUnit() *CertificateUpdateOne {
	cuo.mutation.ClearOrganizationalUnit()
	return cuo
}

// SetCountry sets the "country" field.
func (cuo *CertificateUpdateOne) SetCountry(s string) *CertificateUpdateOne {
	cuo.mutation.SetCountry(s)
	return cuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCountry(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetCountry(*s)
	}
	return cuo
}

// ClearCountry clears the value of the "country" field.
func (cuo *CertificateUpdateOne) ClearCountry() *CertificateUpdateOne {
	cuo.mutation.ClearCountry()
	return cuo
}

// SetState sets the "state" field.
func (cuo *CertificateUpdateOne) SetState(s string) *CertificateUpdateOne {
	cuo.mutation.SetState(s)
	return cuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableState(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetState(*s)
	}
	return cuo
}

// ClearState clears the value of the "state" field.
func (cuo *CertificateUpdateOne) ClearState() *CertificateUpdateOne {
	cuo.mutation.ClearState()
	return cuo
}

// SetLocality sets the "locality" field.
func (cuo *CertificateUpdateOne) SetLocality(s string) *CertificateUpdateOne {
	cuo.mutation.SetLocality(s)
	return cuo
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableLocality(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetLocality(*s)
	}
	return cuo
}

// ClearLocality clears the value of the "locality" field.
func (cuo *CertificateUpdateOne) ClearLocality() *CertificateUpdateOne {
	cuo.mutation.ClearLocality()
	return cuo
}

// SetStreetAddress sets the "street_address" field.
func (cuo *CertificateUpdateOne) SetStreetAddress(s string) *CertificateUpdateOne {
	cuo.mutation.SetStreetAddress(s)
	return cuo
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableStreetAddress(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetStreetAddress(*s)
	}
	return cuo
}

// ClearStreetAddress clears the value of the "street_address" field.
func (cuo *CertificateUpdateOne) ClearStreetAddress() *CertificateUpdateOne {
	cuo.mutation.ClearStreetAddress()
	return cuo
}

// SetKeyType sets the "key_type" field.
func (cuo *CertificateUpdateOne) SetKeyType(et enum.KeyType) *CertificateUpdateOne {
	cuo.mutation.SetKeyType(et)
	return cuo
}

// SetNillableKeyType sets the "key_type" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableKeyType(et *enum.KeyType) *CertificateUpdateOne {
	if et != nil {
		cuo.SetKeyType(*et)
	}
	return cuo
}

// SetCsr sets the "csr" field.
func (cuo *CertificateUpdateOne) SetCsr(s string) *CertificateUpdateOne {
	cuo.mutation.SetCsr(s)
	return cuo
}

// SetNillableCsr sets the "csr" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCsr(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetCsr(*s)
	}
	return cuo
}

// ClearCsr clears the value of the "csr" field.
func (cuo *CertificateUpdateOne) ClearCsr() *CertificateUpdateOne {
	cuo.mutation.ClearCsr()
	return cuo
}

// SetPrivateKey sets the "private_key" field.
func (cuo *CertificateUpdateOne) SetPrivateKey(s string) *CertificateUpdateOne {
	cuo.mutation.SetPrivateKey(s)
	return cuo
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillablePrivateKey(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetPrivateKey(*s)
	}
	return cuo
}

// ClearPrivateKey clears the value of the "private_key" field.
func (cuo *CertificateUpdateOne) ClearPrivateKey() *CertificateUpdateOne {
	cuo.mutation.ClearPrivateKey()
	return cuo
}

// SetCertificate sets the "certificate" field.
func (cuo *CertificateUpdateOne) SetCertificate(s string) *CertificateUpdateOne {
	cuo.mutation.SetCertificate(s)
	return cuo
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCertificate(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetCertificate(*s)
	}
	return cuo
}

// ClearCertificate clears the value of the "certificate" field.
func (cuo *CertificateUpdateOne) ClearCertificate() *CertificateUpdateOne {
	cuo.mutation.ClearCertificate()
	return cuo
}

// SetCertificateChain sets the "certificate_chain" field.
func (cuo *CertificateUpdateOne) SetCertificateChain(s []string) *CertificateUpdateOne {
	cuo.mutation.SetCertificateChain(s)
	return cuo
}

// AppendCertificateChain appends s to the "certificate_chain" field.
func (cuo *CertificateUpdateOne) AppendCertificateChain(s []string) *CertificateUpdateOne {
	cuo.mutation.AppendCertificateChain(s)
	return cuo
}

// ClearCertificateChain clears the value of the "certificate_chain" field.
func (cuo *CertificateUpdateOne) ClearCertificateChain() *CertificateUpdateOne {
	cuo.mutation.ClearCertificateChain()
	return cuo
}

// SetFingerprint sets the "fingerprint" field.
func (cuo *CertificateUpdateOne) SetFingerprint(s string) *CertificateUpdateOne {
	cuo.mutation.SetFingerprint(s)
	return cuo
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableFingerprint(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetFingerprint(*s)
	}
	return cuo
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (cuo *CertificateUpdateOne) ClearFingerprint() *CertificateUpdateOne {
	cuo.mutation.ClearFingerprint()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CertificateUpdateOne) SetStatus(e enum.Status) *CertificateUpdateOne {
	cuo.mutation.SetStatus(e)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableStatus(e *enum.Status) *CertificateUpdateOne {
	if e != nil {
		cuo.SetStatus(*e)
	}
	return cuo
}

// SetIssuedAt sets the "issued_at" field.
func (cuo *CertificateUpdateOne) SetIssuedAt(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetIssuedAt(t)
	return cuo
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableIssuedAt(t *time.Time) *CertificateUpdateOne {
	if t != nil {
		cuo.SetIssuedAt(*t)
	}
	return cuo
}

// ClearIssuedAt clears the value of the "issued_at" field.
func (cuo *CertificateUpdateOne) ClearIssuedAt() *CertificateUpdateOne {
	cuo.mutation.ClearIssuedAt()
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CertificateUpdateOne) SetExpiresAt(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableExpiresAt(t *time.Time) *CertificateUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cuo *CertificateUpdateOne) ClearExpiresAt() *CertificateUpdateOne {
	cuo.mutation.ClearExpiresAt()
	return cuo
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CertificateUpdateOne) SetCreatedBy(u uuid.UUID) *CertificateUpdateOne {
	cuo.mutation.SetCreatedBy(u)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *CertificateUpdateOne {
	if u != nil {
		cuo.SetCreatedBy(*u)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CertificateUpdateOne) SetUpdatedAt(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableUpdatedAt(t *time.Time) *CertificateUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CertificateUpdateOne) ClearUpdatedAt() *CertificateUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CertificateUpdateOne) SetUpdatedBy(u uuid.UUID) *CertificateUpdateOne {
	cuo.mutation.SetUpdatedBy(u)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *CertificateUpdateOne {
	if u != nil {
		cuo.SetUpdatedBy(*u)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CertificateUpdateOne) ClearUpdatedBy() *CertificateUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetAcmeAccount sets the "acme_account" edge to the AcmeAccount entity.
func (cuo *CertificateUpdateOne) SetAcmeAccount(a *AcmeAccount) *CertificateUpdateOne {
	return cuo.SetAcmeAccountID(a.ID)
}

// SetDNSProvider sets the "dns_provider" edge to the DnsProvider entity.
func (cuo *CertificateUpdateOne) SetDNSProvider(d *DnsProvider) *CertificateUpdateOne {
	return cuo.SetDNSProviderID(d.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cuo *CertificateUpdateOne) Mutation() *CertificateMutation {
	return cuo.mutation
}

// ClearAcmeAccount clears the "acme_account" edge to the AcmeAccount entity.
func (cuo *CertificateUpdateOne) ClearAcmeAccount() *CertificateUpdateOne {
	cuo.mutation.ClearAcmeAccount()
	return cuo
}

// ClearDNSProvider clears the "dns_provider" edge to the DnsProvider entity.
func (cuo *CertificateUpdateOne) ClearDNSProvider() *CertificateUpdateOne {
	cuo.mutation.ClearDNSProvider()
	return cuo
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cuo *CertificateUpdateOne) Where(ps ...predicate.Certificate) *CertificateUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificateUpdateOne) Select(field string, fields ...string) *CertificateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certificate entity.
func (cuo *CertificateUpdateOne) Save(ctx context.Context) (*Certificate, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificateUpdateOne) SaveX(ctx context.Context) *Certificate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertificateUpdateOne) check() error {
	if v, ok := cuo.mutation.CommonName(); ok {
		if err := certificate.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "common_name", err: fmt.Errorf(`ent: validator failed for field "Certificate.common_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Organization(); ok {
		if err := certificate.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "Certificate.organization": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.OrganizationalUnit(); ok {
		if err := certificate.OrganizationalUnitValidator(v); err != nil {
			return &ValidationError{Name: "organizational_unit", err: fmt.Errorf(`ent: validator failed for field "Certificate.organizational_unit": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Country(); ok {
		if err := certificate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Certificate.country": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.State(); ok {
		if err := certificate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Certificate.state": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Locality(); ok {
		if err := certificate.LocalityValidator(v); err != nil {
			return &ValidationError{Name: "locality", err: fmt.Errorf(`ent: validator failed for field "Certificate.locality": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.StreetAddress(); ok {
		if err := certificate.StreetAddressValidator(v); err != nil {
			return &ValidationError{Name: "street_address", err: fmt.Errorf(`ent: validator failed for field "Certificate.street_address": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.KeyType(); ok {
		if err := certificate.KeyTypeValidator(v); err != nil {
			return &ValidationError{Name: "key_type", err: fmt.Errorf(`ent: validator failed for field "Certificate.key_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Fingerprint(); ok {
		if err := certificate.FingerprintValidator(v); err != nil {
			return &ValidationError{Name: "fingerprint", err: fmt.Errorf(`ent: validator failed for field "Certificate.fingerprint": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := certificate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Certificate.status": %w`, err)}
		}
	}
	if cuo.mutation.AcmeAccountCleared() && len(cuo.mutation.AcmeAccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Certificate.acme_account"`)
	}
	if cuo.mutation.DNSProviderCleared() && len(cuo.mutation.DNSProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Certificate.dns_provider"`)
	}
	return nil
}

func (cuo *CertificateUpdateOne) sqlSave(ctx context.Context) (_node *Certificate, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certificate.Table, certificate.Columns, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Certificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificate.FieldID)
		for _, f := range fields {
			if !certificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CommonName(); ok {
		_spec.SetField(certificate.FieldCommonName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SubjectAlternativeName(); ok {
		_spec.SetField(certificate.FieldSubjectAlternativeName, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedSubjectAlternativeName(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, certificate.FieldSubjectAlternativeName, value)
		})
	}
	if cuo.mutation.SubjectAlternativeNameCleared() {
		_spec.ClearField(certificate.FieldSubjectAlternativeName, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Organization(); ok {
		_spec.SetField(certificate.FieldOrganization, field.TypeString, value)
	}
	if cuo.mutation.OrganizationCleared() {
		_spec.ClearField(certificate.FieldOrganization, field.TypeString)
	}
	if value, ok := cuo.mutation.OrganizationalUnit(); ok {
		_spec.SetField(certificate.FieldOrganizationalUnit, field.TypeString, value)
	}
	if cuo.mutation.OrganizationalUnitCleared() {
		_spec.ClearField(certificate.FieldOrganizationalUnit, field.TypeString)
	}
	if value, ok := cuo.mutation.Country(); ok {
		_spec.SetField(certificate.FieldCountry, field.TypeString, value)
	}
	if cuo.mutation.CountryCleared() {
		_spec.ClearField(certificate.FieldCountry, field.TypeString)
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.SetField(certificate.FieldState, field.TypeString, value)
	}
	if cuo.mutation.StateCleared() {
		_spec.ClearField(certificate.FieldState, field.TypeString)
	}
	if value, ok := cuo.mutation.Locality(); ok {
		_spec.SetField(certificate.FieldLocality, field.TypeString, value)
	}
	if cuo.mutation.LocalityCleared() {
		_spec.ClearField(certificate.FieldLocality, field.TypeString)
	}
	if value, ok := cuo.mutation.StreetAddress(); ok {
		_spec.SetField(certificate.FieldStreetAddress, field.TypeString, value)
	}
	if cuo.mutation.StreetAddressCleared() {
		_spec.ClearField(certificate.FieldStreetAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.KeyType(); ok {
		_spec.SetField(certificate.FieldKeyType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Csr(); ok {
		_spec.SetField(certificate.FieldCsr, field.TypeString, value)
	}
	if cuo.mutation.CsrCleared() {
		_spec.ClearField(certificate.FieldCsr, field.TypeString)
	}
	if value, ok := cuo.mutation.PrivateKey(); ok {
		_spec.SetField(certificate.FieldPrivateKey, field.TypeString, value)
	}
	if cuo.mutation.PrivateKeyCleared() {
		_spec.ClearField(certificate.FieldPrivateKey, field.TypeString)
	}
	if value, ok := cuo.mutation.Certificate(); ok {
		_spec.SetField(certificate.FieldCertificate, field.TypeString, value)
	}
	if cuo.mutation.CertificateCleared() {
		_spec.ClearField(certificate.FieldCertificate, field.TypeString)
	}
	if value, ok := cuo.mutation.CertificateChain(); ok {
		_spec.SetField(certificate.FieldCertificateChain, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedCertificateChain(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, certificate.FieldCertificateChain, value)
		})
	}
	if cuo.mutation.CertificateChainCleared() {
		_spec.ClearField(certificate.FieldCertificateChain, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Fingerprint(); ok {
		_spec.SetField(certificate.FieldFingerprint, field.TypeString, value)
	}
	if cuo.mutation.FingerprintCleared() {
		_spec.ClearField(certificate.FieldFingerprint, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(certificate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.IssuedAt(); ok {
		_spec.SetField(certificate.FieldIssuedAt, field.TypeTime, value)
	}
	if cuo.mutation.IssuedAtCleared() {
		_spec.ClearField(certificate.FieldIssuedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(certificate.FieldExpiresAt, field.TypeTime, value)
	}
	if cuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(certificate.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(certificate.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(certificate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(certificate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(certificate.FieldUpdatedBy, field.TypeUUID, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(certificate.FieldUpdatedBy, field.TypeUUID)
	}
	if cuo.mutation.AcmeAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.AcmeAccountTable,
			Columns: []string{certificate.AcmeAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AcmeAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.AcmeAccountTable,
			Columns: []string{certificate.AcmeAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(acmeaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DNSProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.DNSProviderTable,
			Columns: []string{certificate.DNSProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsprovider.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DNSProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.DNSProviderTable,
			Columns: []string{certificate.DNSProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Certificate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
