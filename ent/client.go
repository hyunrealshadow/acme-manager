// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"acme-manager/ent/migrate"

	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AcmeAccount is the client for interacting with the AcmeAccount builders.
	AcmeAccount *AcmeAccountClient
	// AcmeServer is the client for interacting with the AcmeServer builders.
	AcmeServer *AcmeServerClient
	// Certificate is the client for interacting with the Certificate builders.
	Certificate *CertificateClient
	// DnsProvider is the client for interacting with the DnsProvider builders.
	DnsProvider *DnsProviderClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AcmeAccount = NewAcmeAccountClient(c.config)
	c.AcmeServer = NewAcmeServerClient(c.config)
	c.Certificate = NewCertificateClient(c.config)
	c.DnsProvider = NewDnsProviderClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AcmeAccount: NewAcmeAccountClient(cfg),
		AcmeServer:  NewAcmeServerClient(cfg),
		Certificate: NewCertificateClient(cfg),
		DnsProvider: NewDnsProviderClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AcmeAccount: NewAcmeAccountClient(cfg),
		AcmeServer:  NewAcmeServerClient(cfg),
		Certificate: NewCertificateClient(cfg),
		DnsProvider: NewDnsProviderClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AcmeAccount.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AcmeAccount.Use(hooks...)
	c.AcmeServer.Use(hooks...)
	c.Certificate.Use(hooks...)
	c.DnsProvider.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AcmeAccount.Intercept(interceptors...)
	c.AcmeServer.Intercept(interceptors...)
	c.Certificate.Intercept(interceptors...)
	c.DnsProvider.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AcmeAccountMutation:
		return c.AcmeAccount.mutate(ctx, m)
	case *AcmeServerMutation:
		return c.AcmeServer.mutate(ctx, m)
	case *CertificateMutation:
		return c.Certificate.mutate(ctx, m)
	case *DnsProviderMutation:
		return c.DnsProvider.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AcmeAccountClient is a client for the AcmeAccount schema.
type AcmeAccountClient struct {
	config
}

// NewAcmeAccountClient returns a client for the AcmeAccount from the given config.
func NewAcmeAccountClient(c config) *AcmeAccountClient {
	return &AcmeAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `acmeaccount.Hooks(f(g(h())))`.
func (c *AcmeAccountClient) Use(hooks ...Hook) {
	c.hooks.AcmeAccount = append(c.hooks.AcmeAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `acmeaccount.Intercept(f(g(h())))`.
func (c *AcmeAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.AcmeAccount = append(c.inters.AcmeAccount, interceptors...)
}

// Create returns a builder for creating a AcmeAccount entity.
func (c *AcmeAccountClient) Create() *AcmeAccountCreate {
	mutation := newAcmeAccountMutation(c.config, OpCreate)
	return &AcmeAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AcmeAccount entities.
func (c *AcmeAccountClient) CreateBulk(builders ...*AcmeAccountCreate) *AcmeAccountCreateBulk {
	return &AcmeAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AcmeAccountClient) MapCreateBulk(slice any, setFunc func(*AcmeAccountCreate, int)) *AcmeAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AcmeAccountCreateBulk{err: fmt.Errorf("calling to AcmeAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AcmeAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AcmeAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AcmeAccount.
func (c *AcmeAccountClient) Update() *AcmeAccountUpdate {
	mutation := newAcmeAccountMutation(c.config, OpUpdate)
	return &AcmeAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AcmeAccountClient) UpdateOne(aa *AcmeAccount) *AcmeAccountUpdateOne {
	mutation := newAcmeAccountMutation(c.config, OpUpdateOne, withAcmeAccount(aa))
	return &AcmeAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AcmeAccountClient) UpdateOneID(id uuid.UUID) *AcmeAccountUpdateOne {
	mutation := newAcmeAccountMutation(c.config, OpUpdateOne, withAcmeAccountID(id))
	return &AcmeAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AcmeAccount.
func (c *AcmeAccountClient) Delete() *AcmeAccountDelete {
	mutation := newAcmeAccountMutation(c.config, OpDelete)
	return &AcmeAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AcmeAccountClient) DeleteOne(aa *AcmeAccount) *AcmeAccountDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AcmeAccountClient) DeleteOneID(id uuid.UUID) *AcmeAccountDeleteOne {
	builder := c.Delete().Where(acmeaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AcmeAccountDeleteOne{builder}
}

// Query returns a query builder for AcmeAccount.
func (c *AcmeAccountClient) Query() *AcmeAccountQuery {
	return &AcmeAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAcmeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a AcmeAccount entity by its id.
func (c *AcmeAccountClient) Get(ctx context.Context, id uuid.UUID) (*AcmeAccount, error) {
	return c.Query().Where(acmeaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AcmeAccountClient) GetX(ctx context.Context, id uuid.UUID) *AcmeAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCertificates queries the certificates edge of a AcmeAccount.
func (c *AcmeAccountClient) QueryCertificates(aa *AcmeAccount) *CertificateQuery {
	query := (&CertificateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(acmeaccount.Table, acmeaccount.FieldID, id),
			sqlgraph.To(certificate.Table, certificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, acmeaccount.CertificatesTable, acmeaccount.CertificatesColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAcmeServer queries the acme_server edge of a AcmeAccount.
func (c *AcmeAccountClient) QueryAcmeServer(aa *AcmeAccount) *AcmeServerQuery {
	query := (&AcmeServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(acmeaccount.Table, acmeaccount.FieldID, id),
			sqlgraph.To(acmeserver.Table, acmeserver.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, acmeaccount.AcmeServerTable, acmeaccount.AcmeServerColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AcmeAccountClient) Hooks() []Hook {
	return c.hooks.AcmeAccount
}

// Interceptors returns the client interceptors.
func (c *AcmeAccountClient) Interceptors() []Interceptor {
	return c.inters.AcmeAccount
}

func (c *AcmeAccountClient) mutate(ctx context.Context, m *AcmeAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AcmeAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AcmeAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AcmeAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AcmeAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AcmeAccount mutation op: %q", m.Op())
	}
}

// AcmeServerClient is a client for the AcmeServer schema.
type AcmeServerClient struct {
	config
}

// NewAcmeServerClient returns a client for the AcmeServer from the given config.
func NewAcmeServerClient(c config) *AcmeServerClient {
	return &AcmeServerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `acmeserver.Hooks(f(g(h())))`.
func (c *AcmeServerClient) Use(hooks ...Hook) {
	c.hooks.AcmeServer = append(c.hooks.AcmeServer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `acmeserver.Intercept(f(g(h())))`.
func (c *AcmeServerClient) Intercept(interceptors ...Interceptor) {
	c.inters.AcmeServer = append(c.inters.AcmeServer, interceptors...)
}

// Create returns a builder for creating a AcmeServer entity.
func (c *AcmeServerClient) Create() *AcmeServerCreate {
	mutation := newAcmeServerMutation(c.config, OpCreate)
	return &AcmeServerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AcmeServer entities.
func (c *AcmeServerClient) CreateBulk(builders ...*AcmeServerCreate) *AcmeServerCreateBulk {
	return &AcmeServerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AcmeServerClient) MapCreateBulk(slice any, setFunc func(*AcmeServerCreate, int)) *AcmeServerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AcmeServerCreateBulk{err: fmt.Errorf("calling to AcmeServerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AcmeServerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AcmeServerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AcmeServer.
func (c *AcmeServerClient) Update() *AcmeServerUpdate {
	mutation := newAcmeServerMutation(c.config, OpUpdate)
	return &AcmeServerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AcmeServerClient) UpdateOne(as *AcmeServer) *AcmeServerUpdateOne {
	mutation := newAcmeServerMutation(c.config, OpUpdateOne, withAcmeServer(as))
	return &AcmeServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AcmeServerClient) UpdateOneID(id uuid.UUID) *AcmeServerUpdateOne {
	mutation := newAcmeServerMutation(c.config, OpUpdateOne, withAcmeServerID(id))
	return &AcmeServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AcmeServer.
func (c *AcmeServerClient) Delete() *AcmeServerDelete {
	mutation := newAcmeServerMutation(c.config, OpDelete)
	return &AcmeServerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AcmeServerClient) DeleteOne(as *AcmeServer) *AcmeServerDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AcmeServerClient) DeleteOneID(id uuid.UUID) *AcmeServerDeleteOne {
	builder := c.Delete().Where(acmeserver.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AcmeServerDeleteOne{builder}
}

// Query returns a query builder for AcmeServer.
func (c *AcmeServerClient) Query() *AcmeServerQuery {
	return &AcmeServerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAcmeServer},
		inters: c.Interceptors(),
	}
}

// Get returns a AcmeServer entity by its id.
func (c *AcmeServerClient) Get(ctx context.Context, id uuid.UUID) (*AcmeServer, error) {
	return c.Query().Where(acmeserver.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AcmeServerClient) GetX(ctx context.Context, id uuid.UUID) *AcmeServer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAcmeAccounts queries the acme_accounts edge of a AcmeServer.
func (c *AcmeServerClient) QueryAcmeAccounts(as *AcmeServer) *AcmeAccountQuery {
	query := (&AcmeAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(acmeserver.Table, acmeserver.FieldID, id),
			sqlgraph.To(acmeaccount.Table, acmeaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, acmeserver.AcmeAccountsTable, acmeserver.AcmeAccountsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AcmeServerClient) Hooks() []Hook {
	return c.hooks.AcmeServer
}

// Interceptors returns the client interceptors.
func (c *AcmeServerClient) Interceptors() []Interceptor {
	return c.inters.AcmeServer
}

func (c *AcmeServerClient) mutate(ctx context.Context, m *AcmeServerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AcmeServerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AcmeServerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AcmeServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AcmeServerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AcmeServer mutation op: %q", m.Op())
	}
}

// CertificateClient is a client for the Certificate schema.
type CertificateClient struct {
	config
}

// NewCertificateClient returns a client for the Certificate from the given config.
func NewCertificateClient(c config) *CertificateClient {
	return &CertificateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `certificate.Hooks(f(g(h())))`.
func (c *CertificateClient) Use(hooks ...Hook) {
	c.hooks.Certificate = append(c.hooks.Certificate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `certificate.Intercept(f(g(h())))`.
func (c *CertificateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Certificate = append(c.inters.Certificate, interceptors...)
}

// Create returns a builder for creating a Certificate entity.
func (c *CertificateClient) Create() *CertificateCreate {
	mutation := newCertificateMutation(c.config, OpCreate)
	return &CertificateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Certificate entities.
func (c *CertificateClient) CreateBulk(builders ...*CertificateCreate) *CertificateCreateBulk {
	return &CertificateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CertificateClient) MapCreateBulk(slice any, setFunc func(*CertificateCreate, int)) *CertificateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CertificateCreateBulk{err: fmt.Errorf("calling to CertificateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CertificateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CertificateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Certificate.
func (c *CertificateClient) Update() *CertificateUpdate {
	mutation := newCertificateMutation(c.config, OpUpdate)
	return &CertificateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertificateClient) UpdateOne(ce *Certificate) *CertificateUpdateOne {
	mutation := newCertificateMutation(c.config, OpUpdateOne, withCertificate(ce))
	return &CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertificateClient) UpdateOneID(id uuid.UUID) *CertificateUpdateOne {
	mutation := newCertificateMutation(c.config, OpUpdateOne, withCertificateID(id))
	return &CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Certificate.
func (c *CertificateClient) Delete() *CertificateDelete {
	mutation := newCertificateMutation(c.config, OpDelete)
	return &CertificateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CertificateClient) DeleteOne(ce *Certificate) *CertificateDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CertificateClient) DeleteOneID(id uuid.UUID) *CertificateDeleteOne {
	builder := c.Delete().Where(certificate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertificateDeleteOne{builder}
}

// Query returns a query builder for Certificate.
func (c *CertificateClient) Query() *CertificateQuery {
	return &CertificateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCertificate},
		inters: c.Interceptors(),
	}
}

// Get returns a Certificate entity by its id.
func (c *CertificateClient) Get(ctx context.Context, id uuid.UUID) (*Certificate, error) {
	return c.Query().Where(certificate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertificateClient) GetX(ctx context.Context, id uuid.UUID) *Certificate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAcmeAccount queries the acme_account edge of a Certificate.
func (c *CertificateClient) QueryAcmeAccount(ce *Certificate) *AcmeAccountQuery {
	query := (&AcmeAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(certificate.Table, certificate.FieldID, id),
			sqlgraph.To(acmeaccount.Table, acmeaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, certificate.AcmeAccountTable, certificate.AcmeAccountColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDNSProvider queries the dns_provider edge of a Certificate.
func (c *CertificateClient) QueryDNSProvider(ce *Certificate) *DnsProviderQuery {
	query := (&DnsProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(certificate.Table, certificate.FieldID, id),
			sqlgraph.To(dnsprovider.Table, dnsprovider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, certificate.DNSProviderTable, certificate.DNSProviderColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CertificateClient) Hooks() []Hook {
	return c.hooks.Certificate
}

// Interceptors returns the client interceptors.
func (c *CertificateClient) Interceptors() []Interceptor {
	return c.inters.Certificate
}

func (c *CertificateClient) mutate(ctx context.Context, m *CertificateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CertificateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CertificateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CertificateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Certificate mutation op: %q", m.Op())
	}
}

// DnsProviderClient is a client for the DnsProvider schema.
type DnsProviderClient struct {
	config
}

// NewDnsProviderClient returns a client for the DnsProvider from the given config.
func NewDnsProviderClient(c config) *DnsProviderClient {
	return &DnsProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dnsprovider.Hooks(f(g(h())))`.
func (c *DnsProviderClient) Use(hooks ...Hook) {
	c.hooks.DnsProvider = append(c.hooks.DnsProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dnsprovider.Intercept(f(g(h())))`.
func (c *DnsProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.DnsProvider = append(c.inters.DnsProvider, interceptors...)
}

// Create returns a builder for creating a DnsProvider entity.
func (c *DnsProviderClient) Create() *DnsProviderCreate {
	mutation := newDnsProviderMutation(c.config, OpCreate)
	return &DnsProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DnsProvider entities.
func (c *DnsProviderClient) CreateBulk(builders ...*DnsProviderCreate) *DnsProviderCreateBulk {
	return &DnsProviderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DnsProviderClient) MapCreateBulk(slice any, setFunc func(*DnsProviderCreate, int)) *DnsProviderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DnsProviderCreateBulk{err: fmt.Errorf("calling to DnsProviderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DnsProviderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DnsProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DnsProvider.
func (c *DnsProviderClient) Update() *DnsProviderUpdate {
	mutation := newDnsProviderMutation(c.config, OpUpdate)
	return &DnsProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DnsProviderClient) UpdateOne(dp *DnsProvider) *DnsProviderUpdateOne {
	mutation := newDnsProviderMutation(c.config, OpUpdateOne, withDnsProvider(dp))
	return &DnsProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DnsProviderClient) UpdateOneID(id uuid.UUID) *DnsProviderUpdateOne {
	mutation := newDnsProviderMutation(c.config, OpUpdateOne, withDnsProviderID(id))
	return &DnsProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DnsProvider.
func (c *DnsProviderClient) Delete() *DnsProviderDelete {
	mutation := newDnsProviderMutation(c.config, OpDelete)
	return &DnsProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DnsProviderClient) DeleteOne(dp *DnsProvider) *DnsProviderDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DnsProviderClient) DeleteOneID(id uuid.UUID) *DnsProviderDeleteOne {
	builder := c.Delete().Where(dnsprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DnsProviderDeleteOne{builder}
}

// Query returns a query builder for DnsProvider.
func (c *DnsProviderClient) Query() *DnsProviderQuery {
	return &DnsProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDnsProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a DnsProvider entity by its id.
func (c *DnsProviderClient) Get(ctx context.Context, id uuid.UUID) (*DnsProvider, error) {
	return c.Query().Where(dnsprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DnsProviderClient) GetX(ctx context.Context, id uuid.UUID) *DnsProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCertificates queries the certificates edge of a DnsProvider.
func (c *DnsProviderClient) QueryCertificates(dp *DnsProvider) *CertificateQuery {
	query := (&CertificateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dnsprovider.Table, dnsprovider.FieldID, id),
			sqlgraph.To(certificate.Table, certificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dnsprovider.CertificatesTable, dnsprovider.CertificatesColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DnsProviderClient) Hooks() []Hook {
	return c.hooks.DnsProvider
}

// Interceptors returns the client interceptors.
func (c *DnsProviderClient) Interceptors() []Interceptor {
	return c.inters.DnsProvider
}

func (c *DnsProviderClient) mutate(ctx context.Context, m *DnsProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DnsProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DnsProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DnsProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DnsProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DnsProvider mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AcmeAccount, AcmeServer, Certificate, DnsProvider []ent.Hook
	}
	inters struct {
		AcmeAccount, AcmeServer, Certificate, DnsProvider []ent.Interceptor
	}
)
