// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/acme/lego"
	"acme-manager/ent/dnsprovider"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// DnsProvider is the model entity for the DnsProvider schema.
type DnsProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name of the DNS provider
	Name string `json:"name,omitempty"`
	// Description of the DNS provider
	Description *string `json:"description,omitempty"`
	// Type of the DNS provider
	Type string `json:"type,omitempty"`
	// Configuration of the DNS provider
	Config *lego.DnsProviderConfig `json:"config,omitempty"`
	// Time the DNS provider was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// User that created the ACME account
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Time the DNS provider was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// User that updated the ACME account
	UpdatedBy *uuid.UUID `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DnsProviderQuery when eager-loading is set.
	Edges        DnsProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DnsProviderEdges holds the relations/edges for other nodes in the graph.
type DnsProviderEdges struct {
	// Certificates holds the value of the certificates edge.
	Certificates []*Certificate `json:"certificates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool

	namedCertificates map[string][]*Certificate
}

// CertificatesOrErr returns the Certificates value or an error if the edge
// was not loaded in eager-loading.
func (e DnsProviderEdges) CertificatesOrErr() ([]*Certificate, error) {
	if e.loadedTypes[0] {
		return e.Certificates, nil
	}
	return nil, &NotLoadedError{edge: "certificates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DnsProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dnsprovider.FieldUpdatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case dnsprovider.FieldConfig:
			values[i] = new([]byte)
		case dnsprovider.FieldName, dnsprovider.FieldDescription, dnsprovider.FieldType:
			values[i] = new(sql.NullString)
		case dnsprovider.FieldCreatedAt, dnsprovider.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dnsprovider.FieldID, dnsprovider.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DnsProvider fields.
func (dp *DnsProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dnsprovider.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dp.ID = *value
			}
		case dnsprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dp.Name = value.String
			}
		case dnsprovider.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dp.Description = new(string)
				*dp.Description = value.String
			}
		case dnsprovider.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				dp.Type = value.String
			}
		case dnsprovider.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dp.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case dnsprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dp.CreatedAt = value.Time
			}
		case dnsprovider.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				dp.CreatedBy = *value
			}
		case dnsprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dp.UpdatedAt = new(time.Time)
				*dp.UpdatedAt = value.Time
			}
		case dnsprovider.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dp.UpdatedBy = new(uuid.UUID)
				*dp.UpdatedBy = *value.S.(*uuid.UUID)
			}
		default:
			dp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DnsProvider.
// This includes values selected through modifiers, order, etc.
func (dp *DnsProvider) Value(name string) (ent.Value, error) {
	return dp.selectValues.Get(name)
}

// QueryCertificates queries the "certificates" edge of the DnsProvider entity.
func (dp *DnsProvider) QueryCertificates() *CertificateQuery {
	return NewDnsProviderClient(dp.config).QueryCertificates(dp)
}

// Update returns a builder for updating this DnsProvider.
// Note that you need to call DnsProvider.Unwrap() before calling this method if this DnsProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DnsProvider) Update() *DnsProviderUpdateOne {
	return NewDnsProviderClient(dp.config).UpdateOne(dp)
}

// Unwrap unwraps the DnsProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DnsProvider) Unwrap() *DnsProvider {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DnsProvider is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DnsProvider) String() string {
	var builder strings.Builder
	builder.WriteString("DnsProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dp.ID))
	builder.WriteString("name=")
	builder.WriteString(dp.Name)
	builder.WriteString(", ")
	if v := dp.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(dp.Type)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", dp.Config))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", dp.CreatedBy))
	builder.WriteString(", ")
	if v := dp.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := dp.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertificates returns the Certificates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dp *DnsProvider) NamedCertificates(name string) ([]*Certificate, error) {
	if dp.Edges.namedCertificates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dp.Edges.namedCertificates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dp *DnsProvider) appendNamedCertificates(name string, edges ...*Certificate) {
	if dp.Edges.namedCertificates == nil {
		dp.Edges.namedCertificates = make(map[string][]*Certificate)
	}
	if len(edges) == 0 {
		dp.Edges.namedCertificates[name] = []*Certificate{}
	} else {
		dp.Edges.namedCertificates[name] = append(dp.Edges.namedCertificates[name], edges...)
	}
}

// DnsProviders is a parsable slice of DnsProvider.
type DnsProviders []*DnsProvider
