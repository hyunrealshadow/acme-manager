// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/acme/lego"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DnsProviderCreate is the builder for creating a DnsProvider entity.
type DnsProviderCreate struct {
	config
	mutation *DnsProviderMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dpc *DnsProviderCreate) SetName(s string) *DnsProviderCreate {
	dpc.mutation.SetName(s)
	return dpc
}

// SetDescription sets the "description" field.
func (dpc *DnsProviderCreate) SetDescription(s string) *DnsProviderCreate {
	dpc.mutation.SetDescription(s)
	return dpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpc *DnsProviderCreate) SetNillableDescription(s *string) *DnsProviderCreate {
	if s != nil {
		dpc.SetDescription(*s)
	}
	return dpc
}

// SetType sets the "type" field.
func (dpc *DnsProviderCreate) SetType(s string) *DnsProviderCreate {
	dpc.mutation.SetType(s)
	return dpc
}

// SetConfig sets the "config" field.
func (dpc *DnsProviderCreate) SetConfig(lpc *lego.DnsProviderConfig) *DnsProviderCreate {
	dpc.mutation.SetConfig(lpc)
	return dpc
}

// SetCreatedAt sets the "created_at" field.
func (dpc *DnsProviderCreate) SetCreatedAt(t time.Time) *DnsProviderCreate {
	dpc.mutation.SetCreatedAt(t)
	return dpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpc *DnsProviderCreate) SetNillableCreatedAt(t *time.Time) *DnsProviderCreate {
	if t != nil {
		dpc.SetCreatedAt(*t)
	}
	return dpc
}

// SetCreatedBy sets the "created_by" field.
func (dpc *DnsProviderCreate) SetCreatedBy(u uuid.UUID) *DnsProviderCreate {
	dpc.mutation.SetCreatedBy(u)
	return dpc
}

// SetUpdatedAt sets the "updated_at" field.
func (dpc *DnsProviderCreate) SetUpdatedAt(t time.Time) *DnsProviderCreate {
	dpc.mutation.SetUpdatedAt(t)
	return dpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpc *DnsProviderCreate) SetNillableUpdatedAt(t *time.Time) *DnsProviderCreate {
	if t != nil {
		dpc.SetUpdatedAt(*t)
	}
	return dpc
}

// SetUpdatedBy sets the "updated_by" field.
func (dpc *DnsProviderCreate) SetUpdatedBy(u uuid.UUID) *DnsProviderCreate {
	dpc.mutation.SetUpdatedBy(u)
	return dpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dpc *DnsProviderCreate) SetNillableUpdatedBy(u *uuid.UUID) *DnsProviderCreate {
	if u != nil {
		dpc.SetUpdatedBy(*u)
	}
	return dpc
}

// SetID sets the "id" field.
func (dpc *DnsProviderCreate) SetID(u uuid.UUID) *DnsProviderCreate {
	dpc.mutation.SetID(u)
	return dpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dpc *DnsProviderCreate) SetNillableID(u *uuid.UUID) *DnsProviderCreate {
	if u != nil {
		dpc.SetID(*u)
	}
	return dpc
}

// AddCertificateIDs adds the "certificates" edge to the Certificate entity by IDs.
func (dpc *DnsProviderCreate) AddCertificateIDs(ids ...uuid.UUID) *DnsProviderCreate {
	dpc.mutation.AddCertificateIDs(ids...)
	return dpc
}

// AddCertificates adds the "certificates" edges to the Certificate entity.
func (dpc *DnsProviderCreate) AddCertificates(c ...*Certificate) *DnsProviderCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dpc.AddCertificateIDs(ids...)
}

// Mutation returns the DnsProviderMutation object of the builder.
func (dpc *DnsProviderCreate) Mutation() *DnsProviderMutation {
	return dpc.mutation
}

// Save creates the DnsProvider in the database.
func (dpc *DnsProviderCreate) Save(ctx context.Context) (*DnsProvider, error) {
	dpc.defaults()
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DnsProviderCreate) SaveX(ctx context.Context) *DnsProvider {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DnsProviderCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DnsProviderCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DnsProviderCreate) defaults() {
	if _, ok := dpc.mutation.CreatedAt(); !ok {
		v := dnsprovider.DefaultCreatedAt()
		dpc.mutation.SetCreatedAt(v)
	}
	if _, ok := dpc.mutation.ID(); !ok {
		v := dnsprovider.DefaultID()
		dpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DnsProviderCreate) check() error {
	if _, ok := dpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DnsProvider.name"`)}
	}
	if v, ok := dpc.mutation.Name(); ok {
		if err := dnsprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DnsProvider.name": %w`, err)}
		}
	}
	if v, ok := dpc.mutation.Description(); ok {
		if err := dnsprovider.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DnsProvider.description": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "DnsProvider.type"`)}
	}
	if v, ok := dpc.mutation.GetType(); ok {
		if err := dnsprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "DnsProvider.type": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "DnsProvider.config"`)}
	}
	if _, ok := dpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DnsProvider.created_at"`)}
	}
	if _, ok := dpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "DnsProvider.created_by"`)}
	}
	return nil
}

func (dpc *DnsProviderCreate) sqlSave(ctx context.Context) (*DnsProvider, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DnsProviderCreate) createSpec() (*DnsProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &DnsProvider{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(dnsprovider.Table, sqlgraph.NewFieldSpec(dnsprovider.FieldID, field.TypeUUID))
	)
	if id, ok := dpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dpc.mutation.Name(); ok {
		_spec.SetField(dnsprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dpc.mutation.Description(); ok {
		_spec.SetField(dnsprovider.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := dpc.mutation.GetType(); ok {
		_spec.SetField(dnsprovider.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := dpc.mutation.Config(); ok {
		_spec.SetField(dnsprovider.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := dpc.mutation.CreatedAt(); ok {
		_spec.SetField(dnsprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dpc.mutation.CreatedBy(); ok {
		_spec.SetField(dnsprovider.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := dpc.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := dpc.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsprovider.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if nodes := dpc.mutation.CertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsprovider.CertificatesTable,
			Columns: []string{dnsprovider.CertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DnsProviderCreateBulk is the builder for creating many DnsProvider entities in bulk.
type DnsProviderCreateBulk struct {
	config
	err      error
	builders []*DnsProviderCreate
}

// Save creates the DnsProvider entities in the database.
func (dpcb *DnsProviderCreateBulk) Save(ctx context.Context) ([]*DnsProvider, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DnsProvider, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DnsProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DnsProviderCreateBulk) SaveX(ctx context.Context) []*DnsProvider {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DnsProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DnsProviderCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
