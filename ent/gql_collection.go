// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"
	"context"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (aa *AcmeAccountQuery) CollectFields(ctx context.Context, satisfies ...string) (*AcmeAccountQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return aa, nil
	}
	if err := aa.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return aa, nil
}

func (aa *AcmeAccountQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(acmeaccount.Columns))
		selectedFields = []string{acmeaccount.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "acmeServer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AcmeServerClient{config: aa.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, acmeserverImplementors)...); err != nil {
				return err
			}
			aa.withAcmeServer = query
			if _, ok := fieldSeen[acmeaccount.FieldAcmeServerID]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldAcmeServerID)
				fieldSeen[acmeaccount.FieldAcmeServerID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[acmeaccount.FieldName]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldName)
				fieldSeen[acmeaccount.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[acmeaccount.FieldDescription]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldDescription)
				fieldSeen[acmeaccount.FieldDescription] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[acmeaccount.FieldEmail]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldEmail)
				fieldSeen[acmeaccount.FieldEmail] = struct{}{}
			}
		case "keyType":
			if _, ok := fieldSeen[acmeaccount.FieldKeyType]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldKeyType)
				fieldSeen[acmeaccount.FieldKeyType] = struct{}{}
			}
		case "keyFingerprint":
			if _, ok := fieldSeen[acmeaccount.FieldKeyFingerprint]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldKeyFingerprint)
				fieldSeen[acmeaccount.FieldKeyFingerprint] = struct{}{}
			}
		case "eabKeyID":
			if _, ok := fieldSeen[acmeaccount.FieldEabKeyID]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldEabKeyID)
				fieldSeen[acmeaccount.FieldEabKeyID] = struct{}{}
			}
		case "eabHmacKey":
			if _, ok := fieldSeen[acmeaccount.FieldEabHmacKey]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldEabHmacKey)
				fieldSeen[acmeaccount.FieldEabHmacKey] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[acmeaccount.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldCreatedAt)
				fieldSeen[acmeaccount.FieldCreatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[acmeaccount.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldCreatedBy)
				fieldSeen[acmeaccount.FieldCreatedBy] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[acmeaccount.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldUpdatedAt)
				fieldSeen[acmeaccount.FieldUpdatedAt] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[acmeaccount.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, acmeaccount.FieldUpdatedBy)
				fieldSeen[acmeaccount.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		aa.Select(selectedFields...)
	}
	return nil
}

type acmeaccountPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AcmeAccountPaginateOption
}

func newAcmeAccountPaginateArgs(rv map[string]any) *acmeaccountPaginateArgs {
	args := &acmeaccountPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AcmeAccountOrder{Field: &AcmeAccountOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAcmeAccountOrder(order))
			}
		case *AcmeAccountOrder:
			if v != nil {
				args.opts = append(args.opts, WithAcmeAccountOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (as *AcmeServerQuery) CollectFields(ctx context.Context, satisfies ...string) (*AcmeServerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return as, nil
	}
	if err := as.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return as, nil
}

func (as *AcmeServerQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(acmeserver.Columns))
		selectedFields = []string{acmeserver.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[acmeserver.FieldName]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldName)
				fieldSeen[acmeserver.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[acmeserver.FieldDescription]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldDescription)
				fieldSeen[acmeserver.FieldDescription] = struct{}{}
			}
		case "url":
			if _, ok := fieldSeen[acmeserver.FieldURL]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldURL)
				fieldSeen[acmeserver.FieldURL] = struct{}{}
			}
		case "builtIn":
			if _, ok := fieldSeen[acmeserver.FieldBuiltIn]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldBuiltIn)
				fieldSeen[acmeserver.FieldBuiltIn] = struct{}{}
			}
		case "externalAccountRequired":
			if _, ok := fieldSeen[acmeserver.FieldExternalAccountRequired]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldExternalAccountRequired)
				fieldSeen[acmeserver.FieldExternalAccountRequired] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[acmeserver.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldCreatedAt)
				fieldSeen[acmeserver.FieldCreatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[acmeserver.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldCreatedBy)
				fieldSeen[acmeserver.FieldCreatedBy] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[acmeserver.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldUpdatedAt)
				fieldSeen[acmeserver.FieldUpdatedAt] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[acmeserver.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, acmeserver.FieldUpdatedBy)
				fieldSeen[acmeserver.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		as.Select(selectedFields...)
	}
	return nil
}

type acmeserverPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AcmeServerPaginateOption
}

func newAcmeServerPaginateArgs(rv map[string]any) *acmeserverPaginateArgs {
	args := &acmeserverPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AcmeServerOrder{Field: &AcmeServerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAcmeServerOrder(order))
			}
		case *AcmeServerOrder:
			if v != nil {
				args.opts = append(args.opts, WithAcmeServerOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CertificateQuery) CollectFields(ctx context.Context, satisfies ...string) (*CertificateQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CertificateQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(certificate.Columns))
		selectedFields = []string{certificate.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "acmeAccount":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AcmeAccountClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, acmeaccountImplementors)...); err != nil {
				return err
			}
			c.withAcmeAccount = query
			if _, ok := fieldSeen[certificate.FieldAcmeAccountID]; !ok {
				selectedFields = append(selectedFields, certificate.FieldAcmeAccountID)
				fieldSeen[certificate.FieldAcmeAccountID] = struct{}{}
			}

		case "dnsProvider":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DnsProviderClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, dnsproviderImplementors)...); err != nil {
				return err
			}
			c.withDNSProvider = query
			if _, ok := fieldSeen[certificate.FieldDNSProviderID]; !ok {
				selectedFields = append(selectedFields, certificate.FieldDNSProviderID)
				fieldSeen[certificate.FieldDNSProviderID] = struct{}{}
			}
		case "commonName":
			if _, ok := fieldSeen[certificate.FieldCommonName]; !ok {
				selectedFields = append(selectedFields, certificate.FieldCommonName)
				fieldSeen[certificate.FieldCommonName] = struct{}{}
			}
		case "subjectAlternativeName":
			if _, ok := fieldSeen[certificate.FieldSubjectAlternativeName]; !ok {
				selectedFields = append(selectedFields, certificate.FieldSubjectAlternativeName)
				fieldSeen[certificate.FieldSubjectAlternativeName] = struct{}{}
			}
		case "organization":
			if _, ok := fieldSeen[certificate.FieldOrganization]; !ok {
				selectedFields = append(selectedFields, certificate.FieldOrganization)
				fieldSeen[certificate.FieldOrganization] = struct{}{}
			}
		case "organizationalUnit":
			if _, ok := fieldSeen[certificate.FieldOrganizationalUnit]; !ok {
				selectedFields = append(selectedFields, certificate.FieldOrganizationalUnit)
				fieldSeen[certificate.FieldOrganizationalUnit] = struct{}{}
			}
		case "country":
			if _, ok := fieldSeen[certificate.FieldCountry]; !ok {
				selectedFields = append(selectedFields, certificate.FieldCountry)
				fieldSeen[certificate.FieldCountry] = struct{}{}
			}
		case "state":
			if _, ok := fieldSeen[certificate.FieldState]; !ok {
				selectedFields = append(selectedFields, certificate.FieldState)
				fieldSeen[certificate.FieldState] = struct{}{}
			}
		case "locality":
			if _, ok := fieldSeen[certificate.FieldLocality]; !ok {
				selectedFields = append(selectedFields, certificate.FieldLocality)
				fieldSeen[certificate.FieldLocality] = struct{}{}
			}
		case "streetAddress":
			if _, ok := fieldSeen[certificate.FieldStreetAddress]; !ok {
				selectedFields = append(selectedFields, certificate.FieldStreetAddress)
				fieldSeen[certificate.FieldStreetAddress] = struct{}{}
			}
		case "keyType":
			if _, ok := fieldSeen[certificate.FieldKeyType]; !ok {
				selectedFields = append(selectedFields, certificate.FieldKeyType)
				fieldSeen[certificate.FieldKeyType] = struct{}{}
			}
		case "fingerprint":
			if _, ok := fieldSeen[certificate.FieldFingerprint]; !ok {
				selectedFields = append(selectedFields, certificate.FieldFingerprint)
				fieldSeen[certificate.FieldFingerprint] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[certificate.FieldStatus]; !ok {
				selectedFields = append(selectedFields, certificate.FieldStatus)
				fieldSeen[certificate.FieldStatus] = struct{}{}
			}
		case "issuedAt":
			if _, ok := fieldSeen[certificate.FieldIssuedAt]; !ok {
				selectedFields = append(selectedFields, certificate.FieldIssuedAt)
				fieldSeen[certificate.FieldIssuedAt] = struct{}{}
			}
		case "expiresAt":
			if _, ok := fieldSeen[certificate.FieldExpiresAt]; !ok {
				selectedFields = append(selectedFields, certificate.FieldExpiresAt)
				fieldSeen[certificate.FieldExpiresAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[certificate.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, certificate.FieldCreatedAt)
				fieldSeen[certificate.FieldCreatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[certificate.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, certificate.FieldCreatedBy)
				fieldSeen[certificate.FieldCreatedBy] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[certificate.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, certificate.FieldUpdatedAt)
				fieldSeen[certificate.FieldUpdatedAt] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[certificate.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, certificate.FieldUpdatedBy)
				fieldSeen[certificate.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type certificatePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CertificatePaginateOption
}

func newCertificatePaginateArgs(rv map[string]any) *certificatePaginateArgs {
	args := &certificatePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CertificateOrder{Field: &CertificateOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCertificateOrder(order))
			}
		case *CertificateOrder:
			if v != nil {
				args.opts = append(args.opts, WithCertificateOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (dp *DnsProviderQuery) CollectFields(ctx context.Context, satisfies ...string) (*DnsProviderQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return dp, nil
	}
	if err := dp.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return dp, nil
}

func (dp *DnsProviderQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(dnsprovider.Columns))
		selectedFields = []string{dnsprovider.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[dnsprovider.FieldName]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldName)
				fieldSeen[dnsprovider.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[dnsprovider.FieldDescription]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldDescription)
				fieldSeen[dnsprovider.FieldDescription] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[dnsprovider.FieldType]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldType)
				fieldSeen[dnsprovider.FieldType] = struct{}{}
			}
		case "config":
			if _, ok := fieldSeen[dnsprovider.FieldConfig]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldConfig)
				fieldSeen[dnsprovider.FieldConfig] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[dnsprovider.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldCreatedAt)
				fieldSeen[dnsprovider.FieldCreatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[dnsprovider.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldCreatedBy)
				fieldSeen[dnsprovider.FieldCreatedBy] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[dnsprovider.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldUpdatedAt)
				fieldSeen[dnsprovider.FieldUpdatedAt] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[dnsprovider.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, dnsprovider.FieldUpdatedBy)
				fieldSeen[dnsprovider.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		dp.Select(selectedFields...)
	}
	return nil
}

type dnsproviderPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DnsProviderPaginateOption
}

func newDnsProviderPaginateArgs(rv map[string]any) *dnsproviderPaginateArgs {
	args := &dnsproviderPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &DnsProviderOrder{Field: &DnsProviderOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDnsProviderOrder(order))
			}
		case *DnsProviderOrder:
			if v != nil {
				args.opts = append(args.opts, WithDnsProviderOrder(v))
			}
		}
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
