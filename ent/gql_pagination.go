// Code generated by ent, DO NOT EDIT.

package ent

import (
	"acme-manager/ent/acmeaccount"
	"acme-manager/ent/acmeserver"
	"acme-manager/ent/certificate"
	"acme-manager/ent/dnsprovider"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AcmeAccountEdge is the edge representation of AcmeAccount.
type AcmeAccountEdge struct {
	Node   *AcmeAccount `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// AcmeAccountConnection is the connection containing edges to AcmeAccount.
type AcmeAccountConnection struct {
	Edges      []*AcmeAccountEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *AcmeAccountConnection) build(nodes []*AcmeAccount, pager *acmeaccountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AcmeAccount
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AcmeAccount {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AcmeAccount {
			return nodes[i]
		}
	}
	c.Edges = make([]*AcmeAccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AcmeAccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AcmeAccountPaginateOption enables pagination customization.
type AcmeAccountPaginateOption func(*acmeaccountPager) error

// WithAcmeAccountOrder configures pagination ordering.
func WithAcmeAccountOrder(order *AcmeAccountOrder) AcmeAccountPaginateOption {
	if order == nil {
		order = DefaultAcmeAccountOrder
	}
	o := *order
	return func(pager *acmeaccountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAcmeAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAcmeAccountFilter configures pagination filter.
func WithAcmeAccountFilter(filter func(*AcmeAccountQuery) (*AcmeAccountQuery, error)) AcmeAccountPaginateOption {
	return func(pager *acmeaccountPager) error {
		if filter == nil {
			return errors.New("AcmeAccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type acmeaccountPager struct {
	reverse bool
	order   *AcmeAccountOrder
	filter  func(*AcmeAccountQuery) (*AcmeAccountQuery, error)
}

func newAcmeAccountPager(opts []AcmeAccountPaginateOption, reverse bool) (*acmeaccountPager, error) {
	pager := &acmeaccountPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAcmeAccountOrder
	}
	return pager, nil
}

func (p *acmeaccountPager) applyFilter(query *AcmeAccountQuery) (*AcmeAccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *acmeaccountPager) toCursor(aa *AcmeAccount) Cursor {
	return p.order.Field.toCursor(aa)
}

func (p *acmeaccountPager) applyCursors(query *AcmeAccountQuery, after, before *Cursor) (*AcmeAccountQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAcmeAccountOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *acmeaccountPager) applyOrder(query *AcmeAccountQuery) *AcmeAccountQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAcmeAccountOrder.Field {
		query = query.Order(DefaultAcmeAccountOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *acmeaccountPager) orderExpr(query *AcmeAccountQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAcmeAccountOrder.Field {
			b.Comma().Ident(DefaultAcmeAccountOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AcmeAccount.
func (aa *AcmeAccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AcmeAccountPaginateOption,
) (*AcmeAccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAcmeAccountPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if aa, err = pager.applyFilter(aa); err != nil {
		return nil, err
	}
	conn := &AcmeAccountConnection{Edges: []*AcmeAccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := aa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if aa, err = pager.applyCursors(aa, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		aa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := aa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	aa = pager.applyOrder(aa)
	nodes, err := aa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AcmeAccountOrderFieldCreatedAt orders AcmeAccount by created_at.
	AcmeAccountOrderFieldCreatedAt = &AcmeAccountOrderField{
		Value: func(aa *AcmeAccount) (ent.Value, error) {
			return aa.CreatedAt, nil
		},
		column: acmeaccount.FieldCreatedAt,
		toTerm: acmeaccount.ByCreatedAt,
		toCursor: func(aa *AcmeAccount) Cursor {
			return Cursor{
				ID:    aa.ID,
				Value: aa.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AcmeAccountOrderField) String() string {
	var str string
	switch f.column {
	case AcmeAccountOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AcmeAccountOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AcmeAccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AcmeAccountOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AcmeAccountOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AcmeAccountOrderField", str)
	}
	return nil
}

// AcmeAccountOrderField defines the ordering field of AcmeAccount.
type AcmeAccountOrderField struct {
	// Value extracts the ordering value from the given AcmeAccount.
	Value    func(*AcmeAccount) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) acmeaccount.OrderOption
	toCursor func(*AcmeAccount) Cursor
}

// AcmeAccountOrder defines the ordering of AcmeAccount.
type AcmeAccountOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *AcmeAccountOrderField `json:"field"`
}

// DefaultAcmeAccountOrder is the default ordering of AcmeAccount.
var DefaultAcmeAccountOrder = &AcmeAccountOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AcmeAccountOrderField{
		Value: func(aa *AcmeAccount) (ent.Value, error) {
			return aa.ID, nil
		},
		column: acmeaccount.FieldID,
		toTerm: acmeaccount.ByID,
		toCursor: func(aa *AcmeAccount) Cursor {
			return Cursor{ID: aa.ID}
		},
	},
}

// ToEdge converts AcmeAccount into AcmeAccountEdge.
func (aa *AcmeAccount) ToEdge(order *AcmeAccountOrder) *AcmeAccountEdge {
	if order == nil {
		order = DefaultAcmeAccountOrder
	}
	return &AcmeAccountEdge{
		Node:   aa,
		Cursor: order.Field.toCursor(aa),
	}
}

// AcmeServerEdge is the edge representation of AcmeServer.
type AcmeServerEdge struct {
	Node   *AcmeServer `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AcmeServerConnection is the connection containing edges to AcmeServer.
type AcmeServerConnection struct {
	Edges      []*AcmeServerEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AcmeServerConnection) build(nodes []*AcmeServer, pager *acmeserverPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AcmeServer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AcmeServer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AcmeServer {
			return nodes[i]
		}
	}
	c.Edges = make([]*AcmeServerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AcmeServerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AcmeServerPaginateOption enables pagination customization.
type AcmeServerPaginateOption func(*acmeserverPager) error

// WithAcmeServerOrder configures pagination ordering.
func WithAcmeServerOrder(order *AcmeServerOrder) AcmeServerPaginateOption {
	if order == nil {
		order = DefaultAcmeServerOrder
	}
	o := *order
	return func(pager *acmeserverPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAcmeServerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAcmeServerFilter configures pagination filter.
func WithAcmeServerFilter(filter func(*AcmeServerQuery) (*AcmeServerQuery, error)) AcmeServerPaginateOption {
	return func(pager *acmeserverPager) error {
		if filter == nil {
			return errors.New("AcmeServerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type acmeserverPager struct {
	reverse bool
	order   *AcmeServerOrder
	filter  func(*AcmeServerQuery) (*AcmeServerQuery, error)
}

func newAcmeServerPager(opts []AcmeServerPaginateOption, reverse bool) (*acmeserverPager, error) {
	pager := &acmeserverPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAcmeServerOrder
	}
	return pager, nil
}

func (p *acmeserverPager) applyFilter(query *AcmeServerQuery) (*AcmeServerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *acmeserverPager) toCursor(as *AcmeServer) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *acmeserverPager) applyCursors(query *AcmeServerQuery, after, before *Cursor) (*AcmeServerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAcmeServerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *acmeserverPager) applyOrder(query *AcmeServerQuery) *AcmeServerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAcmeServerOrder.Field {
		query = query.Order(DefaultAcmeServerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *acmeserverPager) orderExpr(query *AcmeServerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAcmeServerOrder.Field {
			b.Comma().Ident(DefaultAcmeServerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AcmeServer.
func (as *AcmeServerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AcmeServerPaginateOption,
) (*AcmeServerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAcmeServerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}
	conn := &AcmeServerConnection{Edges: []*AcmeServerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := as.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if as, err = pager.applyCursors(as, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		as.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := as.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	as = pager.applyOrder(as)
	nodes, err := as.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AcmeServerOrderFieldCreatedAt orders AcmeServer by created_at.
	AcmeServerOrderFieldCreatedAt = &AcmeServerOrderField{
		Value: func(as *AcmeServer) (ent.Value, error) {
			return as.CreatedAt, nil
		},
		column: acmeserver.FieldCreatedAt,
		toTerm: acmeserver.ByCreatedAt,
		toCursor: func(as *AcmeServer) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AcmeServerOrderField) String() string {
	var str string
	switch f.column {
	case AcmeServerOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AcmeServerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AcmeServerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AcmeServerOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AcmeServerOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AcmeServerOrderField", str)
	}
	return nil
}

// AcmeServerOrderField defines the ordering field of AcmeServer.
type AcmeServerOrderField struct {
	// Value extracts the ordering value from the given AcmeServer.
	Value    func(*AcmeServer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) acmeserver.OrderOption
	toCursor func(*AcmeServer) Cursor
}

// AcmeServerOrder defines the ordering of AcmeServer.
type AcmeServerOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AcmeServerOrderField `json:"field"`
}

// DefaultAcmeServerOrder is the default ordering of AcmeServer.
var DefaultAcmeServerOrder = &AcmeServerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AcmeServerOrderField{
		Value: func(as *AcmeServer) (ent.Value, error) {
			return as.ID, nil
		},
		column: acmeserver.FieldID,
		toTerm: acmeserver.ByID,
		toCursor: func(as *AcmeServer) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts AcmeServer into AcmeServerEdge.
func (as *AcmeServer) ToEdge(order *AcmeServerOrder) *AcmeServerEdge {
	if order == nil {
		order = DefaultAcmeServerOrder
	}
	return &AcmeServerEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// CertificateEdge is the edge representation of Certificate.
type CertificateEdge struct {
	Node   *Certificate `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// CertificateConnection is the connection containing edges to Certificate.
type CertificateConnection struct {
	Edges      []*CertificateEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *CertificateConnection) build(nodes []*Certificate, pager *certificatePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Certificate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Certificate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Certificate {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertificateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertificateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertificatePaginateOption enables pagination customization.
type CertificatePaginateOption func(*certificatePager) error

// WithCertificateOrder configures pagination ordering.
func WithCertificateOrder(order *CertificateOrder) CertificatePaginateOption {
	if order == nil {
		order = DefaultCertificateOrder
	}
	o := *order
	return func(pager *certificatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertificateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertificateFilter configures pagination filter.
func WithCertificateFilter(filter func(*CertificateQuery) (*CertificateQuery, error)) CertificatePaginateOption {
	return func(pager *certificatePager) error {
		if filter == nil {
			return errors.New("CertificateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certificatePager struct {
	reverse bool
	order   *CertificateOrder
	filter  func(*CertificateQuery) (*CertificateQuery, error)
}

func newCertificatePager(opts []CertificatePaginateOption, reverse bool) (*certificatePager, error) {
	pager := &certificatePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertificateOrder
	}
	return pager, nil
}

func (p *certificatePager) applyFilter(query *CertificateQuery) (*CertificateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certificatePager) toCursor(c *Certificate) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *certificatePager) applyCursors(query *CertificateQuery, after, before *Cursor) (*CertificateQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertificateOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certificatePager) applyOrder(query *CertificateQuery) *CertificateQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertificateOrder.Field {
		query = query.Order(DefaultCertificateOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certificatePager) orderExpr(query *CertificateQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertificateOrder.Field {
			b.Comma().Ident(DefaultCertificateOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Certificate.
func (c *CertificateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertificatePaginateOption,
) (*CertificateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertificatePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CertificateConnection{Edges: []*CertificateEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CertificateOrderFieldCreatedAt orders Certificate by created_at.
	CertificateOrderFieldCreatedAt = &CertificateOrderField{
		Value: func(c *Certificate) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: certificate.FieldCreatedAt,
		toTerm: certificate.ByCreatedAt,
		toCursor: func(c *Certificate) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CertificateOrderField) String() string {
	var str string
	switch f.column {
	case CertificateOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CertificateOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CertificateOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CertificateOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CertificateOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid CertificateOrderField", str)
	}
	return nil
}

// CertificateOrderField defines the ordering field of Certificate.
type CertificateOrderField struct {
	// Value extracts the ordering value from the given Certificate.
	Value    func(*Certificate) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certificate.OrderOption
	toCursor func(*Certificate) Cursor
}

// CertificateOrder defines the ordering of Certificate.
type CertificateOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *CertificateOrderField `json:"field"`
}

// DefaultCertificateOrder is the default ordering of Certificate.
var DefaultCertificateOrder = &CertificateOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertificateOrderField{
		Value: func(c *Certificate) (ent.Value, error) {
			return c.ID, nil
		},
		column: certificate.FieldID,
		toTerm: certificate.ByID,
		toCursor: func(c *Certificate) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Certificate into CertificateEdge.
func (c *Certificate) ToEdge(order *CertificateOrder) *CertificateEdge {
	if order == nil {
		order = DefaultCertificateOrder
	}
	return &CertificateEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DnsProviderEdge is the edge representation of DnsProvider.
type DnsProviderEdge struct {
	Node   *DnsProvider `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// DnsProviderConnection is the connection containing edges to DnsProvider.
type DnsProviderConnection struct {
	Edges      []*DnsProviderEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *DnsProviderConnection) build(nodes []*DnsProvider, pager *dnsproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DnsProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DnsProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DnsProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*DnsProviderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DnsProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DnsProviderPaginateOption enables pagination customization.
type DnsProviderPaginateOption func(*dnsproviderPager) error

// WithDnsProviderOrder configures pagination ordering.
func WithDnsProviderOrder(order *DnsProviderOrder) DnsProviderPaginateOption {
	if order == nil {
		order = DefaultDnsProviderOrder
	}
	o := *order
	return func(pager *dnsproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDnsProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDnsProviderFilter configures pagination filter.
func WithDnsProviderFilter(filter func(*DnsProviderQuery) (*DnsProviderQuery, error)) DnsProviderPaginateOption {
	return func(pager *dnsproviderPager) error {
		if filter == nil {
			return errors.New("DnsProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dnsproviderPager struct {
	reverse bool
	order   *DnsProviderOrder
	filter  func(*DnsProviderQuery) (*DnsProviderQuery, error)
}

func newDnsProviderPager(opts []DnsProviderPaginateOption, reverse bool) (*dnsproviderPager, error) {
	pager := &dnsproviderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDnsProviderOrder
	}
	return pager, nil
}

func (p *dnsproviderPager) applyFilter(query *DnsProviderQuery) (*DnsProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dnsproviderPager) toCursor(dp *DnsProvider) Cursor {
	return p.order.Field.toCursor(dp)
}

func (p *dnsproviderPager) applyCursors(query *DnsProviderQuery, after, before *Cursor) (*DnsProviderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDnsProviderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *dnsproviderPager) applyOrder(query *DnsProviderQuery) *DnsProviderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDnsProviderOrder.Field {
		query = query.Order(DefaultDnsProviderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *dnsproviderPager) orderExpr(query *DnsProviderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDnsProviderOrder.Field {
			b.Comma().Ident(DefaultDnsProviderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DnsProvider.
func (dp *DnsProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DnsProviderPaginateOption,
) (*DnsProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDnsProviderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if dp, err = pager.applyFilter(dp); err != nil {
		return nil, err
	}
	conn := &DnsProviderConnection{Edges: []*DnsProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := dp.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if dp, err = pager.applyCursors(dp, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		dp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := dp.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	dp = pager.applyOrder(dp)
	nodes, err := dp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DnsProviderOrderFieldCreatedAt orders DnsProvider by created_at.
	DnsProviderOrderFieldCreatedAt = &DnsProviderOrderField{
		Value: func(dp *DnsProvider) (ent.Value, error) {
			return dp.CreatedAt, nil
		},
		column: dnsprovider.FieldCreatedAt,
		toTerm: dnsprovider.ByCreatedAt,
		toCursor: func(dp *DnsProvider) Cursor {
			return Cursor{
				ID:    dp.ID,
				Value: dp.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DnsProviderOrderField) String() string {
	var str string
	switch f.column {
	case DnsProviderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DnsProviderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DnsProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DnsProviderOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *DnsProviderOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid DnsProviderOrderField", str)
	}
	return nil
}

// DnsProviderOrderField defines the ordering field of DnsProvider.
type DnsProviderOrderField struct {
	// Value extracts the ordering value from the given DnsProvider.
	Value    func(*DnsProvider) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) dnsprovider.OrderOption
	toCursor func(*DnsProvider) Cursor
}

// DnsProviderOrder defines the ordering of DnsProvider.
type DnsProviderOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *DnsProviderOrderField `json:"field"`
}

// DefaultDnsProviderOrder is the default ordering of DnsProvider.
var DefaultDnsProviderOrder = &DnsProviderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DnsProviderOrderField{
		Value: func(dp *DnsProvider) (ent.Value, error) {
			return dp.ID, nil
		},
		column: dnsprovider.FieldID,
		toTerm: dnsprovider.ByID,
		toCursor: func(dp *DnsProvider) Cursor {
			return Cursor{ID: dp.ID}
		},
	},
}

// ToEdge converts DnsProvider into DnsProviderEdge.
func (dp *DnsProvider) ToEdge(order *DnsProviderOrder) *DnsProviderEdge {
	if order == nil {
		order = DefaultDnsProviderOrder
	}
	return &DnsProviderEdge{
		Node:   dp,
		Cursor: order.Field.toCursor(dp),
	}
}
