// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AcmeAccountColumns holds the columns for the "acme_account" table.
	AcmeAccountColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "email", Type: field.TypeString, Size: 50},
		{Name: "key_type", Type: field.TypeEnum, Enums: []string{"RSA2048", "RSA3072", "RSA4096", "RSA8192", "EC256", "EC384"}, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "private_key", Type: field.TypeString},
		{Name: "key_fingerprint", Type: field.TypeString, Size: 64},
		{Name: "registration", Type: field.TypeJSON},
		{Name: "eab_key_id", Type: field.TypeString, Nullable: true},
		{Name: "eab_hmac_key", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_by", Type: field.TypeUUID, Nullable: true},
		{Name: "acme_server_id", Type: field.TypeUUID},
	}
	// AcmeAccountTable holds the schema information for the "acme_account" table.
	AcmeAccountTable = &schema.Table{
		Name:       "acme_account",
		Columns:    AcmeAccountColumns,
		PrimaryKey: []*schema.Column{AcmeAccountColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "acme_account_acme_server_acme_accounts",
				Columns:    []*schema.Column{AcmeAccountColumns[14]},
				RefColumns: []*schema.Column{AcmeServerColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "acmeaccount_name",
				Unique:  false,
				Columns: []*schema.Column{AcmeAccountColumns[1]},
			},
			{
				Name:    "acmeaccount_email_acme_server_id",
				Unique:  true,
				Columns: []*schema.Column{AcmeAccountColumns[3], AcmeAccountColumns[14]},
			},
			{
				Name:    "acmeaccount_created_at",
				Unique:  false,
				Columns: []*schema.Column{AcmeAccountColumns[10]},
			},
		},
	}
	// AcmeServerColumns holds the columns for the "acme_server" table.
	AcmeServerColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "url", Type: field.TypeString, Size: 255},
		{Name: "built_in", Type: field.TypeBool, Default: false},
		{Name: "external_account_required", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_by", Type: field.TypeUUID, Nullable: true},
	}
	// AcmeServerTable holds the schema information for the "acme_server" table.
	AcmeServerTable = &schema.Table{
		Name:       "acme_server",
		Columns:    AcmeServerColumns,
		PrimaryKey: []*schema.Column{AcmeServerColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "acmeserver_name",
				Unique:  false,
				Columns: []*schema.Column{AcmeServerColumns[1]},
			},
			{
				Name:    "acmeserver_url",
				Unique:  true,
				Columns: []*schema.Column{AcmeServerColumns[3]},
			},
			{
				Name:    "acmeserver_created_at",
				Unique:  false,
				Columns: []*schema.Column{AcmeServerColumns[6]},
			},
		},
	}
	// CertificateColumns holds the columns for the "certificate" table.
	CertificateColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "common_name", Type: field.TypeString, Size: 255},
		{Name: "subject_alternative_name", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"postgres": "varchar[]"}},
		{Name: "organization", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "organizational_unit", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "country", Type: field.TypeString, Nullable: true, Size: 2},
		{Name: "state", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "locality", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "street_address", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "key_type", Type: field.TypeEnum, Enums: []string{"RSA2048", "RSA3072", "RSA4096", "RSA8192", "EC256", "EC384"}, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "csr", Type: field.TypeString, Nullable: true},
		{Name: "private_key", Type: field.TypeString, Nullable: true},
		{Name: "certificate", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "certificate_chain", Type: field.TypeJSON, Nullable: true},
		{Name: "fingerprint", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Succeeded", "Failed"}, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "issued_at", Type: field.TypeTime, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_by", Type: field.TypeUUID, Nullable: true},
		{Name: "acme_account_id", Type: field.TypeUUID},
		{Name: "dns_provider_id", Type: field.TypeUUID},
	}
	// CertificateTable holds the schema information for the "certificate" table.
	CertificateTable = &schema.Table{
		Name:       "certificate",
		Columns:    CertificateColumns,
		PrimaryKey: []*schema.Column{CertificateColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "certificate_acme_account_certificates",
				Columns:    []*schema.Column{CertificateColumns[22]},
				RefColumns: []*schema.Column{AcmeAccountColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "certificate_dns_provider_certificates",
				Columns:    []*schema.Column{CertificateColumns[23]},
				RefColumns: []*schema.Column{DNSProviderColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "certificate_common_name",
				Unique:  false,
				Columns: []*schema.Column{CertificateColumns[1]},
			},
			{
				Name:    "certificate_common_name_acme_account_id_key_type",
				Unique:  true,
				Columns: []*schema.Column{CertificateColumns[1], CertificateColumns[22], CertificateColumns[9]},
			},
			{
				Name:    "certificate_created_at",
				Unique:  false,
				Columns: []*schema.Column{CertificateColumns[18]},
			},
		},
	}
	// DNSProviderColumns holds the columns for the "dns_provider" table.
	DNSProviderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "type", Type: field.TypeString, Size: 20},
		{Name: "config", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_by", Type: field.TypeUUID, Nullable: true},
	}
	// DNSProviderTable holds the schema information for the "dns_provider" table.
	DNSProviderTable = &schema.Table{
		Name:       "dns_provider",
		Columns:    DNSProviderColumns,
		PrimaryKey: []*schema.Column{DNSProviderColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "dnsprovider_name",
				Unique:  false,
				Columns: []*schema.Column{DNSProviderColumns[1]},
			},
			{
				Name:    "dnsprovider_type",
				Unique:  false,
				Columns: []*schema.Column{DNSProviderColumns[3]},
			},
			{
				Name:    "dnsprovider_created_at",
				Unique:  false,
				Columns: []*schema.Column{DNSProviderColumns[5]},
			},
			{
				Name:    "dnsprovider_name_type",
				Unique:  true,
				Columns: []*schema.Column{DNSProviderColumns[1], DNSProviderColumns[3]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AcmeAccountTable,
		AcmeServerTable,
		CertificateTable,
		DNSProviderTable,
	}
)

func init() {
	AcmeAccountTable.ForeignKeys[0].RefTable = AcmeServerTable
	AcmeAccountTable.Annotation = &entsql.Annotation{
		Table: "acme_account",
	}
	AcmeServerTable.Annotation = &entsql.Annotation{
		Table: "acme_server",
	}
	CertificateTable.ForeignKeys[0].RefTable = AcmeAccountTable
	CertificateTable.ForeignKeys[1].RefTable = DNSProviderTable
	CertificateTable.Annotation = &entsql.Annotation{
		Table: "certificate",
	}
	DNSProviderTable.Annotation = &entsql.Annotation{
		Table: "dns_provider",
	}
}
