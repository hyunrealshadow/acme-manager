package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"acme-manager/config"
	"acme-manager/ent"
	"acme-manager/ent/acmeserver"
	"acme-manager/graphql/generated"
	"acme-manager/graphql/model"
	"context"
	"time"

	"entgo.io/contrib/entgql"
	cerrors "github.com/cockroachdb/errors"
	"github.com/google/uuid"
)

// CreateAcmeServer is the resolver for the createAcmeServer field.
func (r *mutationResolver) CreateAcmeServer(ctx context.Context, input model.CreateAcmeServerInput) (*ent.AcmeServer, error) {
	core, err := loadAcmeServerInfo(input.URL)
	if err != nil {
		return nil, err
	}
	directory := core.GetDirectory()
	externalAccountRequired := false
	if directory.Meta.ExternalAccountRequired {
		externalAccountRequired = directory.Meta.ExternalAccountRequired
	}
	create := r.client.AcmeServer.Create()
	create.
		SetID(uuid.New()).
		SetName(input.Name).
		SetURL(input.URL).
		SetBuiltIn(false).
		SetExternalAccountRequired(externalAccountRequired).
		SetCreatedAt(time.Now()).
		SetCreatedBy(config.SystemUserID)
	if input.Description != nil {
		create.SetDescription(*input.Description)
	}
	return create.Save(ctx)
}

// UpdateAcmeServer is the resolver for the updateAcmeServer field.
func (r *mutationResolver) UpdateAcmeServer(ctx context.Context, input model.UpdateAcmeServerInput) (*ent.AcmeServer, error) {
	existAcmeServer, err := r.client.AcmeServer.Query().Where(acmeserver.IDEQ(input.ID)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, cerrors.New("cannot find ACME server")
		}
		return nil, cerrors.WithStack(err)
	}
	return r.updateAcmeServer(ctx, input, existAcmeServer)
}

// UpdateAcmeServerDangerous is the resolver for the updateAcmeServerDangerous field.
func (r *mutationResolver) UpdateAcmeServerDangerous(ctx context.Context, input model.UpdateAcmeServerDangerousInput) (*ent.AcmeServer, error) {
	core, err := loadAcmeServerInfo(input.URL)
	if err != nil {
		return nil, err
	}
	existAcmeServer, err := r.client.AcmeServer.Query().Where(acmeserver.IDEQ(input.ID)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, cerrors.New("cannot find ACME server")
		}
		return nil, cerrors.WithStack(err)
	}
	if input.URL == existAcmeServer.URL {
		return r.updateAcmeServer(ctx, model.UpdateAcmeServerInput{
			ID:          input.ID,
			Name:        input.Name,
			Description: input.Description,
		}, existAcmeServer)
	}
	if existAcmeServer.BuiltIn {
		return nil, cerrors.New("cannot update built-in ACME server")
	}
	update := r.client.AcmeServer.UpdateOneID(input.ID)
	update.
		SetName(input.Name).
		SetURL(input.URL).
		SetExternalAccountRequired(core.GetDirectory().Meta.ExternalAccountRequired).
		SetUpdatedAt(time.Now()).
		SetUpdatedBy(config.SystemUserID)
	if input.Description != nil {
		update.SetDescription(*input.Description)
	} else {
		update.ClearDescription()
	}
	return update.Save(ctx)
}

// DeleteAcmeServer is the resolver for the deleteAcmeServer field.
func (r *mutationResolver) DeleteAcmeServer(ctx context.Context, id uuid.UUID) (bool, error) {
	existAcmeServer, err := r.client.AcmeServer.Query().Where(acmeserver.IDEQ(id)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, cerrors.New("cannot find the ACME server")
		}
		return false, cerrors.WithStack(err)
	}
	if existAcmeServer.BuiltIn {
		return false, cerrors.New("cannot delete built-in ACME server")
	}
	err = r.client.AcmeServer.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, cerrors.WithStack(err)
	}
	return true, nil
}

// AcmeServers is the resolver for the acmeServers field.
func (r *queryResolver) AcmeServers(ctx context.Context, first *int, after *entgql.Cursor[uuid.UUID], last *int, before *entgql.Cursor[uuid.UUID], orderBy *ent.AcmeServerOrder) (*ent.AcmeServerConnection, error) {
	return r.client.AcmeServer.Query().Paginate(ctx, after, first, before, last, ent.WithAcmeServerOrder(orderBy))
}

// AcmeServer is the resolver for the acmeServer field.
func (r *queryResolver) AcmeServer(ctx context.Context, id uuid.UUID) (*ent.AcmeServer, error) {
	return r.client.AcmeServer.Get(ctx, id)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
