package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"acme-manager/config"
	"acme-manager/ent"
	"acme-manager/graphql/model"
	"context"
	"time"

	"entgo.io/contrib/entgql"
	cerrors "github.com/cockroachdb/errors"
	"github.com/google/uuid"
)

// CreateDNSProvider is the resolver for the createDnsProvider field.
func (r *mutationResolver) CreateDNSProvider(ctx context.Context, input model.CreateDNSProviderInput) (*ent.DnsProvider, error) {
	conf, err := prepareDnsProviderConfig(input.Type, input.Config)
	if err != nil {
		return nil, cerrors.WithStack(err)
	}
	create := r.client.DnsProvider.Create()
	create.
		SetID(uuid.New()).
		SetName(input.Name).
		SetType(input.Type).
		SetConfig(conf).
		SetCreatedAt(time.Now()).
		SetCreatedBy(config.SystemUserID)
	if input.Description != nil {
		create.SetDescription(*input.Description)
	}
	provider, err := create.Save(ctx)
	if err == nil {
		sensitiveDnsProvider(provider)
	}
	return provider, err
}

// UpdateDNSProvider is the resolver for the updateDnsProvider field.
func (r *mutationResolver) UpdateDNSProvider(ctx context.Context, input model.UpdateDNSProviderInput) (*ent.DnsProvider, error) {
	exist, err := r.client.DnsProvider.Get(ctx, input.ID)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, cerrors.New("cannot find DNS provider")
		}
		return nil, cerrors.WithStack(err)
	}
	update := exist.Update().
		SetName(input.Name).
		SetUpdatedAt(time.Now()).
		SetUpdatedBy(config.SystemUserID)
	if input.Description != nil {
		update.SetDescription(*input.Description)
	}
	return update.Save(ctx)
}

// UpdateDNSProviderDangerous is the resolver for the updateDnsProviderDangerous field.
func (r *mutationResolver) UpdateDNSProviderDangerous(ctx context.Context, input model.UpdateDNSProviderDangerousInput) (*ent.DnsProvider, error) {
	exist, err := r.client.DnsProvider.Get(ctx, input.ID)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, cerrors.New("cannot find DNS provider")
		}
		return nil, cerrors.WithStack(err)
	}
	conf, err := prepareDnsProviderConfig(input.Type, input.Config)
	if err != nil {
		return nil, cerrors.WithStack(err)
	}
	update := exist.Update().
		SetName(input.Name).
		SetType(input.Type).
		SetConfig(conf).
		SetUpdatedAt(time.Now()).
		SetUpdatedBy(config.SystemUserID)
	if input.Description != nil {
		update.SetDescription(*input.Description)
	}
	return update.Save(ctx)
}

// DeleteDNSProvider is the resolver for the deleteDnsProvider field.
func (r *mutationResolver) DeleteDNSProvider(ctx context.Context, id uuid.UUID) (bool, error) {
	exist, err := r.client.DnsProvider.Get(ctx, id)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, cerrors.New("cannot find DNS provider")
		}
		return false, cerrors.WithStack(err)
	}
	certificatesCount, err := exist.QueryCertificates().Count(ctx)
	if err != nil {
		return false, cerrors.WithStack(err)
	}
	if certificatesCount > 0 {
		return false, cerrors.Wrap(err, "this DNS provider is used by certificates, cannot delete")
	}
	err = r.client.DnsProvider.DeleteOne(exist).Exec(ctx)
	if err != nil {
		return false, cerrors.WithStack(err)
	}
	return true, nil
}

// DNSProviders is the resolver for the dnsProviders field.
func (r *queryResolver) DNSProviders(ctx context.Context, first *int, after *entgql.Cursor[uuid.UUID], last *int, before *entgql.Cursor[uuid.UUID], orderBy *ent.DnsProviderOrder) (*ent.DnsProviderConnection, error) {
	return r.client.DnsProvider.Query().Paginate(ctx, after, first, before, last, ent.WithDnsProviderOrder(orderBy))
}

// DNSProvider is the resolver for the dnsProvider field.
func (r *queryResolver) DNSProvider(ctx context.Context, id uuid.UUID) (*ent.DnsProvider, error) {
	return r.client.DnsProvider.Get(ctx, id)
}
