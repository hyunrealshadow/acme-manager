package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"acme-manager/ent"
	"acme-manager/graphql/generated"
	"acme-manager/graphql/model"
	"context"
	"encoding/json"

	cerrors "github.com/cockroachdb/errors"
	"github.com/google/uuid"
)

// Config is the resolver for the config field.
func (r *dnsProviderResolver) Config(ctx context.Context, obj *ent.DnsProvider) (string, error) {
	jsonBytes, err := json.Marshal(obj.Config)
	if err != nil {
		return "", err
	}
	return string(jsonBytes), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id uuid.UUID) (ent.Noder, error) {
	node, err := r.client.Noder(ctx, id, ent.WithNodeType(func(ctx context.Context, u uuid.UUID) (string, error) {
		globalIdContext := model.GetGlobalIdContext(ctx)
		if table, ok := globalIdContext[u]; ok {
			return table, nil
		}
		return "", cerrors.Errorf("unknown id: %s", u)
	}))
	if err != nil {
		return nil, err
	}
	sensitiveNode(node)
	return node, nil
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []uuid.UUID) ([]ent.Noder, error) {
	nodes, err := r.client.Noders(ctx, ids, ent.WithNodeType(func(ctx context.Context, u uuid.UUID) (string, error) {
		globalIdContext := model.GetGlobalIdContext(ctx)
		if table, ok := globalIdContext[u]; ok {
			return table, nil
		}
		return "", cerrors.Errorf("unknown id: %s", u)
	}))
	if err != nil {
		return nil, err
	}
	for _, node := range nodes {
		sensitiveNode(node)
	}
	return nodes, nil
}

// DnsProvider returns generated.DnsProviderResolver implementation.
func (r *Resolver) DnsProvider() generated.DnsProviderResolver { return &dnsProviderResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type dnsProviderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
type createDnsProviderInputResolver struct{ *Resolver }
type updateDnsProviderInputResolver struct{ *Resolver }
