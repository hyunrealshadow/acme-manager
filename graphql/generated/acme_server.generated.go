// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"acme-manager/ent"
	"acme-manager/graphql/model"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type MutationResolver interface {
	CreateAcmeServer(ctx context.Context, input model.CreateAcmeServerInput) (*ent.AcmeServer, error)
	UpdateAcmeServer(ctx context.Context, input model.UpdateAcmeServerInput) (*ent.AcmeServer, error)
	UpdateAcmeServerDangerous(ctx context.Context, input model.UpdateAcmeServerDangerousInput) (*ent.AcmeServer, error)
	DeleteAcmeServer(ctx context.Context, id uuid.UUID) (bool, error)
	CreateAcmeAccount(ctx context.Context, input model.CreateAcmeAccountInput) (*ent.AcmeAccount, error)
	UpdateAcmeAccount(ctx context.Context, input model.UpdateAcmeAccountInput) (*ent.AcmeAccount, error)
	UpdateAcmeAccountDangerous(ctx context.Context, input model.UpdateAcmeAccountDangerousInput) (*ent.AcmeAccount, error)
	DeleteAcmeAccount(ctx context.Context, id uuid.UUID) (bool, error)
	CreateDNSProvider(ctx context.Context, input model.CreateDNSProviderInput) (*ent.DnsProvider, error)
	UpdateDNSProvider(ctx context.Context, input model.UpdateDNSProviderInput) (*ent.DnsProvider, error)
	UpdateDNSProviderDangerous(ctx context.Context, input model.UpdateDNSProviderDangerousInput) (*ent.DnsProvider, error)
	DeleteDNSProvider(ctx context.Context, id uuid.UUID) (bool, error)
	CreateCertificate(ctx context.Context, input model.CreateCertificateInput) (*ent.Certificate, error)
	UpdateCertificate(ctx context.Context, input model.UpdateCertificateInput) (*ent.Certificate, error)
	DeleteCertificate(ctx context.Context, id uuid.UUID) (bool, error)
	IssueCertificate(ctx context.Context, id uuid.UUID) (bool, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createAcmeAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAcmeAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateAcmeAccountInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐCreateAcmeAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAcmeServer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAcmeServerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateAcmeServerInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐCreateAcmeServerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCertificate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCertificateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateCertificateInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐCreateCertificateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDnsProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateDNSProviderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateDnsProviderInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐCreateDNSProviderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAcmeAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			name, err := ec.unmarshalOString2ᚖstring(ctx, "AcmeAccount")
			if err != nil {
				return nil, err
			}
			if ec.directives.Model == nil {
				return nil, errors.New("directive model is not implemented")
			}
			return ec.directives.Model(ctx, rawArgs, directive0, name)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(uuid.UUID); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAcmeServer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCertificate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			name, err := ec.unmarshalOString2ᚖstring(ctx, "Certificate")
			if err != nil {
				return nil, err
			}
			if ec.directives.Model == nil {
				return nil, errors.New("directive model is not implemented")
			}
			return ec.directives.Model(ctx, rawArgs, directive0, name)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(uuid.UUID); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDnsProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			name, err := ec.unmarshalOString2ᚖstring(ctx, "DnsProvider")
			if err != nil {
				return nil, err
			}
			if ec.directives.Model == nil {
				return nil, errors.New("directive model is not implemented")
			}
			return ec.directives.Model(ctx, rawArgs, directive0, name)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(uuid.UUID); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_issueCertificate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			name, err := ec.unmarshalOString2ᚖstring(ctx, "Certificate")
			if err != nil {
				return nil, err
			}
			if ec.directives.Model == nil {
				return nil, errors.New("directive model is not implemented")
			}
			return ec.directives.Model(ctx, rawArgs, directive0, name)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(uuid.UUID); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAcmeAccountDangerous_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAcmeAccountDangerousInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAcmeAccountDangerousInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateAcmeAccountDangerousInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAcmeAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAcmeAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAcmeAccountInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateAcmeAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAcmeServerDangerous_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAcmeServerDangerousInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAcmeServerDangerousInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateAcmeServerDangerousInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAcmeServer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAcmeServerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAcmeServerInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateAcmeServerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCertificate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCertificateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCertificateInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateCertificateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDnsProviderDangerous_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateDNSProviderDangerousInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateDnsProviderDangerousInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateDNSProviderDangerousInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDnsProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateDNSProviderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateDnsProviderInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateDNSProviderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_createAcmeServer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAcmeServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAcmeServer(rctx, fc.Args["input"].(model.CreateAcmeServerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AcmeServer)
	fc.Result = res
	return ec.marshalNAcmeServer2ᚖacmeᚑmanagerᚋentᚐAcmeServer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAcmeServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AcmeServer_id(ctx, field)
			case "name":
				return ec.fieldContext_AcmeServer_name(ctx, field)
			case "description":
				return ec.fieldContext_AcmeServer_description(ctx, field)
			case "url":
				return ec.fieldContext_AcmeServer_url(ctx, field)
			case "builtIn":
				return ec.fieldContext_AcmeServer_builtIn(ctx, field)
			case "externalAccountRequired":
				return ec.fieldContext_AcmeServer_externalAccountRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_AcmeServer_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_AcmeServer_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AcmeServer_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_AcmeServer_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AcmeServer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAcmeServer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAcmeServer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAcmeServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAcmeServer(rctx, fc.Args["input"].(model.UpdateAcmeServerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AcmeServer)
	fc.Result = res
	return ec.marshalNAcmeServer2ᚖacmeᚑmanagerᚋentᚐAcmeServer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAcmeServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AcmeServer_id(ctx, field)
			case "name":
				return ec.fieldContext_AcmeServer_name(ctx, field)
			case "description":
				return ec.fieldContext_AcmeServer_description(ctx, field)
			case "url":
				return ec.fieldContext_AcmeServer_url(ctx, field)
			case "builtIn":
				return ec.fieldContext_AcmeServer_builtIn(ctx, field)
			case "externalAccountRequired":
				return ec.fieldContext_AcmeServer_externalAccountRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_AcmeServer_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_AcmeServer_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AcmeServer_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_AcmeServer_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AcmeServer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAcmeServer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAcmeServerDangerous(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAcmeServerDangerous(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAcmeServerDangerous(rctx, fc.Args["input"].(model.UpdateAcmeServerDangerousInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AcmeServer)
	fc.Result = res
	return ec.marshalNAcmeServer2ᚖacmeᚑmanagerᚋentᚐAcmeServer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAcmeServerDangerous(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AcmeServer_id(ctx, field)
			case "name":
				return ec.fieldContext_AcmeServer_name(ctx, field)
			case "description":
				return ec.fieldContext_AcmeServer_description(ctx, field)
			case "url":
				return ec.fieldContext_AcmeServer_url(ctx, field)
			case "builtIn":
				return ec.fieldContext_AcmeServer_builtIn(ctx, field)
			case "externalAccountRequired":
				return ec.fieldContext_AcmeServer_externalAccountRequired(ctx, field)
			case "createdAt":
				return ec.fieldContext_AcmeServer_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_AcmeServer_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AcmeServer_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_AcmeServer_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AcmeServer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAcmeServerDangerous_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAcmeServer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAcmeServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAcmeServer(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAcmeServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAcmeServer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAcmeAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAcmeAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAcmeAccount(rctx, fc.Args["input"].(model.CreateAcmeAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AcmeAccount)
	fc.Result = res
	return ec.marshalNAcmeAccount2ᚖacmeᚑmanagerᚋentᚐAcmeAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAcmeAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AcmeAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_AcmeAccount_name(ctx, field)
			case "description":
				return ec.fieldContext_AcmeAccount_description(ctx, field)
			case "email":
				return ec.fieldContext_AcmeAccount_email(ctx, field)
			case "keyType":
				return ec.fieldContext_AcmeAccount_keyType(ctx, field)
			case "keyFingerprint":
				return ec.fieldContext_AcmeAccount_keyFingerprint(ctx, field)
			case "eabKeyID":
				return ec.fieldContext_AcmeAccount_eabKeyID(ctx, field)
			case "eabHmacKey":
				return ec.fieldContext_AcmeAccount_eabHmacKey(ctx, field)
			case "createdAt":
				return ec.fieldContext_AcmeAccount_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_AcmeAccount_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AcmeAccount_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_AcmeAccount_updatedBy(ctx, field)
			case "acmeServer":
				return ec.fieldContext_AcmeAccount_acmeServer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AcmeAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAcmeAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAcmeAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAcmeAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAcmeAccount(rctx, fc.Args["input"].(model.UpdateAcmeAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AcmeAccount)
	fc.Result = res
	return ec.marshalNAcmeAccount2ᚖacmeᚑmanagerᚋentᚐAcmeAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAcmeAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AcmeAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_AcmeAccount_name(ctx, field)
			case "description":
				return ec.fieldContext_AcmeAccount_description(ctx, field)
			case "email":
				return ec.fieldContext_AcmeAccount_email(ctx, field)
			case "keyType":
				return ec.fieldContext_AcmeAccount_keyType(ctx, field)
			case "keyFingerprint":
				return ec.fieldContext_AcmeAccount_keyFingerprint(ctx, field)
			case "eabKeyID":
				return ec.fieldContext_AcmeAccount_eabKeyID(ctx, field)
			case "eabHmacKey":
				return ec.fieldContext_AcmeAccount_eabHmacKey(ctx, field)
			case "createdAt":
				return ec.fieldContext_AcmeAccount_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_AcmeAccount_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AcmeAccount_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_AcmeAccount_updatedBy(ctx, field)
			case "acmeServer":
				return ec.fieldContext_AcmeAccount_acmeServer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AcmeAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAcmeAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAcmeAccountDangerous(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAcmeAccountDangerous(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAcmeAccountDangerous(rctx, fc.Args["input"].(model.UpdateAcmeAccountDangerousInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AcmeAccount)
	fc.Result = res
	return ec.marshalNAcmeAccount2ᚖacmeᚑmanagerᚋentᚐAcmeAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAcmeAccountDangerous(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AcmeAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_AcmeAccount_name(ctx, field)
			case "description":
				return ec.fieldContext_AcmeAccount_description(ctx, field)
			case "email":
				return ec.fieldContext_AcmeAccount_email(ctx, field)
			case "keyType":
				return ec.fieldContext_AcmeAccount_keyType(ctx, field)
			case "keyFingerprint":
				return ec.fieldContext_AcmeAccount_keyFingerprint(ctx, field)
			case "eabKeyID":
				return ec.fieldContext_AcmeAccount_eabKeyID(ctx, field)
			case "eabHmacKey":
				return ec.fieldContext_AcmeAccount_eabHmacKey(ctx, field)
			case "createdAt":
				return ec.fieldContext_AcmeAccount_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_AcmeAccount_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AcmeAccount_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_AcmeAccount_updatedBy(ctx, field)
			case "acmeServer":
				return ec.fieldContext_AcmeAccount_acmeServer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AcmeAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAcmeAccountDangerous_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAcmeAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAcmeAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAcmeAccount(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAcmeAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAcmeAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDnsProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDnsProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDNSProvider(rctx, fc.Args["input"].(model.CreateDNSProviderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DnsProvider)
	fc.Result = res
	return ec.marshalNDnsProvider2ᚖacmeᚑmanagerᚋentᚐDnsProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDnsProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DnsProvider_id(ctx, field)
			case "name":
				return ec.fieldContext_DnsProvider_name(ctx, field)
			case "description":
				return ec.fieldContext_DnsProvider_description(ctx, field)
			case "type":
				return ec.fieldContext_DnsProvider_type(ctx, field)
			case "config":
				return ec.fieldContext_DnsProvider_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_DnsProvider_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DnsProvider_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DnsProvider_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DnsProvider_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DnsProvider", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDnsProvider_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDnsProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDnsProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDNSProvider(rctx, fc.Args["input"].(model.UpdateDNSProviderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DnsProvider)
	fc.Result = res
	return ec.marshalNDnsProvider2ᚖacmeᚑmanagerᚋentᚐDnsProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDnsProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DnsProvider_id(ctx, field)
			case "name":
				return ec.fieldContext_DnsProvider_name(ctx, field)
			case "description":
				return ec.fieldContext_DnsProvider_description(ctx, field)
			case "type":
				return ec.fieldContext_DnsProvider_type(ctx, field)
			case "config":
				return ec.fieldContext_DnsProvider_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_DnsProvider_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DnsProvider_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DnsProvider_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DnsProvider_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DnsProvider", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDnsProvider_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDnsProviderDangerous(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDnsProviderDangerous(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDNSProviderDangerous(rctx, fc.Args["input"].(model.UpdateDNSProviderDangerousInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.DnsProvider)
	fc.Result = res
	return ec.marshalODnsProvider2ᚖacmeᚑmanagerᚋentᚐDnsProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDnsProviderDangerous(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DnsProvider_id(ctx, field)
			case "name":
				return ec.fieldContext_DnsProvider_name(ctx, field)
			case "description":
				return ec.fieldContext_DnsProvider_description(ctx, field)
			case "type":
				return ec.fieldContext_DnsProvider_type(ctx, field)
			case "config":
				return ec.fieldContext_DnsProvider_config(ctx, field)
			case "createdAt":
				return ec.fieldContext_DnsProvider_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_DnsProvider_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DnsProvider_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_DnsProvider_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DnsProvider", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDnsProviderDangerous_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDnsProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDnsProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDNSProvider(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDnsProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDnsProvider_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCertificate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCertificate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificate(rctx, fc.Args["input"].(model.CreateCertificateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Certificate)
	fc.Result = res
	return ec.marshalNCertificate2ᚖacmeᚑmanagerᚋentᚐCertificate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCertificate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Certificate_id(ctx, field)
			case "commonName":
				return ec.fieldContext_Certificate_commonName(ctx, field)
			case "subjectAlternativeName":
				return ec.fieldContext_Certificate_subjectAlternativeName(ctx, field)
			case "organization":
				return ec.fieldContext_Certificate_organization(ctx, field)
			case "organizationalUnit":
				return ec.fieldContext_Certificate_organizationalUnit(ctx, field)
			case "country":
				return ec.fieldContext_Certificate_country(ctx, field)
			case "state":
				return ec.fieldContext_Certificate_state(ctx, field)
			case "locality":
				return ec.fieldContext_Certificate_locality(ctx, field)
			case "streetAddress":
				return ec.fieldContext_Certificate_streetAddress(ctx, field)
			case "keyType":
				return ec.fieldContext_Certificate_keyType(ctx, field)
			case "fingerprint":
				return ec.fieldContext_Certificate_fingerprint(ctx, field)
			case "status":
				return ec.fieldContext_Certificate_status(ctx, field)
			case "issuedAt":
				return ec.fieldContext_Certificate_issuedAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Certificate_expiresAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Certificate_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Certificate_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Certificate_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Certificate_updatedBy(ctx, field)
			case "acmeAccount":
				return ec.fieldContext_Certificate_acmeAccount(ctx, field)
			case "dnsProvider":
				return ec.fieldContext_Certificate_dnsProvider(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Certificate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCertificate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCertificate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCertificate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCertificate(rctx, fc.Args["input"].(model.UpdateCertificateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Certificate)
	fc.Result = res
	return ec.marshalNCertificate2ᚖacmeᚑmanagerᚋentᚐCertificate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCertificate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Certificate_id(ctx, field)
			case "commonName":
				return ec.fieldContext_Certificate_commonName(ctx, field)
			case "subjectAlternativeName":
				return ec.fieldContext_Certificate_subjectAlternativeName(ctx, field)
			case "organization":
				return ec.fieldContext_Certificate_organization(ctx, field)
			case "organizationalUnit":
				return ec.fieldContext_Certificate_organizationalUnit(ctx, field)
			case "country":
				return ec.fieldContext_Certificate_country(ctx, field)
			case "state":
				return ec.fieldContext_Certificate_state(ctx, field)
			case "locality":
				return ec.fieldContext_Certificate_locality(ctx, field)
			case "streetAddress":
				return ec.fieldContext_Certificate_streetAddress(ctx, field)
			case "keyType":
				return ec.fieldContext_Certificate_keyType(ctx, field)
			case "fingerprint":
				return ec.fieldContext_Certificate_fingerprint(ctx, field)
			case "status":
				return ec.fieldContext_Certificate_status(ctx, field)
			case "issuedAt":
				return ec.fieldContext_Certificate_issuedAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Certificate_expiresAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Certificate_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Certificate_createdBy(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Certificate_updatedAt(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Certificate_updatedBy(ctx, field)
			case "acmeAccount":
				return ec.fieldContext_Certificate_acmeAccount(ctx, field)
			case "dnsProvider":
				return ec.fieldContext_Certificate_dnsProvider(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Certificate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCertificate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCertificate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCertificate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCertificate(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCertificate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCertificate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_issueCertificate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_issueCertificate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().IssueCertificate(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_issueCertificate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_issueCertificate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateAcmeServerInput(ctx context.Context, obj interface{}) (model.CreateAcmeServerInput, error) {
	var it model.CreateAcmeServerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAcmeServerDangerousInput(ctx context.Context, obj interface{}) (model.UpdateAcmeServerDangerousInput, error) {
	var it model.UpdateAcmeServerDangerousInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "description", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				name, err := ec.unmarshalOString2ᚖstring(ctx, "AcmeServer")
				if err != nil {
					return nil, err
				}
				if ec.directives.Model == nil {
					return nil, errors.New("directive model is not implemented")
				}
				return ec.directives.Model(ctx, obj, directive0, name)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(uuid.UUID); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAcmeServerInput(ctx context.Context, obj interface{}) (model.UpdateAcmeServerInput, error) {
	var it model.UpdateAcmeServerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				name, err := ec.unmarshalOString2ᚖstring(ctx, "AcmeServer")
				if err != nil {
					return nil, err
				}
				if ec.directives.Model == nil {
					return nil, errors.New("directive model is not implemented")
				}
				return ec.directives.Model(ctx, obj, directive0, name)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(uuid.UUID); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAcmeServer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAcmeServer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAcmeServer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAcmeServer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAcmeServerDangerous":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAcmeServerDangerous(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAcmeServer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAcmeServer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAcmeAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAcmeAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAcmeAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAcmeAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAcmeAccountDangerous":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAcmeAccountDangerous(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAcmeAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAcmeAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDnsProvider":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDnsProvider(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDnsProvider":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDnsProvider(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDnsProviderDangerous":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDnsProviderDangerous(ctx, field)
			})
		case "deleteDnsProvider":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDnsProvider(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCertificate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCertificate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCertificate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCertificate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCertificate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCertificate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "issueCertificate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_issueCertificate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateAcmeServerInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐCreateAcmeServerInput(ctx context.Context, v interface{}) (model.CreateAcmeServerInput, error) {
	res, err := ec.unmarshalInputCreateAcmeServerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAcmeServerDangerousInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateAcmeServerDangerousInput(ctx context.Context, v interface{}) (model.UpdateAcmeServerDangerousInput, error) {
	res, err := ec.unmarshalInputUpdateAcmeServerDangerousInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAcmeServerInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateAcmeServerInput(ctx context.Context, v interface{}) (model.UpdateAcmeServerInput, error) {
	res, err := ec.unmarshalInputUpdateAcmeServerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
