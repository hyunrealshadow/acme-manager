// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"acme-manager/graphql/model"
	"context"
	"errors"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateCertificateInput(ctx context.Context, obj interface{}) (model.CreateCertificateInput, error) {
	var it model.CreateCertificateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"commonName", "subjectAlternativeName", "organization", "organizationalUnit", "country", "state", "locality", "streetAddress", "keyType", "acmeAccountID", "dnsProviderID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "commonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commonName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommonName = data
		case "subjectAlternativeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectAlternativeName"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubjectAlternativeName = data
		case "organization":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Organization = data
		case "organizationalUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationalUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationalUnit = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "state":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "streetAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetAddress = data
		case "keyType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyType"))
			data, err := ec.unmarshalNKeyType2acmeᚑmanagerᚋentᚋschemaᚋenumᚐKeyType(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyType = data
		case "acmeAccountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acmeAccountID"))
			data, err := ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcmeAccountID = data
		case "dnsProviderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dnsProviderID"))
			data, err := ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DNSProviderID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCertificateInput(ctx context.Context, obj interface{}) (model.UpdateCertificateInput, error) {
	var it model.UpdateCertificateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "commonName", "subjectAlternativeName", "organization", "organizationalUnit", "country", "state", "locality", "streetAddress", "keyType", "acmeAccountID", "dnsProviderID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				name, err := ec.unmarshalOString2ᚖstring(ctx, "Certificate")
				if err != nil {
					return nil, err
				}
				if ec.directives.Model == nil {
					return nil, errors.New("directive model is not implemented")
				}
				return ec.directives.Model(ctx, obj, directive0, name)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(uuid.UUID); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/google/uuid.UUID`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "commonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commonName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommonName = data
		case "subjectAlternativeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectAlternativeName"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubjectAlternativeName = data
		case "organization":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Organization = data
		case "organizationalUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationalUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationalUnit = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "state":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "streetAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetAddress = data
		case "keyType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyType"))
			data, err := ec.unmarshalOKeyType2ᚖacmeᚑmanagerᚋentᚋschemaᚋenumᚐKeyType(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyType = data
		case "acmeAccountID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acmeAccountID"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				name, err := ec.unmarshalOString2ᚖstring(ctx, "AcmeAccount")
				if err != nil {
					return nil, err
				}
				if ec.directives.Model == nil {
					return nil, errors.New("directive model is not implemented")
				}
				return ec.directives.Model(ctx, obj, directive0, name)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*uuid.UUID); ok {
				it.AcmeAccountID = data
			} else if tmp == nil {
				it.AcmeAccountID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/google/uuid.UUID`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dnsProviderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dnsProviderID"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				name, err := ec.unmarshalOString2ᚖstring(ctx, "DnsProvider")
				if err != nil {
					return nil, err
				}
				if ec.directives.Model == nil {
					return nil, errors.New("directive model is not implemented")
				}
				return ec.directives.Model(ctx, obj, directive0, name)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*uuid.UUID); ok {
				it.DNSProviderID = data
			} else if tmp == nil {
				it.DNSProviderID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/google/uuid.UUID`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateCertificateInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐCreateCertificateInput(ctx context.Context, v interface{}) (model.CreateCertificateInput, error) {
	res, err := ec.unmarshalInputCreateCertificateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCertificateInput2acmeᚑmanagerᚋgraphqlᚋmodelᚐUpdateCertificateInput(ctx context.Context, v interface{}) (model.UpdateCertificateInput, error) {
	res, err := ec.unmarshalInputUpdateCertificateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
